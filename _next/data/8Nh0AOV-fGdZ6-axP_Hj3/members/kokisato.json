{"pageProps":{"member":{"id":"kokisato","name":"Koki Sato","role":"SRE","bio":"piyo","avatarSrc":"/avatars/kokisato.png","sources":["https://zenn.dev/kou_pg_0131/feed"],"includeUrlRegex":"","twitterUsername":"koki_develop","githubUsername":"koki-develop","websiteUrl":"https://koki.me"},"postItems":[{"title":"GitHub の Secret scanning’s push protection を試してみる","contentSnippet":"GitHub の Secret scanning's push protection がパブリックリポジトリで無料で使えるようになりました 🎉🎉🎉https://github.blog/changelog/2023-05-09-secret-scannings-push-protection-is-available-on-public-repositories-for-free/Secret scanning's push protection を使うと、例えば AWS のアクセスキーなどといったシークレットをリポジトリへ push するのをブロックすることができます。シークレッ...","link":"https://zenn.dev/kou_pg_0131/articles/gh-secret-scannings-push-protection","isoDate":"2023-05-10T10:00:00.000Z","dateMiliSeconds":1683712800000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"リッチなプログレスバー付きの sleep コマンド「slp」の紹介","contentSnippet":"リッチなプログレスバー付きの sleep コマンドである slp を作りました。https://github.com/koki-develop/slpこういうのこの記事では slp のインストール方法 ~ 使い方についてまとめます。インストール使い方まとめ インストールHomebrew を使用している場合は brew install でインストールできます。$ brew install koki-develop/tap/slpもしくは、 slp は Go で作られているため go install でインストールすることもできます。$ go install g...","link":"https://zenn.dev/kou_pg_0131/articles/slp-introduction","isoDate":"2023-05-08T09:32:10.000Z","dateMiliSeconds":1683538330000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"コンソールに GitHub の草を生やす GitHub CLI 拡張機能「gh-grass」の紹介","contentSnippet":"GitHub の草 ( Contribution Graph ) をどうしてもコンソールに生やしたくなることはありませんか？ありますよね？僕はありません。そんなときに便利な GitHub CLI 拡張機能「gh-grass」を作りました。https://github.com/koki-develop/gh-grassこういうことができます。他にもこんなことや、文字をカスタマイズこんなこともできます。アニメーションこの記事では gh-grass のインストール方法から基本的な使い方についてまとめます。 インストール!GitHub CLI がインストールされてい...","link":"https://zenn.dev/kou_pg_0131/articles/gh-grass-introduction","isoDate":"2023-05-01T09:19:56.000Z","dateMiliSeconds":1682932796000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"羊を眠らせる sleep コマンド「sheep」の紹介","contentSnippet":"羊を眠らせる sleep コマンドである sheep を作りました。https://github.com/koki-develop/sheepこの記事では sheep のインストール方法 ~ 使い方についてまとめます。インストール使い方まとめ インストールHomebrew を使用している場合は brew install でインストールできます。$ brew install koki-develop/tap/sheepもしくは、 sheep は Go で作られているため go install でインストールすることもできます。$ go install githu...","link":"https://zenn.dev/kou_pg_0131/articles/sheep-introduction","isoDate":"2023-04-25T09:00:22.000Z","dateMiliSeconds":1682413222000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Go の Fuzzy Finder ライブラリ「go-fzf」の紹介","contentSnippet":"Go の Fuzzy Finder ライブラリである go-fzf を作りました。https://github.com/koki-develop/go-fzfgo-fzf を使用すると次のような Fuzzy Finder を簡単に実装することができます。上の例で実行している main.go の内容はこれだけです。main.gopackage mainimport (\t\"fmt\"\t\"log\"\t\"github.com/koki-develop/go-fzf\")func main() {\titems := []string{\"hello\", \"world\", ...","link":"https://zenn.dev/kou_pg_0131/articles/go-fzf-introduction","isoDate":"2023-04-17T10:01:33.000Z","dateMiliSeconds":1681725693000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"タニタの Health Planet API を使用して測定情報を取得する","contentSnippet":"最近タニタの体組成計を買いました。https://www.amazon.co.jp/dp/B07Q2WYL77Health Planet というサービスを利用して測定情報を記録しているのですが、 API が提供されていたので試してみました。https://www.healthplanet.jp/ 前提Health Planet に登録済みであることを前提とします。 1. アプリケーションを登録!Health Planet にログインしていない場合は最初に下記ページからログインしてください。ログインする ｜ Health Planet  ヘルスプラネットアプリ...","link":"https://zenn.dev/kou_pg_0131/articles/tanita-health-planet-api","isoDate":"2023-04-10T09:25:53.000Z","dateMiliSeconds":1681118753000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Next.js + Mantine + GitHub Pages でポートフォリオサイトを作った","contentSnippet":"https://koki.me以前から作ってはいたんですが最近 1 から作り直しました。正直これといって特筆するようなことは何もないんですがせっかく作ったので紹介です。 リポジトリhttps://github.com/koki-develop/koki-develop.github.io 作った理由名刺代わりです。自己紹介するときにスキルセットや成果物などを毎回話すのは面倒臭い手間なので、「URL ひとつ渡せば大体わかる」みたいなページが欲しかったというのが理由です。そのようなニーズを満たすためのサービスは色々ありますが、せっかくなので自分で好きなようにカスタマイズで...","link":"https://zenn.dev/kou_pg_0131/articles/portfolio-introduction","isoDate":"2023-04-03T09:20:49.000Z","dateMiliSeconds":1680513649000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Go 製のタイピングゲーム「Typingo」を作った","contentSnippet":"Typing + Go = Typingo という語呂のいい名前が思いついてしまったので勢いで作りました。これが俗に言う命名駆動開発 ( NDD: Name-Driven Development ) です。https://github.com/koki-develop/typingoこの記事では Typingo のインストール方法から遊び方、利用技術を簡単に紹介します。インストール遊び方利用技術 インストールHomebrew を使用している場合は brew install を使用してインストールできます。$ brew install koki-develop/t...","link":"https://zenn.dev/kou_pg_0131/articles/typingo-introduction","isoDate":"2023-03-27T09:29:52.000Z","dateMiliSeconds":1679909392000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"cat コマンド代替の Go 製 CLI 「gat」の紹介","contentSnippet":"cat コマンド代替の Go 製コマンドラインツールである gat を作りました。https://github.com/koki-develop/gatgat を使うとファイルの内容をシンタックスハイライトつきで出力することができます。この記事では gat の使い方についてまとめます。インストール使い方仕組み インストールHomebrew を使用している場合は brew install を使用してインストールできます。$ brew install gat# or$ brew install koki-develop/tap/gatもしくは、 gat は G...","link":"https://zenn.dev/kou_pg_0131/articles/gat-introduction","isoDate":"2023-03-20T10:10:50.000Z","dateMiliSeconds":1679307050000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"cmatrix コマンドでターミナルに文字を降らせる","contentSnippet":"普段ターミナルを操作しているとき、特に仕事中などはターミナルに文字を降らせたいケースがよくあると思います。そんなときに cmatrix コマンドを使用すると簡単にターミナルに文字を降らせることができます。cmatrix コマンドhttps://www.asty.org/cmatrix/https://github.com/abishekvashok/cmatrixこの記事では cmatrix コマンドのインストール方法や使い方を簡単に紹介します。 インストールHomebrew を使用している場合は brew install でインストールすることができます。$ bre...","link":"https://zenn.dev/kou_pg_0131/articles/cmatrix-introduction","isoDate":"2023-03-13T09:31:04.000Z","dateMiliSeconds":1678699864000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Terraform 1.4 で導入された terraform_data リソースの使い方","contentSnippet":"Terraform 1.4 が GA になりました 🎉🎉🎉https://www.hashicorp.com/blog/terraform-1-4-improves-the-cli-experience-for-terraform-cloudTerraform 1.4 では新しく terraform_data リソースが導入されました。terraform_data リソースは null_resource を置き換えるものであり、さらに異なる用途にも使用できます。https://developer.hashicorp.com/terraform/language/resources...","link":"https://zenn.dev/kou_pg_0131/articles/tf-1_4-terraform-data","isoDate":"2023-03-09T09:06:50.000Z","dateMiliSeconds":1678352810000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Notion API を使用してデータベースを操作する","contentSnippet":"Notion で Integration を作成して Notion API を使用してデータベースを操作するまでの手順メモ。 準備 1. Integration を作成するMy integrations ページに遷移します。Create new integration をクリックします。Name には任意の Integration 名を入力します。今回は Example Integration としておきます。Associated workspace には Integration をインストールするワークスペースを選択します。自身がワークスペースの Admin レベ...","link":"https://zenn.dev/kou_pg_0131/articles/notion-api-usage","isoDate":"2023-03-06T09:13:09.000Z","dateMiliSeconds":1678093989000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"GitHub Actions Importer を使って CI/CD を GitHub Actions に移行する","contentSnippet":"GitHub Actions Importer が GA になりました 🎉🎉🎉https://github.blog/2023-03-01-github-actions-importer-is-now-generally-available/GitHub Actions Importer は様々な CI サービスから GitHub Actions への移行をサポートするツールです。他の CI サービスで使用している設定ファイルを元に GitHub Actions ワークフロー定義の YAML ファイルを自動で作成することができます。2023 年 03 月 02 日現在、次の CI...","link":"https://zenn.dev/kou_pg_0131/articles/gh-actions-importer","isoDate":"2023-03-02T08:10:59.000Z","dateMiliSeconds":1677744659000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Charm 製の Go ロギングライブラリ「Log」を試してみる","contentSnippet":"Charm 製の Go ロギングライブラリが出たので早速試してみたメモです。https://github.com/charmbracelet/log 検証環境Go v1.20charmbracelet/log v0.1.1 使い方 基本的な使い方以下のメソッドを使うと特定のレベルのログを出力します。log.Debug()log.Info()log.Warn()log.Error()log.Fatal()log.Print() は設定されているログレベルに関係なく出力されます。package mainimport \"github.com/cha...","link":"https://zenn.dev/kou_pg_0131/articles/charm-log-introduction","isoDate":"2023-02-27T09:29:55.000Z","dateMiliSeconds":1677490195000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Mosquitto で AWS IoT Core にメッセージを Publish/Subscribe する","contentSnippet":"オープンソースの MQTT メッセージブローカーである Mosquitto を使用して Mac で AWS IoT Core にメッセージを Publish/Subscribe を行う手順のメモ。https://mosquitto.org/ 準備 Mosquitto をインストールPublish/Subscribe を行うデバイスに Mosquitto をインストールします。今回は Mac を使用します。Homebrew を使用している場合は次のコマンドでインストールすることができます。$ brew install mosquittoその他のインストール方法については...","link":"https://zenn.dev/kou_pg_0131/articles/aws-iot-core-mosquitto","isoDate":"2023-02-20T10:00:32.000Z","dateMiliSeconds":1676887232000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"AWS IoT ルールで Timestream にメッセージを保存する","contentSnippet":"メッセージを Timestream に保存する IoT ルールを作成して MQTT テストクライアントで動作確認するまでの手順メモ。 手順 1. Timestream データベースを作成するTimestream データベースを作成していきます。Amazon Timestream のマネジメントコンソールで左メニューから データベース をクリックし、 データベースを作成 をクリックします。各項目を次のように入力します。項目値設定を選択標準データベース名前任意のデータベース名。今回は example とします。その他の設定は必要に応じて入...","link":"https://zenn.dev/kou_pg_0131/articles/aws-iot-rule-to-timestream","isoDate":"2023-02-20T09:32:19.000Z","dateMiliSeconds":1676885539000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"GitHub Actions でプライベートリポジトリを checkout する","contentSnippet":"GitHub Actions で別のプライベートリポジトリを checkout する方法のメモ。 サンプルコードこの記事で紹介するサンプルコードは以下のリポジトリで管理しています。https://github.com/koki-develop/gh-actions-checkout-private-repo-example 前置きこのドキュメントでは次の 2 通りの方法についてまとめます。Deploy keys を使う方法Personal Access Token を使う方法いずれの方法も GitHub Actions ワークフローを作成するリポジトリと chec...","link":"https://zenn.dev/kou_pg_0131/articles/gh-actions-checkout-private-repo","isoDate":"2023-02-13T09:40:56.000Z","dateMiliSeconds":1676281256000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"GitHub Actions から ECR に Docker イメージを push する","contentSnippet":"備忘録。 サンプルコード今回紹介するサンプルコードは以下のリポジトリで管理しています。https://github.com/koki-develop/github-actions-ecr-push-example 準備 1. GitHub Actions 用の ID プロバイダと IAM ロールを作成するGitHub Actions で OIDC を使用して AWS 認証を行うために、下記ドキュメントを参考に ID プロバイダと IAM ロールを作成します。https://zenn.dev/kou_pg_0131/articles/gh-actions-oidc-aw...","link":"https://zenn.dev/kou_pg_0131/articles/gh-actions-ecr-push-image","isoDate":"2023-02-08T10:03:48.000Z","dateMiliSeconds":1675850628000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Docker イメージのタグ一覧を取得する docker-tags CLI の紹介","contentSnippet":"概要Docker イメージのタグ一覧を取得する docker-tags CLI を公開しました。https://github.com/koki-develop/docker-tags以下のように任意の Docker イメージのタグ一覧を取得して出力することができます。$ docker-tags alpinelatestedge3.9.63.9.53.9.4# ...# 名前付きで出力することもできる$ docker-tags alpine -nalpine:latestalpine:edgealpine:3.9.6alpine:3.9.5alpin...","link":"https://zenn.dev/kou_pg_0131/articles/docker-tags-cli-usage","isoDate":"2023-02-06T09:19:35.000Z","dateMiliSeconds":1675675175000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"GitHub Actions で GitHub の画像キャッシュをクリアする","contentSnippet":"GitHub では README などに載せた画像は Camo という画像プロキシ経由で https://camo.githubusercontent.com/... のような URL で配信されるのですが、たまにこれらの画像が長期間キャッシュされてしまうことがあります。例えば僕の GitHub Profile には Badge Generator で作成した Zenn や Qiita のバッジを表示しているのですが、これらの画像が長期間キャッシュされて正しい数値が表示されていないことがありました。GitHub Profileこれらの画像キャッシュをクリアするシェルスクリプトなど...","link":"https://zenn.dev/kou_pg_0131/articles/hub-purge-action-usage","isoDate":"2023-01-30T10:22:30.000Z","dateMiliSeconds":1675074150000,"authorName":"Koki Sato","authorId":"kokisato"}]},"__N_SSG":true}