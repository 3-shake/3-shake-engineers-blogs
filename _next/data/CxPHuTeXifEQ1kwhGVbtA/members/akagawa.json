{"pageProps":{"member":{"id":"akagawa","name":"Daisuke Akagawa","avatarSrc":"/avatars/akagawa.png","role":"Full Stack Engineer","bio":"Akasan","sources":["https://zenn.dev/akasan/feed","https://medium.com/feed/@daisuke1024akagawa"],"githubUsername":"Akasan","twitterUsername":"","websiteUrl":""},"postItems":[{"title":"Rayシリーズ：Ray Dataへの入門 ~quickstart~","link":"https://zenn.dev/akasan/articles/3cdf0bd79a898a","contentSnippet":"今回はRayでデータを取り扱うためのRay Dataについて、Quickstartを通して入門してみました。 Ray Dataとは？Ray Dataは、Ray上に構築されたMLとAIワークロードのためのスケーラブルなデータ処理ライブラリです。 バッチ推論やデータ前処理、MLトレーニングのためのインジェストなど、AIワークロードを表現するための柔軟で高性能なAPIを提供してくれます。他の分散データシステムとは異なり、Ray Dataはストリーミング実行を特徴としており、大規模なデータセットを効率的に処理し、CPUとGPUの両方のワークロードで高い利用率を維持します。Ray Data...","isoDate":"2025-10-25T12:05:51.000Z","dateMiliSeconds":1761393951000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"30歳を迎えたMLエンジニアが今後の計画を考えてみた","link":"https://zenn.dev/akasan/articles/35d7eeebb7a84c","contentSnippet":"本日筆者は30歳を迎えまして、人生のある意味節目なので今後のプランを考えてみました。 まずは20代を振り返る 何をやってきたか22際から新卒エンジニアとして働き始めて8年程度でしょうか、色々な業務をこなしてきました。ざっと上げただけでもこんな感じですかね。ソフトウェア開発OCRを利用した業務効率化ソフトウェアの改修データ分析ソフトウェアの設計・開発プログラミング効率化のためのソフトウェア開発異常検知モデルの結果や設定をするためのWebアプリケーションの実装ロボット制御開発経路計画立案システムの構築ロボットの制御ソフトウェア開発ロボット制御のための回路...","isoDate":"2025-10-24T13:09:25.000Z","dateMiliSeconds":1761311365000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"NeMo Guardrailsを試してみた","link":"https://zenn.dev/akasan/articles/0b825a53e78e06","contentSnippet":"今回はNVIDIAが提供するNeMo Guardrailsを利用してみました。NeMo Guardrailsを利用することでプログラムを用いてガードレール機能を導入することができます。 NeMo Guardrailsとは？こちらの解説によると、NeMo Guardrails はプログラム可能なガードレールを LLM ベースの対話システムに簡単に追加するための OSS です。NeMo Guardrails を使用する事で、簡単なコンフィグレーションの作成と Python によるコーディングのみで、信頼性のある、安全でセキュアな LLM 対話システムの構築を簡単に行う事ができます。...","isoDate":"2025-10-23T14:18:27.000Z","dateMiliSeconds":1761229107000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"DecisionTree分類器の構造を可視化してみる","link":"https://zenn.dev/akasan/articles/dc29b37ec0d998","contentSnippet":"今回はscikit-learnのDecisionTree分類器の学習結果を可視化する方法をまとめてみます。 DecisionTree分類器とは？DecisionTree分類器は決定木を利用した分類器です。構造としては二分木で、各ノードで何かしらの条件により入力データが2つに分割されます。その分割を複数段階適用することでクラス分類をすると言うものになります。DecisionTree分類器については以下をご参照ください。https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifi...","isoDate":"2025-10-22T13:31:10.000Z","dateMiliSeconds":1761139870000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"build.nvidia.comからgpt-oss-120bを使ってみた","link":"https://zenn.dev/akasan/articles/1bb37e8ad6de59","contentSnippet":"今回はbuild.nvidia.comで利用できるgpt-oss-120bを利用してみました。 build.nvidia.comとは？build.nvidia.comはNVIDIAが提供しているNIMのAPIを試せる環境となっています。NIMとは公式ページにて以下のように説明されています。NVIDIA NIM™ は、クラウド、データセンター、ワークステーション、エッジなど、あらゆる NVIDIA アクセラレーテッド インフラストラクチャに最新の AI モデルを迅速にデプロイできるように、最適化された事前構築済みの推論マイクロサービスを提供します。要はマイクロサービスとして様...","isoDate":"2025-10-21T13:38:50.000Z","dateMiliSeconds":1761053930000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"LogisticRegressionの重みを可視化してみる","link":"https://zenn.dev/akasan/articles/f3ec2f94a385b3","contentSnippet":"今回はLogisticRegressionの回帰係数を可視化して各特徴量の分類に対する寄与度を可視化してみました。 検証内容今回はscikit-learn上で利用できるirisデータを使います。irisは多クラス（３クラス）データであり特徴量は4つあります。LogisticRegressionを学習させ、その回帰係数を可視化してみます。 早速実装する 環境構築まずは必要なライブラリをインストールします。uv init iris_logistic_regression -p 3.12cd iris_logistic_regressionuv add scikit-le...","isoDate":"2025-10-20T14:11:09.000Z","dateMiliSeconds":1760969469000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"imbalanced-learnを利用してアンダー/オーバーサンプリングを実施してみた","link":"https://zenn.dev/akasan/articles/7a148787cb3be8","contentSnippet":"今回はimbalanced-learnを利用してデータセットの偏りを調整する方法を試してみました。機械学習ではデータの分布がとても重要であり、偏ったデータ分布は好ましくない場合が多いです。そのような場合にデータの偏りを補正するためのライブラリとしてimbalanced-learnがあり、今回はそれを利用してみました。 データの偏りとは？文字通りですが、データに偏りがある状態をいいます。例えばある病気について、診察対象の人が病気に罹患しているかしていないかをまとめたデータセットがあったとします。仮にその病気に罹患している人が極めて少数の場合、このデータセットは大半が罹患していない人...","isoDate":"2025-10-19T03:34:17.000Z","dateMiliSeconds":1760844857000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"glomを使ってdictのネストを取り扱ってみた","link":"https://zenn.dev/akasan/articles/1d839a9083627c","contentSnippet":"今回はPythonのライブラリであるglomを使ってみました。glomを利用するとネストされたdictを扱う際にいくつもキーにアクセスするためにカッコを使わなくても簡単にアクセスできるようになります。ちなみに、なぜこのライブラリを知ったかというと以下の記事が気になって読んでいると出てきたので調べてみた次第です。ぜひ以下の記事もご覧ください。https://medium.com/@abdur.rahman12/the-python-toolbelt-12-tiny-libraries-that-solve-big-problems-9a6be9309e43 glomとは？glom...","isoDate":"2025-10-18T06:23:24.000Z","dateMiliSeconds":1760768604000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"二つのCubeの重なり部分を削除したUSD primの生成方法","link":"https://zenn.dev/akasan/articles/0b0a014a5eb790","contentSnippet":"今回はふと気になったので、OpenUSDで二つのCubeを生成してその重なっているところを削除したような図形を作る方法を調べてみました。※ ChatGPTに作り方を聞きました。いつもお世話になっております。 今回やってみたかったこともう少し厳密に今回やってみたかったことを文字起こしすると以下のようになります。二つのCubeをA、BとするAとBには重なる部分があるとするAからAとBが重なっている場所を削除する 早速ChatGPTに聞いてみた質問内容としては以下のように問い合わせました。pxr.UsdGeom.Cubeで作成したキューブAとBがあるとします。例えば...","isoDate":"2025-10-17T13:58:23.000Z","dateMiliSeconds":1760709503000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"skorchを使ってPyTorchモデルを学習してみた","link":"https://zenn.dev/akasan/articles/e8fd84246d013c","contentSnippet":"今回はskorchを使ってPyTorchのモデルを学習してみました。skorchを利用すると、scikit-learnと同じ使い勝手でモデルを学習できるようになります。 skorchとは？先ほども書いたように、skorchを利用するとscikit-learnと互換性がある記述方式でPyTorchのモデルを学習できます。後ほどサンプルを見ながら進めますが、PyTorchで定義したモデルをskorchに受け渡して学習に利用できます。https://github.com/skorch-dev/skorch 早速使ってみる今回はGitHubに乗っているサンプルを元に使ってみます。...","isoDate":"2025-10-16T12:49:36.000Z","dateMiliSeconds":1760618976000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Pythonの@オペレータについて調べてみた","link":"https://zenn.dev/akasan/articles/e78d7c565fadaa","contentSnippet":"今回はPythonで@をオペレータとして利用する方法を調べてみました。Python、特にNumPyを利用して行列を取り扱っていると、計算の時に@をオペレータとして使うことがしばしばあります。というか私はNumPy以外で@をオペレータとして使っていることをみたことはありませんでした。+や-など一般的なさん術オペレータはよく利用しますが@はどのようにすれば使えるようになるのかふと気になり調べてみました。 NumPyにおける@オペレータNumPyでは@は行列積を計算するためのオペレータとなっています。例えば以下にAとB二つの行列が会った時に、その積を計算できます。以下の例はBを単位行列に...","isoDate":"2025-10-15T13:52:08.000Z","dateMiliSeconds":1760536328000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"コマンド紹介シリーズ：chafa","link":"https://zenn.dev/akasan/articles/80f8931f8523cd","contentSnippet":"今回は久々のコマンド紹介シリーズです。第14回目の本日はchafaを紹介しようと思います。chafaを利用するとターミナル上で画像とかGIFを参照することができます。なお、第13回は以下になりますので、ぜひご興味があればご覧ください。https://zenn.dev/akasan/articles/6392d28e0e02f0 chafaとは？公式GitHubによると、Chafaは、アニメーションGIFなどの画像データを、端末での表示に適したグラフィック形式またはANSI/Unicode文字アートに変換するコマンドラインユーティリティです。幅広い機能をサポートしており、歴史...","isoDate":"2025-10-14T09:50:27.000Z","dateMiliSeconds":1760435427000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"GitHubで管理されているZennのtopicsを集計するコードをclaude codeに作らせた","link":"https://zenn.dev/akasan/articles/1cc5493f3e077a","contentSnippet":"今回はタイトル通り、GitHubでZennの記事を管理している場合に、どのようなtopicsがよく利用されているか集計するための機能をclaude codeに作らせてみました。私自身連続170記事以上出している関係で、どのような技術をよく利用しているか調べたくなり、作らせてみました。 ZennをGitHubで管理するためのフォルダ構成違いはあるかもしれませんが、基本的には以下のフォルダ構成で管理されていると思います。articles/  hogehoge.md  fugafuga.mdbooks/  ...images/  ...scrapes  ...今回はa...","isoDate":"2025-10-13T04:17:00.000Z","dateMiliSeconds":1760329020000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"OpenAI Agent Builderを使ってGuardrail実装してみた","link":"https://zenn.dev/akasan/articles/c1698aa0289828","contentSnippet":"今回は、現地時間10月6日にOpenAIが発表したAgent Builderという機能を早速使ってみました。Agent Builderを利用することで、GUIを利用してエージェントを作成することができるようになります。 Agent Builderとは？Agent BuilderはOpenAI DevDay 2025にて発表された新しいプロダクトとなっています。Agent Builderを利用すると、ドラッグアンドドロップでロジックを構成し、ツールを接続やカスタムガードレールを構成するためのキャンバスを利用できます。また、プレビューの実行、インラインのeval設定、完全なバージョニン...","isoDate":"2025-10-12T04:19:21.000Z","dateMiliSeconds":1760242761000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"agnoのGuardrail機能を試してみた","link":"https://zenn.dev/akasan/articles/48cea67449be64","contentSnippet":"今回は昨日に引き続きagnoを利用してみました。agnoではGuardrailの機能について提供しており、そのサンプルを通して挙動を確認してみようと思います。昨日のagnoの導入記事もぜひ合わせてご覧ください。https://zenn.dev/akasan/articles/80953b8e206dd0 早速使ってみる今回は以下のページを参考にサンプルを試してみます。https://docs.agno.com/concepts/agents/guardrails/overviewhttps://docs.agno.com/examples/concepts/agent/gua...","isoDate":"2025-10-11T03:09:11.000Z","dateMiliSeconds":1760152151000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"agnoを使ってOpenAIのエージェントを作成してみた","link":"https://zenn.dev/akasan/articles/80953b8e206dd0","contentSnippet":"今回はagnoのOpenAI連携機能を利用してエージェントを作ってみました。 agnoとは？agnoとはメモリや知識、ツールやリーズニングを実現するエージェントを実装するための軽量なフレームワークとなります。agnoを利用することで、推論エージェントやマルチモーダルエージェント、エージェントワークフローを構築できます。agnoはエージェントとチャットするための美しいUIやエージェントにサービスを提供する構築済みのFastAPIルート、そしてエージェントのパフォーマンスを監視・評価するためのツールも提供するとのことです。https://github.com/Akasan/agno...","isoDate":"2025-10-10T13:42:45.000Z","dateMiliSeconds":1760103765000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"短編: Vibe Codingについて個人的な考えを述べてみる","link":"https://zenn.dev/akasan/articles/0e4126fdb3660c","contentSnippet":"今回はVibe Codingについて個人的な考えをまとめてみようと思います。 まずは私の根本の考え方について!結論から話すと、私個人としては「便利なので基本的にはどんどん使いたい。（ただし条件付き）」と思っている派です。条件付きという含みを持たせているのはずるい気がしますが考えをまとめてみます。 Vibe Codingが必要だと思う時はどんな時？まずはVibe Codingを採用すべき時がどんな時かを考えてみます。 スピード感を重視する時みなさんご存知の通り、Vibe Codingは爆速でコーディングをすることができます。生成AIのコーディング速度は正直人間によるコーデ...","isoDate":"2025-10-09T13:54:37.000Z","dateMiliSeconds":1760018077000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"pydantic-settingsで実行環境から環境変数を読み込む方法","link":"https://zenn.dev/akasan/articles/3e60499f9b189a","contentSnippet":"今回は昨日に続いて、pydantic-settingsを利用して環境変数を取り扱おうと思います。昨日は.envファイルを読み込むように設定しましたが、今回はPython実行環境にすでに設定されている環境変数を読み込む方法を共有します。https://zenn.dev/akasan/articles/0a4136eb60030d 早速やってみる！先ほど書いたように、今回は.envから読み込むのではなく、実行環境にすでに登録されている環境変数を読み込もうと思います。 環境構築今回はuvで環境構築するとともに、シェルに環境変数を登録します。uv init pydantic_se...","isoDate":"2025-10-08T13:09:46.000Z","dateMiliSeconds":1759928986000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"pydantic-settingsで環境変数を読み込む方法","link":"https://zenn.dev/akasan/articles/0a4136eb60030d","contentSnippet":"今回はpydantic-settingsを用いて環境変数を読み込むと同時に、環境変数の値のバリデーションをしてみようと思います。 pydantic-settingsとは？pydantic-settingsは環境変数やシークレットファイルを読み込んで利用するための機能をpydanticから拡張したものになっています。通常Pythonで環境変数を読み込むときはosモジュールを利用することが多いかと思いますが、pydantic-settingsを利用するとpydanticに備わっているバリデーション機能などを利用することができるため、より安全に環境変数などを扱うことができます。http...","isoDate":"2025-10-07T14:10:35.000Z","dateMiliSeconds":1759846235000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"USDで作成したUSDファイルをMacbookのプレビューソフトで表示してみた","link":"https://zenn.dev/akasan/articles/6ba6e22863ab69","contentSnippet":"今回はUSD形式で作成したファイルをMacbookのプレビューソフトで開くことができることを紹介しようと思います。 USDとは？USDは3Dシーンを共同で構築するための高性能かつ拡張可能なソフトウェアプラットフォームであり、大規模な開発ニーズを満たせるように構築されています。USDではジオメトリを初めシェーディングやライティング、物理など様々な必須領域をカバーするように構築されています。USDはピクサーによって最初に開発されたものとなり、特にオープンソースを意識したものとしてOpenUSDが位置付けられているようです。https://openusd.org/release/ind...","isoDate":"2025-10-06T13:39:24.000Z","dateMiliSeconds":1759757964000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"mypy: type checker for python","link":"https://daisuke1024akagawa.medium.com/mypy-type-checker-for-python-0cafa6124ad6?source=rss-c54ac439ad2b------2","isoDate":"2025-07-09T12:51:38.000Z","dateMiliSeconds":1752065498000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-4","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-4-dd2561d21338?source=rss-c54ac439ad2b------2","isoDate":"2023-01-14T11:25:46.000Z","dateMiliSeconds":1673695546000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-3","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-3-fa8a830320d3?source=rss-c54ac439ad2b------2","isoDate":"2023-01-13T13:21:39.000Z","dateMiliSeconds":1673616099000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-2","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-2-59fc403b0fea?source=rss-c54ac439ad2b------2","isoDate":"2023-01-12T13:20:43.000Z","dateMiliSeconds":1673529643000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-1","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-1-3abeaf7e9399?source=rss-c54ac439ad2b------2","isoDate":"2023-01-11T13:35:26.000Z","dateMiliSeconds":1673444126000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Python Experiment: For VS Comprehension 1","link":"https://daisuke1024akagawa.medium.com/python-experiment-for-vs-comprehension-1-28868928fe8d?source=rss-c54ac439ad2b------2","isoDate":"2022-05-26T14:21:48.000Z","dateMiliSeconds":1653574908000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Isn’t it troublesome to set the log file in python? Use LoggerGenerator","link":"https://daisuke1024akagawa.medium.com/isnt-it-troublesome-to-set-the-log-file-in-python-use-loggergenerator-8e6483843bd3?source=rss-c54ac439ad2b------2","isoDate":"2021-06-30T06:06:24.000Z","dateMiliSeconds":1625033184000,"authorName":"Daisuke Akagawa","authorId":"akagawa"}]},"__N_SSG":true}