{"pageProps":{"member":{"id":"akagawa","name":"Daisuke Akagawa","avatarSrc":"/avatars/akagawa.png","role":"Full Stack Engineer","bio":"Akasan","sources":["https://zenn.dev/akasan/feed","https://medium.com/feed/@daisuke1024akagawa"],"githubUsername":"Akasan","twitterUsername":"","websiteUrl":""},"postItems":[{"title":"Kubeflow Pipelinesで条件分岐をする方法","link":"https://zenn.dev/akasan/articles/3d8bad30009c85","contentSnippet":"今回はKubeflow Pipelinesで条件分岐を利用する方法について調べてみたので共有したいと思います。 早速やってみる今回はKubeflowが提供している公式ドキュメントを元にしています。構成としては、まずはローカルでKubeflow Piprlines（以下、kfp）を用いてパイプラインを実装し、パイプラインファイルをCloud Storageにアップロードした上でVertex AI Pipelinesから起動します。https://www.kubeflow.org/docs/components/pipelines/user-guides/core-functions...","isoDate":"2025-09-23T09:38:03.000Z","dateMiliSeconds":1758620283000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Vertex AI Pipelinesを利用してエンドポイントをデプロイした","link":"https://zenn.dev/akasan/articles/093e1d1d3ec445","contentSnippet":"今回はVertex AI Pipelinesを利用してモデルを開発してエンドポイントにデプロイするためのチュートリアルを実施しました。Google Cloudがオフィシャルで提供しているノートブックがあり、それを利用してデプロイするための方法を解説しようと思います。なお、Pipeline構成コードはサンプルに則って進めますが、インフラ構成についてはTerraformで作成します。https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/pipelines/google_cl...","isoDate":"2025-09-22T11:20:35.000Z","dateMiliSeconds":1758540035000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"claude codeにtesseract書かせてみた","link":"https://zenn.dev/akasan/articles/8ac71d6cc3057a","contentSnippet":"今回はclaude codeに作らせたシリーズの続編です。前回は3次元のフラクタル図形を書かせてみましたが、今回はtesseractを書かせてみました。https://zenn.dev/akasan/articles/f90c2940cf1ef3 tesseractとは？Wikipediaによると、正八胞体（せいはちほうたい、または四次元超立方体、英語: 8-cell、オクタコロン〈英: octachoron〉、テッセラクト〈英: tesseract、テセラクトとも〉）とは、四次元正多胞体の一種で8個の立方体からなる、四次元の超立方体である。とのことです。自分の認識では4...","isoDate":"2025-09-21T11:09:13.000Z","dateMiliSeconds":1758452953000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"モジュールを意識したTerraform構成でColabのテンプレートを作成してみた","link":"https://zenn.dev/akasan/articles/9c48ed7e2457a6","contentSnippet":"今回は、昨日公開したColab Enterpriseのテンプレート作成のTerraformをモジュールを意識した構成で実装してみます。今までの記事ではルートディレクトリだけでmain.tfやvariables.tfを管理していましたが、実際に利用するときはモジュールを意識した構成が必要になるので、今回からその構成を意識して実装します。https://zenn.dev/akasan/articles/2966eb1a9f9a38 ディレクトリ構成今回は以下の構成でディレクトリを編成しました。main.tfvariables.tfmodules/  colab-templat...","isoDate":"2025-09-20T09:15:40.000Z","dateMiliSeconds":1758359740000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Colab EnterpriseのランタイムテンプレートをTerraformで作る方法について","link":"https://zenn.dev/akasan/articles/2966eb1a9f9a38","contentSnippet":"今回はVertex AIのColab EnterpriseのランタイムテンプレートをTerraformで記述してみました。以前コンソールからランタイムテンプレートを作ったことはありましたが、今回はその設定をTerraformで再現してみようと思います。以前の該当記事は以下になるので、ぜひ合わせてご覧ください。https://zenn.dev/akasan/articles/454f57beb383e9Google CloudでTerraformを試してみた系は以下のスクラップにまとめていますので合わせてご覧ください！https://zenn.dev/akasan/scraps/c6...","isoDate":"2025-09-19T04:12:08.000Z","dateMiliSeconds":1758255128000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Vertex AI Feature Storeの機能グループをTerraformで作る方法について","link":"https://zenn.dev/akasan/articles/3954f50f913bae","contentSnippet":"今回はVertex AIのFeature Storeの機能グループをTerraformから作成する方法について調べてみました。機能グループを利用するにはバックエンドとなるBigQueryデータセットの作成が必要であり、これら二つのリソースの作成をしてみます。Google CloudでTerraformを試してみた系は以下のスクラップにまとめていますので合わせてご覧ください！https://zenn.dev/akasan/scraps/c6182a7d763bc8 早速作ってみる！今回作成する機能グループについて、リソース定義は以下をベースに実施します。https://regi...","isoDate":"2025-09-18T04:55:06.000Z","dateMiliSeconds":1758171306000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Google CloudのサービスアカウントをTerraformで作る方法について","link":"https://zenn.dev/akasan/articles/b07c3ffab7f2ec","contentSnippet":"今回は、Google CloudのサービスアカウントをTerraformから作成する方法について調べてみました。最近K8sに加えてTerraformの学習もどんどん進めており、その勉強として今回はサービスアカウントを取り扱ってみます。Google CloudでTerraformを試してみた系は以下のスクラップにまとめていますので合わせてご覧ください！https://zenn.dev/akasan/scraps/c6182a7d763bc8 早速やってみる！ 変数の作成まずはGoogle CloudのプロジェクトIDやリージョンを設定するためにvariables.tfを以下の...","isoDate":"2025-09-17T13:32:45.000Z","dateMiliSeconds":1758115965000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Google CloudのModel ArmorのテンプレートをTerraformで記述してみた","link":"https://zenn.dev/akasan/articles/314b22ced3c9c1","contentSnippet":"今回はGoogle CloudのSecurity Command Centerで提供されているModel Armorについて、Terraformを利用してテンプレートを作成してみました。なお、内容については前回コンソール画面上で作成した設定を再現する形で実装してみます。https://zenn.dev/akasan/articles/7ce40551040ccc 早速実装してみる Model Armorのリソースについて今回は以下のgoogle_model_armor_templateを利用してModel Armorのテンプレートを実装します。https://registr...","isoDate":"2025-09-16T13:11:02.000Z","dateMiliSeconds":1758028262000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Rayシリーズ：Ray Coreを利用したバッチ予測例の検証","link":"https://zenn.dev/akasan/articles/e1501d2852e602","contentSnippet":"今回はRay Coreの例として提供されているバッチ予測のサンプルを通して、バッチ予測の実装方法をみていきたいと思います。Rayに関するシリーズは以下でまとめていますのでぜひご覧ください。https://zenn.dev/akasan/scraps/73a90764c065d1 早速例を試してみる今回は以下の例を試してみます。この例では、バッチで取得したデータを対象として、どのように推論を行うかを試す例となっております。https://docs.ray.io/en/latest/ray-core/examples/batch_prediction.html 環境構築uvを...","isoDate":"2025-09-15T04:46:41.000Z","dateMiliSeconds":1757911601000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"GoogleのセキュアAIフレームワークについて","link":"https://zenn.dev/akasan/articles/2b9291950d99ef","contentSnippet":"今回はGoogleが提唱するセキュアAIフレームワークについて調べてみました。さまざまなAIが導入されている昨今、よりセキュアにAIシステムを運用できることが求められています。AIを案件で取り扱っている立場でもあるので、このフレームワークについて調べてみました。 セキュアAIフレームワークとは？Googleが提唱するセキュアAIフレームワーク（以下、SAIF）は、責任を持ってAIを開発し導入するための高いセキュリティ基準が求めらている状況に対して、システムをより安全に保護するための概念的なフレームワークとして提唱されました。https://safety.google/intl/j...","isoDate":"2025-09-14T04:16:27.000Z","dateMiliSeconds":1757823387000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Google Cloud 認定資格奮闘記 ~Professional Machine Learning Engineer編~","link":"https://zenn.dev/akasan/articles/062b9d9e44922a","contentSnippet":"今回はGoogle Cloud認定資格の一つであるProfessional Machine Learning Engineer(以下、PMLE)を受験したのでその体験記になります。前回取得した資格についても記事にしているのでぜひご覧ください。https://zenn.dev/akasan/articles/c0d347a37065bc Professional Machine Learning EngineerについてPMLEはGoogle Cloudの認定資格の一つであり、特に機械学習に関するサービスおよびその取り扱い、実務への応用などについて問われる資格となります。PMLEで...","isoDate":"2025-09-13T05:17:04.000Z","dateMiliSeconds":1757740624000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"claude codeに3次元のフラクタル図形書かせてみた","link":"https://zenn.dev/akasan/articles/f90c2940cf1ef3","contentSnippet":"昨日は2次元のフラクタル図形をClaude Codeに作成させましたが、今回は3Dのフラクタル図形を作成させてみました。ぜひ昨日の記事もご覧ください。https://zenn.dev/akasan/articles/91d41376641ffc 早速やってみるまずは環境構築をします。uv init fractal_3d -p 3.12cd fractal_3duv add matplotlib numpy pillow今回claude codeに与えた指示は以下になります。pythonを使って、3次元のフラクタル図形を段階的に生成してアニメーションとして保存するコード...","isoDate":"2025-09-12T14:07:09.000Z","dateMiliSeconds":1757686029000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"claude codeにフラクタル図形書かせてみた","link":"https://zenn.dev/akasan/articles/91d41376641ffc","contentSnippet":"今回はclaude codeを使ってフラクタル図形を作らせてみました。claude codeをはじめ生成AIはどこまでできる能力があるのかを測るためのシリーズになります。前回は立方体をターミナルでぐるぐる回すものをやりましたが、それの第二弾ですね。https://zenn.dev/akasan/articles/11fed840eedaa7※ バタバタしていて、コードの解説まではできません。次回以降行けるタイミングでさせてもらいます フラクタル図形とは？Wikipediaによると図形の部分と全体が自己相似（再帰）になっているものなどをいうということです。あるAから一部B...","isoDate":"2025-09-11T13:37:44.000Z","dateMiliSeconds":1757597864000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Mist.ioとはなんなのか？","link":"https://zenn.dev/akasan/articles/573fa3dfa4911e","contentSnippet":"今回からついに始まりました、CNCFルーレットのお時間です。記念すべき第一弾はMist.ioとなりました。CNCFルーレットについては以下の記事で紹介していますのでぜひご覧ください。https://zenn.dev/akasan/articles/42f5a1d2786ca5https://zenn.dev/akasan/articles/ef9e2919c312c1 Mist.ioとは？Mistはオープンソースのマルチクラウド管理プラットフォームとのことです。Mistでは以下を実現することで、マルチクラウドの取り扱いをしているようです。Self-service: アクセス...","isoDate":"2025-09-10T11:00:24.000Z","dateMiliSeconds":1757502024000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Rayシリーズ：リモート関数戻り値の返し方のアンチパターンについて","link":"https://zenn.dev/akasan/articles/b74692f78ca720","contentSnippet":"今回はRayでリモート関数を利用するにあたり、その戻り値としてアンチパターンとされているものを紹介しようと思います。情報源は以下になります。https://docs.ray.io/en/latest/ray-core/patterns/return-ray-put.html 単一の値を返す場合リモート関数から値が返される場合、その値が大きいのか小さいかに関わらず、その値を直接returnするのがいいとのことです。アンチパターンとしては、ray.put()を利用して参照を作成して返すことみたいです。これがなぜかというと、リモート関数の戻り値は自動的にオブジェクトストアに登録されて参...","isoDate":"2025-09-09T10:25:02.000Z","dateMiliSeconds":1757413502000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Rayシリーズ：Objects","link":"https://zenn.dev/akasan/articles/161ab7bdf08c6b","contentSnippet":"今回はRayのコア機能であるObjectsについて調べてみました。シリーズについては以下のスクラップにまとめていますのでぜひご参考にしてください。https://zenn.dev/akasan/scraps/73a90764c065d1 Ray Objectsとは？過去の記事で見てきたように、RayにおいてはTaskとActorはオブジェクトを作成して計算されます。Rayではクラスタ内のどこにでもこれらの情報を格納でき、これらのことをリモートオブジェクトと呼び、それらを参照するためにオブジェクト参照を使用します。リモートオブジェクトはRayの分散共有メモリ上のオブジェクトストアに...","isoDate":"2025-09-08T11:39:34.000Z","dateMiliSeconds":1757331574000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Rayシリーズ：Actorsの種類について","link":"https://zenn.dev/akasan/articles/33a8a373fdd1a8","contentSnippet":"今回は前回紹介したActorsについて、どのような種類があるかを解説しようと思います。https://zenn.dev/akasan/articles/4e84d3dbb03abe Named ActorsこちらはActorsの種類というより、Namespaceの概念を用いてActorsを取得するための機能になります。Actorsのインスタンスを作成した後にNamespaceに登録することで、その名前を参照して別の場所からActorsを利用することができます。公式サンプルを添付すると、以下のようなコードになります。import ray@ray.remoteclass Co...","isoDate":"2025-09-07T03:41:31.000Z","dateMiliSeconds":1757216491000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Google CloudのModel Armorを利用してプロンプトのサニタイズをしてみた","link":"https://zenn.dev/akasan/articles/7ce40551040ccc","contentSnippet":"今回はGoogle CloudのSecurity Command Centerで提供されているModel Armorを利用してみます。プロンプトやLLMのレスポンスなどをサニタイズするために利用することができ、安全にLLMを利用するための要素の一つとして重要な機能になります。※ プロンプトの検知を実験するためにプロンプトを指定していますが、本来は指定されるべきではない内容を含みますので、検証はご注意下さい Model Armorとは？先ほどもあげたように、Model ArmorはGoogle CloudのSecurity Command Centerで提供されている機能であり、L...","isoDate":"2025-09-06T09:26:26.000Z","dateMiliSeconds":1757150786000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"ZenMLシリーズ：Hello Worldを試してみた","link":"https://zenn.dev/akasan/articles/3f62b9d24622e6","contentSnippet":"今回はZenMLを使って一番シンプルなワークフローを作成してみました。 ZenMLとは？ZenMLはMLOpsとLLMOpsのプラクティスを活用して、大規模なAIアプリケーションを評価、監視、展開するためのツールになります。昨今生成AIが多用される中で、LLM O11yのじゅ硫黄は高まってきており、かつ入出力の管理だけでなくワークフローの管理も重要な課題となっています。ZenMLを利用すると、特にMLOpsやLLMOpsに特化したワークフロー管理をすることができ、決定木から複雑なマルチエージェントシステムまで、AIポートフォリオ全体を開発、評価、展開するための単一のプラットフォー...","isoDate":"2025-09-05T13:48:15.000Z","dateMiliSeconds":1757080095000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"短編：自己管理が苦手な私が自己管理をなんとかしている方法","link":"https://zenn.dev/akasan/articles/79b4de3b23fbb6","contentSnippet":"今回は自己管理が苦手な私が以下にして最近自己管理しようともがいているか、その方法をまとめてみました。なお、書いていて思いましたが、ここに書いているものは全て気合いの上で成り立っているので、私は気合いで人生乗り切っていると改めて感じましたw。 出張で時間がないので超短編です（記事のストックがないため毎日書いていますw） 習慣づける習慣づけが苦手なのでそれを特に頑張っています。このテックブログはこの記事で140日連続続いているのですが、これが一番の効果があると思います。元々は三日坊主癖が強かったのですが、決めたことをとにかく貫き通すということで、現在頑張っています。 カレンダー...","isoDate":"2025-09-04T13:18:33.000Z","dateMiliSeconds":1756991913000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"mypy: type checker for python","link":"https://daisuke1024akagawa.medium.com/mypy-type-checker-for-python-0cafa6124ad6?source=rss-c54ac439ad2b------2","isoDate":"2025-07-09T12:51:38.000Z","dateMiliSeconds":1752065498000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-4","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-4-dd2561d21338?source=rss-c54ac439ad2b------2","isoDate":"2023-01-14T11:25:46.000Z","dateMiliSeconds":1673695546000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-3","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-3-fa8a830320d3?source=rss-c54ac439ad2b------2","isoDate":"2023-01-13T13:21:39.000Z","dateMiliSeconds":1673616099000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-2","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-2-59fc403b0fea?source=rss-c54ac439ad2b------2","isoDate":"2023-01-12T13:20:43.000Z","dateMiliSeconds":1673529643000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"The Diary of fighting with COVID-19? Day-1","link":"https://daisuke1024akagawa.medium.com/the-diary-of-fighting-with-covid-19-day-1-3abeaf7e9399?source=rss-c54ac439ad2b------2","isoDate":"2023-01-11T13:35:26.000Z","dateMiliSeconds":1673444126000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Python Experiment: For VS Comprehension 1","link":"https://daisuke1024akagawa.medium.com/python-experiment-for-vs-comprehension-1-28868928fe8d?source=rss-c54ac439ad2b------2","isoDate":"2022-05-26T14:21:48.000Z","dateMiliSeconds":1653574908000,"authorName":"Daisuke Akagawa","authorId":"akagawa"},{"title":"Isn’t it troublesome to set the log file in python? Use LoggerGenerator","link":"https://daisuke1024akagawa.medium.com/isnt-it-troublesome-to-set-the-log-file-in-python-use-loggergenerator-8e6483843bd3?source=rss-c54ac439ad2b------2","isoDate":"2021-06-30T06:06:24.000Z","dateMiliSeconds":1625033184000,"authorName":"Daisuke Akagawa","authorId":"akagawa"}]},"__N_SSG":true}