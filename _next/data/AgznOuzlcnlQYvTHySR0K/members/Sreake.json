{"pageProps":{"member":{"id":"Sreake","name":"Sreake","role":"","bio":"This Is The Sreake Section Blog.","avatarSrc":"/avatars/sreake.png","sources":["https://sreake.com/feed/"],"includeUrlRegex":"blog","excludeUrlRegex":"event","twitterUsername":"SreakeJ","githubUsername":"","websiteUrl":"https://sreake.com"},"postItems":[{"title":"[3-shake 秋季インターンブログ] eBPF によるコンテナセキュリティツールの Tetragon を検証してみた","contentSnippet":"Sreake事業部で2022年10月11日 ~ 24日に開催された短期インターンに参加しました。eBPF によるコンテナランタイムセキュリティツールの Tetragon の技術検証と運用方法の提案を行いました。以下では、その成果をまとめたいと思います。The post [3-shake 秋季インターンブログ] eBPF によるコンテナセキュリティツールの Tetragon を検証してみた first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/ebpf-tetragon/","isoDate":"2022-11-14T00:00:00.000Z","dateMiliSeconds":1668384000000,"authorName":"Sreake","authorId":"Sreake"},{"title":"[3-shake 秋季インターンブログ] Config Connectorの検証","contentSnippet":"SRE技術の調査と研究を行う目的で2022年10月11日 ~ 24日に開催された短期インターンに参加しました。2週間という期間を使って、Google CloudのConfig Connectorについて調査を行ったので、本記事ではその調査結果をまとめます。The post [3-shake 秋季インターンブログ] Config Connectorの検証 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/config-connectortest/","isoDate":"2022-11-09T03:02:42.000Z","dateMiliSeconds":1667962962000,"authorName":"Sreake","authorId":"Sreake"},{"title":"[3-shake 秋季インターンブログ] Trivy Operator を用いた脆弱性管理の提案","contentSnippet":"Sreake 事業部は SRE関連技術に強みを持つエンジニアによるコンサルテーションサービスを提供する事業部であり、私たちも SRE 技術の調査と研究を行う目的で2022年10月11日 ~ 24日に開催された短期インターンに参加しました。2週間という期間を使って、Trivy Operator の技術検証と運用方法の提案を行いました。本記事では、その成果をまとめたいと思います。The post [3-shake 秋季インターンブログ] Trivy Operator を用いた脆弱性管理の提案 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/trivy_operator_vulnerability/","isoDate":"2022-11-07T07:04:20.000Z","dateMiliSeconds":1667804660000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Google Cloud Binary Authorization 徹底調査","contentSnippet":"Binary Authorization とは 概要 コンテナベースのアプリケーションに ソフトウェアサプライチェーンのセキュリティを提供する Google Cloud のサービスです。 補足 ソフトウェアサプライチェーンとはアプリケーションやサービス・プロダクトを作成する場合、コードや設定ファイル、ライブラリ、プラグイン、コンテナの依存関係等その他諸々（人、内製、委託 etc）が組み合わさって構成されることの総称です。参考：ソフトウェアサプライチェーンの概要と、そのセキュリティを確保する方法 (Circle CI) ソフトウェアサプライチェーン攻撃とはソフトウェアチェーンに悪意のあるコードを組み込む攻撃です。一例として、Event Stream での事例を挙げます。JavaScript のパッケージである Event Stream は OSS がメンテナンスされなくなりユーザーが好意でメンテし始めたことにより、悪意はなかったが、バックドアを作成できる悪意のあるパッケージを利用してしまい、それが 800万回ほどダウンロードされ利用される、ということがありました。参考①：ソフトウェアサプライチェーン攻撃の事例分析と対策 (TERILOGY WORK)参考②：A post-mortem of the malicious event-stream backdoor (snyk) 目的 信頼できるコンテナイメージのみをデプロイしたい アプローチ 基本機能 パイプライン (Cloud Build)コンテナイメージのビルドが終わったタイミングで証明書を作成します。 コンテナ基盤Binary Authorization のポリシーに基づいて、証明書を検証します。 +α パイプライン (Cloud Build)コンテナイメージのビルドが終わり コンテナイメージスキャン (ContainerAnalysis) の結果をもとに、証明書を作成します。「脆弱性の検証」と「証明書の作成」は、grafeas/kritis というツールが担っていて Shopify/voucher というのも同じことをやってくれるそうです。 コンテナ基盤先と同様です。 仕組みを整理 […]The post Google Cloud Binary Authorization 徹底調査 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/google-cloud-binary-authorization/","isoDate":"2022-10-27T00:46:10.000Z","dateMiliSeconds":1666831570000,"authorName":"Sreake","authorId":"Sreake"},{"title":"PodSecurityPolicy について考えてみた","contentSnippet":"話すこと 案件で Kubernetes のセキュリティについて調べることがあったので、各レイヤで何が必要かを検討しました。 Node レイヤ・Inspector・(falco) Pod レイヤ・(falco)・セキュリティポリシー Network レイヤ・Egress Security その中で今回は、Pod のセキュリティポリシーについてお話していきたいと思います。 前提(話さないこと) コンテナイメージが CI 上で脆弱性対策されていること。（例えば https://github.com/aquasecurity/trivy など） 検討したこと Security Policyクラスタでどうやって Pod セキュリティを合わせるかPolicy-as-Code（以下、PaC） ツールの比較 SecurityContextPaC ツールを利用した上でルールをどうするか 振る舞い検知対策した上で実際になにか起きた場合、どうやって検知するか PaC の比較 対象にしたものは、下記の３つで今回の比較の結果 Kyverno を採用したいと考えました。 OPA/Gatekeeper PodSecurityAdmission（以下、PSA） Kyverno 期待することは下記の通りです。 Pod Security Standards（以下、PSS） に則り、導入/運用しやすいこと 追加でポリシーをできること Kubernetes のコミュニティ(https://github.com/kubernetes/community/blob/master/sig-auth/README.md)によって推奨されている、Podの設定になります。PSSは種別ごとに用意されており、必要に応じて使い分ける必要があります。 # 特権 - 制限のかかっていないポリシーで、可能な限り幅広い権限を提供します。このポリシーは既知の特権昇格を認めます。特権ポリシーは意図的に開放されていて、完全に制限がかけられていません。この種のポリシーは通常、特権ユーザーまたは信頼されたユーザーが管理する、システムまたはインフラレベルのワークロードに対して適用されることを意図しています。特権ポリシーは制限がないことと定義されます。gatekeeperのようにデフォルトで許可される仕組みでは、特権プロファイルはポリシーを設定せず、何も制限を適用しないことにあたります。 一方で、Pod Security Policyのようにデフォルトで拒否される仕組みでは、特権ポリシーでは全ての制限を無効化してコントロールできるようにする必要があります。 # ベースライン、デフォルト - 制限は最小限にされたポリシーですが、既知の特権昇格を防止します。デフォルト（最小の指定）のPod設定を許容します。ベースライン、デフォルトのプロファイルは一般的なコンテナ化されたランタイムに適用しやすく、かつ既知の特権昇格を防ぐことを意図しています。 […]The post PodSecurityPolicy について考えてみた first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/pod-security-policy/","isoDate":"2022-10-24T02:15:18.000Z","dateMiliSeconds":1666577718000,"authorName":"Sreake","authorId":"Sreake"},{"title":"CDK for Terraform を理解する","contentSnippet":"はじめに 基本的な使い方をまとめてみました。 CDK for Terraform Is Now Generally Available 今回は TypeScript を使っている前提で記述するため、他の言語を利用する場合は適宜読み替えてください。 CDK for Terraform とは CDK for Terraform | Terraform by HashiCorp CDK for Terraform を使うと使い慣れたプログラミング言語を使ってインフラの定義やプロビジョニングを行うことができます。 これにより HCL を学ぶことなく Terraform エコシステム全体にアクセスでき、またテストや依存関係管理などの既存のツールチェインの力を活用することができます。 CDK for Terraform では 2022年08月29日現在、次の言語をサポートしています。 TypeScript Python Java C# Go 言語によっては実験的な新機能が利用できない場合もあります。 ( CDK for Terraform 自身が TypeScript で作られているからか、 TypeScript のサポートが一番手厚い印象を受けました。 ) CDK for […]The post CDK for Terraform を理解する first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/cdk-for-terraform/","isoDate":"2022-10-06T02:27:54.000Z","dateMiliSeconds":1665023274000,"authorName":"Sreake","authorId":"Sreake"},{"title":"CPU Resource limit に思いを馳せてみた","contentSnippet":"本日お伝えしたいこと あらゆるものが抽象化・仮想化されても、CPU やメモリの仕組みやプロトコルの性質などの計算機における基礎知識は持っておかないと調査がうまくいかない場面がある、ということです。具体的なエピソードを交えて、お伝えしていこうと思います。 事の経緯 EKS バージョンアップ (1.20→1.21) 検証中の出来事 バージョンアップ後に、EKS 上で稼働するアプリで readness probe, liveness probe がタイムアウトで頻繁に落ち、pod が立ち上がらなくなる事象が起きました。レスポンスタイムにして 400ms → 1000ms ぐらいまでパフォーマンス低下が発生→ タイムアウト1秒に頻繁に引っかかるようになり、色々試したところ CPU の Resource limit を修正することで、大幅改善しました。 CPU についてざっくりとおさらい 引用元: https://milestone-of-se.nesuke.com/sv-basic/architecture/cpu/ コアは同時に複数の処理を実行することができない でもマルチスレッドで並列処理できるんでしょ？→ 並列処理に見えるだけで実態は並行処理で、高速で処理するスレッドを切り替えて疑似的に並列処理にしています。 Resource limit (CPU) の設定について Kubernetes の公式ではこう記されていました。 CPU リソースの制限と要求は、cpu単位で測定されます。 Kuberenetes における1つの CPU は、クラウドプロバイダーの 1 vCPU/コア およびベアメタルのインテルプロセッサーの 1 ハイパースレッドに相当します。要求を少数で指定することもできます。 spec.containers[].resources.requests.cpu が 0.5 のコンテナは、1CPU を要求するコンテナの半分の CPU […]The post CPU Resource limit に思いを馳せてみた first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/cpu-resource-limit/","isoDate":"2022-09-27T08:03:06.000Z","dateMiliSeconds":1664265786000,"authorName":"Sreake","authorId":"Sreake"},{"title":"トイルを撲滅するための3つのステップ","contentSnippet":"トイルを削減できなければ、前向きな作業にかけられる時間が減るだけでなく、作業員の士気の減退やスキルアップの機会の減少などのデメリットがあります。The post トイルを撲滅するための3つのステップ first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/toil-eradication-3step/","isoDate":"2022-09-14T09:34:07.000Z","dateMiliSeconds":1663148047000,"authorName":"Sreake","authorId":"Sreake"},{"title":"負荷テストツール K6 について調べてみた","contentSnippet":"はじめに K6 を初めて触ってから 7-8ヶ月くらいたったので、K6 のツール周りに関する情報紹介で社内で発信した情報をまとめてみました。 k6 jslib まず、K6 には k6 jslib という K6 の拡張ツール等があります。 https://jslib.k6.io/ NAME VERSION(S) DOCS k6-utils 1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0 https://k6.io/docs/javascript-api/jslib/utils k6-summary 0.0.1 jsonpath 1.0.2 https://github.com/grafana/k6-jslib-JSONPath formdata 0.0.1, 0.0.2 form-urlencoded 3.0.0 papaparse 5.1.1 https://www.papaparse.com/docs ajv 6.12.5 https://ajv.js.org/api.html httpx 0.0.1, 0.0.2, 0.0.3, 0.0.4, 0.0.5, 0.0.6 https://k6.io/docs/javascript-api/jslib/httpx expect 0.0.4, 0.0.5 https://k6.io/docs/javascript-api/jslib/expect k6chaijs 4.3.4.0, 4.3.4.1 https://github.com/grafana/k6-jslib-k6chaijs k6chaijs-contracts 4.3.4.0 https://github.com/grafana/k6-jslib-k6chaijs-contracts url 1.0.0 kahwah 0.1.6 https://www.npmjs.com/package/kahwah aws 0.1.0, 0.3.0, 0.4.0 […]The post 負荷テストツール K6 について調べてみた first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/learn-about-k6/","isoDate":"2022-09-01T02:10:07.000Z","dateMiliSeconds":1661998207000,"authorName":"Sreake","authorId":"Sreake"},{"title":"疲弊しないSREチームを作るために必要な6つのポイント","contentSnippet":"本記事では、疲弊しないSREチームを作るために必要な6つのポイントを紹介します。SREチームをどのように形成すればよいか悩んでいる企業様は参考にしてください。The post 疲弊しないSREチームを作るために必要な6つのポイント first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/not-exhaustion-engineer/","isoDate":"2022-08-23T03:36:21.000Z","dateMiliSeconds":1661225781000,"authorName":"Sreake","authorId":"Sreake"},{"title":"リリースエンジニアリングについて理解する [デプロイ戦略]","contentSnippet":"サービスのリリースにかかるダウンタイムを減らし、安定稼働する戦略を取ることはユーザーからの満足度及び信頼度向上につながります。本記事では、SREの取り組みのひとつであるリリースエンジニアリング、そしてデプロイ戦略について解説していきます。The post リリースエンジニアリングについて理解する [デプロイ戦略] first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/release-engineer/","isoDate":"2022-08-23T03:00:00.000Z","dateMiliSeconds":1661223600000,"authorName":"Sreake","authorId":"Sreake"},{"title":"アンチパターンからSREを理解する","contentSnippet":"日本国内でも、サービスの信頼性向上のためにSREに取り組む企業も増えてきました。しかし誤ったやり方で実施したがゆえに、思ったように成果が出ないと嘆く企業もあるのではないでしょうか。 そこで今回はSREのアンチパターンをもとに、どのようにSREに取り組むのが良いのか考えていきます。SRE導入を検討している企業様は、ぜひ最後までお付き合いください。 SREにおける代表的なアンチパターン 看板を建て替えただけのSREの結成 SREがスピードバンプになっている SRE=火消し役になっている SLI,SLO,SLAの設定ミス ポストモーテム文化の欠落 改善フェーズの欠落 Googleが提唱するSREを理解する エンジニアリングへの継続的な注力 SLIを計測しSLOを設定する 運用の改善 SREの導入から運用支援は弊社3Shakeにお任せください！ SREにおける代表的なアンチパターン ここでは、SREを実施するうえで起こりがちなアンチパターンをいくつか紹介していきます。自社でSREを導入する際に同じ状況にならないよう、参考にしてみてください。 看板を建て替えただけのSREの結成 SREは表面だけ見れば、エンジニア集団とインフラ集団、運用集団をひとつにまとめ上げた集団であると言えるでしょう。しかし、それだけでSREを実施しているという事には当然なりません。SREは必要とされる人間の仲介を減らし、障害の発生頻度を抑えるためにシステムを構築し、信頼性の高いサービス運用を目指す組織ないし取り組みでなくてはなりません。 企業の方針として「SREを導入している」という事実だけにこだわるよりも、SREの基本を理解し、自社にあった取り組みを行うほうが良いのは当然のことでしょう。勢いで始めたSREのせいで「エンジニアが運用まで見るようになり、単純に負荷が増えた」「エンジニア本来の仕事に取り組む時間が無くなった」「何かに付けてSREのせいにされる」といった課題が出ないよう、組織構成含めSREのあり方について議論する必要があるでしょう。 SREがスピードバンプになっている SREの導入が、サービスのリリースやシステムの変更速度を遅らせるスピードバンプになってはいけません。SREはサービスの信頼性を高めるための取り組みであり、迅速で安定した稼働を実現するためのものであると言えます。 「SRE=安全に取り組む」と捉えてしまうと、慎重さを過剰に重視し、サービスの成長に歯止めをかけ、悪い方向に作用させてしまう可能性もあります。SREが成長を妨げる要因とならぬよう、リリースの優先順位やリソースの配分をうまくコントロールするために、適切なエラーバジェットを設定することも必要です。 SRE=火消し役になっている SREは、開発から運用まで全てを管理するチームであるため、社内的に「なんでも屋」や「火消し役」のような立場になってしまうことが多々あります。開発面でも運用面でもSREに任せておけば良い、何か問題があったらSREに依頼すれば良い、といった状態にならぬよう注意が必要です。 関係者全員にアラートが飛ぶ サービスが実運用に入ったら障害発生時には状況に応じてマネージャーや担当エンジニアにアラートを発報して対応を促す必要があります。しかし関係者全員にアラートが行き、全員が集合してしまうという事態も避けるべきです。多くのメンバーが招集されることで 意思決定や判断が遅くなる 他のオンコールに対して手薄になる 担当者の決定がされず「誰かやってくれる」という他責が発生する といったことが起こりうるため、限られたメンバーにだけ通知することも大切です。 PagerDutyなどのツールではエスカレーション機能を使うことで、段階的な通知も可能なため、上手く活用していくと良いでしょう。 関連記事：インシデント管理ツール「PagerDuty」とはなにか [特徴・機能・メリット] SLI,SLO,SLAの設定ミス SREを導入する際に、SLI、SLO、SLAの設定をすることも多いかと思います。SREにおけるSLOの失敗例として以下の例がよく取り上げられます。 「ITサービスの運用において、信頼性の目標を100%に限りなく近く設定してしまう」 そもそも前提として、障害が絶対に起きないシステムを構築することはできません。また、信頼性99.99%を99.999%にするためには膨大な工数がかかりますが、ユーザー体験としてはその 0.009% は微々たるもの（＝ほぼ違いを感じることがないもの）です。つまり、サービス運用において適切な可用性の設定を誤ると、結果に見合わない無駄な工数が増えてしまうという事になります。 計測可能なSLI（Service Level indicator）の設定、適切なSLO（Service Level Objective）の設定、ユーザーが納得できるSLA（Service Level Agreement）の設定をしっかり行う必要があります。しかしこれらの設定を適切に行うのは非常に難しいため、SREの知識がある人を採用する、もしくはSREの導入支援の会社に依頼すると良いでしょう。 ポストモーテム文化の欠落 SREを運用していくうえで重要な要素として、ポストモーテムが存在します。ポストモーテムは、起こってしまったインシデントをもとに、そこに至った原因や問題を追求し、再発させないための取り組みです。ポストモーテムが大切であるという事が分かっていたとしても以下のような点で、取り組むのが難しいと感じることも多いでしょう。 機械的な問題なのか人に依存する問題なのか追求しづらい 解決した問題に向き合う時間が無駄だと考えてしまう、目先の課題を優先してしまう 作成したポストモーテムの振り返りを行わず、なんとなく曖昧に作ってしまう 必要な情報や状況説明の記載がなく、実用的なポストモーテムが作成されていない 情報が展開されず、再発防止策としての意味をなしていない ポストモーテムが人を非難するためのものになってしまう 上記であげたように、ポストモーテムの文化を根付かせるのはとても難しく、メンバー全員で意識できていなければうまくいきません。ポストモーテムはすぐに効果が出るものではなく、中長期的に根付かせることで役立つという事を前提に根気強く進めていくことが必要です。 […]The post アンチパターンからSREを理解する first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/anti-pattern-sre/","isoDate":"2022-08-17T08:47:45.000Z","dateMiliSeconds":1660726065000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Terraform state の構成の提案","contentSnippet":"動機 単一の Terraform state でリソースを構築していると、徐々にリソース数が増加し、コードの見通しが悪くなったり plan 時間が長くなったりといった問題が発生します。 単一 state で運用していたが、肥大化してきた。・リソース量が多くて見通しが悪い。・plan にかなり時間がかかる。・多重度の違うリソース（例えば EKS クラスタ）をコピペして複製したくない。 そこで、モノリスに伴う問題を解消すべく state を適切な単位に分割する方法を考えます。 Terraform 構成に関する事例 Terraform state の構成は参考になる先行事例がいくつか存在します。 「それ、どこに出しても恥ずかしくないTerraformコードになってるか？」 「それ、どこに出しても恥ずかしくないTerraformコードになってるか？」 / Terraform AWS Best Practices まとまりごとにモジュール化し、各環境でインポートして単一 state を構成する考え方です。 結局はモノリスなので、plan 時間の増大は避けられない。 リソースにモジュールを使っていると、モジュール化することでネストが深くなる。 以下のようなディレクトリ構成で、環境ごとに state を作り、共通のモジュールを参照します。 『実践 Terraform』 実践Terraform　AWSにおけるシステム設計とベストプラクティス 『実践 Terraform』の第21章に構造化について書かれているが、具体的な実装例は書かれていません。これを実現したいと思います。 コンポーネント分割・安定度・ステートフル・影響範囲・組織のライフサイクル 依存関係の制御 本事例 無造作にコンポーネント分割していくと、state が増えた場合の運用が煩雑になるので、本事例では依存関係を一方向に制限することで見通しを良くし、運用をなるべくシンプルにすることを考えます。 アプローチ ソフトウェアの SOLID 原則のように、コンポーネントを一方向の依存関係にする。 ただし、SOLID 原則と違って、隣接コンポーネントを越えて依存してもよい。 上位コンポーネントで output […]The post Terraform state の構成の提案 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/terraform-state-structure/","isoDate":"2022-08-15T23:16:16.000Z","dateMiliSeconds":1660605376000,"authorName":"Sreake","authorId":"Sreake"},{"title":"【Codezine掲載】SREは運用チームだけの問題？ 開発者のメリットをGoogle×スリーシェイクがプラクティスとともに解説！","contentSnippet":"「デベロッパーの成長と課題解決に貢献するメディア」をコンセプトに情報発信を行うソフトウェア開発者向けWebメディア「Codezine」に、Srekae事業部部長手塚の対談記事が掲載されました。The post 【Codezine掲載】SREは運用チームだけの問題？ 開発者のメリットをGoogle×スリーシェイクがプラクティスとともに解説！ first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/codezine_sre_google/","isoDate":"2022-07-07T06:46:00.000Z","dateMiliSeconds":1657176360000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Datadogのログ管理コストをフィルター機能で削減をする","contentSnippet":"今回は、Datadogの料金体系に関するお話と、実際の案件で発生したコスト削減の対応を行ったお話をご紹介していきたいと思います。The post Datadogのログ管理コストをフィルター機能で削減をする first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/datadog_cost_filter/","isoDate":"2022-06-28T03:04:27.000Z","dateMiliSeconds":1656385467000,"authorName":"Sreake","authorId":"Sreake"},{"title":"S3にアーカイブしたDatadogのログを復元する","contentSnippet":"Datadogのログにまつわるお話を紹介させていただきます！今回はアーカイブされたログをDatadogで見たい場合どのように復元していくのかについてご紹介しますThe post S3にアーカイブしたDatadogのログを復元する first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/s3_datadog_log/","isoDate":"2022-06-28T03:04:23.000Z","dateMiliSeconds":1656385463000,"authorName":"Sreake","authorId":"Sreake"},{"title":"インフラコードのテストツール Terratest を触ってみた","contentSnippet":"Terratest の概要 公式HP: https://terratest.gruntwork.io/ Githubリポジトリ: https://github.com/gruntwork-io/terratest インフラコードに対してテストを書くオープンソースの Go ライブラリで、以下に対応しています。 Terraform Docker Packer kubernetes 開発元は Gruntwork です。 パッケージと概要 aws: AWS API を使った機能を提供・EC2 インスタンスの IP を取得・リージョンと VPC ID を指定して、含まれているサブネット情報を取得 collections: Slice や string に対してのいくつかの機能を提供・指定の Slice に指定の文字列が含まれているかどうかを確認 docker: docker コマンド、docker-compose コマンドを実行する機能を提供 files: ファイルやディレクトリに関する機能を提供・ファイルの存在確認・ディレクトリの存在確認 http-helper: http リクエストに関する機能を提供・http リクエストを送信・http サーバをローカルに構築 ssh: サーバに ssh する機能を提供・ssh 接続後にコマンド実行・scp でファイルのダウンロード packer: packer コマンドを実行する機能を提供 k8s: Kubernetes に関する機能を提供・Node […]The post インフラコードのテストツール Terratest を触ってみた first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/learn-about-terratest/","isoDate":"2022-06-27T00:43:53.000Z","dateMiliSeconds":1656290633000,"authorName":"Sreake","authorId":"Sreake"},{"title":"【Codezine掲載】システムの信頼性を高める、クラウドネイティブ実践のコツとは？ 青山真也氏×スリーシェイクが語る「これまで」と「これから」","contentSnippet":"「デベロッパーの成長と課題解決に貢献するメディア」をコンセプトに情報発信を行うソフトウェア開発者向けWebメディア「Codezine」に、Srekae事業部部長手塚の対談記事が掲載されました。The post 【Codezine掲載】システムの信頼性を高める、クラウドネイティブ実践のコツとは？ 青山真也氏×スリーシェイクが語る「これまで」と「これから」 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/codezine_cloudnative/","isoDate":"2022-06-03T06:31:00.000Z","dateMiliSeconds":1654237860000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Karpenter について調べてみた","contentSnippet":"2021年の re:invent にて GA となったことが発表された、Karpenter について調べてみたのでその共有となります。 公式HP: https://karpenter.sh/ リポジトリ: https://github.com/aws/karpenter Karpenter とは AWS がホストしているオープンソースのクラスターオートスケーラーです。目的は Cluster Autoscaler と同様で、Kubernetes のノードが足りなくなったら足して、不要になったら削除するというのを実現します。 現状 AWS のみサポートされていますが、他のクラウドプロバイダーでも動くように設計されているようです。 Karpenter の特徴 https://karpenter.sh/v0.6.4/concepts/ 高速なプロビジョニング Karpenter は起動したノードに pod をバインドします。そのため、kube-scheduler によるノードの選定などを待たずに高速で pod を起動することができます。 柔軟なリソース選択 スケジュールできない pod 全体でどれだけリソースが必要なのかを計算した上で、最適なインスタンスタイプを選択してくれます。 またこれを実現するために、Auto Scaling Group のようなノードグループを使わず、Karpenter によって起動されたノードは直接管理されます。 機能について https://karpenter.sh/v0.6.4/provisioner/ Karpenter では、Provisioner を使って振る舞いを設定していきます。 Provisionerで設定できることは以下のようなことです。 選択できるインスタンスタイプ、Availability Zone、スポット/オンデマンドなどの制限 プロビジョニングするノードへの taints の付与 ノードの TTL の設定１．指定秒数を経過した場合、ノードを終了します２．ノードから […]The post Karpenter について調べてみた first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/learn-about-karpenter/","isoDate":"2022-05-30T01:38:25.000Z","dateMiliSeconds":1653874705000,"authorName":"Sreake","authorId":"Sreake"},{"title":"istio-proxy 停止時の挙動","contentSnippet":"istio の sidecar である pilot-agent, envoy が Pod の終了時にどう振る舞うのかをまとめてみました。 デフォルトの istio-proxy Pod Delete されたタイミングで各コンテナに SIGTERM が送られる アプリコンテナが SIGTERM を受け取った場合の挙動は実装依存 istio-proxy は Envoy を graceful drain モードにした上で terminationDrainDuration (default 5s) 待って終了する Envoy は graceful drain 中も新規接続を受け付け、HTTP/1.1 では Response のヘッダーに Connection: close をセットしてくれたり HTTP2 では GOAWAY を返してくれたりする アプリコンテナの終了よりも先に istio-proxy (Envoy) が終了してしまうと、クライアント↔︎アプリ間やアプリ↔︎DB間との通信も切断されてしまう Graceful drain 時間は terminationDrainDuration (default 5s) […]The post istio-proxy 停止時の挙動 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/istio-proxy-stop-behavior/","isoDate":"2022-05-26T00:17:32.000Z","dateMiliSeconds":1653524252000,"authorName":"Sreake","authorId":"Sreake"},{"title":"リモートワークのナレッジ","contentSnippet":"ここ最近リモートワークですが、辛くないですか？とか、〜なときどうしているんですか？みたいなことを複数件聞かれたりしています。自宅で仕事をするようになって2年と半年ぐらいになった男の意識していることや環境のことを共有してみたいと思います。 ありきたりなことばかりなのですがご了承ください。 ※あくまで1人暮らし前提なので、ご家族の方や同居人の方がいらっしゃると話は別だと思います よく聞かれること Q: 自宅だと気が散って集中できなくない？ A: 専用の部屋を作って、仕事モードのトリガーを決めています。 自分は コーヒー点てる 仕事用のスリッパを履く 椅子に座ってブランケットをかける Q: 人と喋りたくならない？ A: なります！お昼とかに行く喫茶店とか惣菜屋さんで店員さんとおしゃべりしているので結構喋っています。ご近所付き合い大事。 何よりみなさんハドルとかでお話ししてくださるのでモチベ維持や情報共有で助かっております。ありがとうございます。 Q: 電気代とか高くない？ A: 出社するよりは高くなります。個人的節約のコツは、自分がいる部屋数を少なくすることです。 個人的に意識していること 物件選び 正直リモート前提で自宅を選ばないと厳しいと思っています。 立地 家を出てすぐ心地よいこと(景色がいい、美味しいお店が昼休でいける距離にある) 歩いていける距離にスーパーがあること Uber eats、出前館、Waltのサービス圏内であること 物件 自分の引きたい回線が引けること ある程度の広さがあること(仕事をするスポットがいくつか作れる) 設備 体に触れるものを丁寧に選ぶ 丸1日座っていても体を痛めないようなデスクと椅子を買う。スタンディングデスクが使ってみると思ったよりいいです。 デスク: https://www.amazon.co.jp/dp/B076CGYVBC/ 椅子: https://www.amazon.co.jp/dp/B00YG9FTRK/ デスクの上は綺麗にする 目線が余計に動いて気が散ってしまうため、デスクの上にはできるだけものを置かないように気をつけています。 音質とノイズのなさを追求する 自分の話を聞いてもらうにはビデカンしかないので、相手に余計なストレスをかけないような設備を意識しています。 タイピング音やクリック音、後ろの人の声が入らないこと 相手が聞いていて疲れないような音質のマイクであること 手ぶらになれること 1日耳につけても疲れないこと 現状はヘッドセットが最強です。社外の方とのミーティングなどは基本これです。 https://www.amazon.co.jp/dp/B01K6TUC20/ お仕事 一貫性のある言葉使い 意味するところは同じだけれども、違う単語を使うと「何のことを指しているのかな？」と考えさせてしまうことになります。 例えば、“Pod”と”コンテナ” Kubernetes における […]The post リモートワークのナレッジ first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/remote-work-knowledge/","isoDate":"2022-05-25T00:15:51.000Z","dateMiliSeconds":1653437751000,"authorName":"Sreake","authorId":"Sreake"},{"title":"【ZDnet寄稿記事掲載】ようこそSREの世界へ","contentSnippet":"テクノロジーで新たなビジネスを創造するすべてのリーダーを対象に、価値創造や課題解決のヒントを発信するメディア「ZDnet Japan」に、Srekae事業部部長手塚が「SRE」をテーマに寄稿記事を連載しております。 多くの企業にSREサービスを提供している立場から、「SREとは何か？」「DevOpsやインフラエンジニアと何が違うか？」「どのような場面でSREが必要になるか？」といった点や、SREを始めるに当たっての実践方法などについても紹介しております！下記リンク（ZDnet Japan）よりお読みいただけます。 連載第1回目：システム運用に利益をもたらすSREとは何か？ こちらの記事ではSite Reliability Engineering（SRE）がシステム運用にもたらす利益についてご紹介しています。 連載第2回目：SREを自社に導入するためのプラクティス 2回目の記事では企業ごとに組織の体制や文化が異なる中で、どのような目的・意図を持って進めていけば、この対極にある要素を両立させたSREの導入につなげられるかのプラクティスについてご紹介します。 連載第3回目：SREを通じたデータドリブンな運用の世界 3回目の記事ではSREにおけるデータを測定する重要さ、データの種類と収集方法、システムの運用での活用についてご紹介します。 連載第4回目：SREがより発展していくために 最終章では、SREが抱える悩みである「割り込みタスク」の管理方法、そして、SREがスケールしていくための実装パターンとSRE人材の育成について紹介します。 ぜひ、ご一読いただければ幸いです。The post 【ZDnet寄稿記事掲載】ようこそSREの世界へ first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/sre_zdnet_what_is_sre/","isoDate":"2022-05-19T07:34:00.000Z","dateMiliSeconds":1652945640000,"authorName":"Sreake","authorId":"Sreake"},{"title":"AWSでマルチリージョン対応に利用したサービス","contentSnippet":"2021年３月、AWSで大阪がフルリージョンになり国内でマルチリージョン対応が可能なりました。https://aws.amazon.com/jp/local/osaka-region/ Active-Standbyの構成で、各AWSサービスをマルチリージョン対応している（機能があるもの）ものは積極的に利用しました。 マルチリージョン対応に利用したサービス S3 クロスリージョンレプリケーション バージョニングを有効化が必要 別リージョンでなくてもルールに沿って別バケットにレプリケーション可能 レプリケーションが開始されるのはルール設定後となり、既存オブジェクトのレプリケーションはサポートケースへ問い合わせが必要https://aws.amazon.com/jp/blogs/news/replicating-existing-objects-between-s3-buckets/ KMS マルチリージョンキー arn はリージョンの部分のみ異なる それぞれキーポリシーが設定可能 各リージョンでencryptしたものが、それぞれのリージョンのKMSでdecrypt可能 RDS Aurora Global Database 各リージョンのクラスタにはそのリージョンからしか通信しないように運用しています。東京 → 東京 / 大阪 → 大阪 必要に応じてプライマリクラスタを切り替える、コンソールからフェイルオーバーの操作が可能です。 ごくまれに、Aurora Global Database のプライマリ AWS リージョンで予期しない停止が発生することがあります。この場合、プライマリ Aurora DB クラスターとその読み取りノードを使用できなくなり、プライマリクラスターとセカンダリクラスター間のレプリケーションが停止します。ダウンタイム (RTO) とデータ損失 (RPO) の両方を最小限に抑えるため、迅速に作業を行ってリージョン間のフェイルオーバーを実行し、Aurora Global Database を再構築できます。 https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-failover セカンダリクラスタはリードオンリーにしています。 セカンダリクラスタを 0インスタンスにでき、開発環境のコスト削減などに有効です。 ECR クロスリージョンレプリケーション ECRにpushされたタイミングでルールに沿って別リージョンへレプリケーション可能 ルールはリポジトリ名のプレフィクス AMI リージョン間のコピーhttps://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/CopyingAMIs.html#copy-amis-across-regions コンソールから手動 or CIに組み込む […]The post AWSでマルチリージョン対応に利用したサービス first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/aws-multi-region-services/","isoDate":"2022-05-19T00:11:34.000Z","dateMiliSeconds":1652919094000,"authorName":"Sreake","authorId":"Sreake"},{"title":"SREの中核を担うモニタリングの必要性とその戦略について理解する","contentSnippet":"SRE導入において「モニタリング」は欠かせない要素のひとつです。モニタリングは、システムを可視化するために行うものであり、常にシステムの健康状態を把握し、問題が何か起こったときにサービスの健全性を判定・診断するうえで中核となる機能です。 本記事では、SREの中核を担うモニタリングの必要性とその戦略について解説していきます。どのようにモニタリングを行えばよいか悩んでいる担当者の方はぜひ最後までお付き合いください。 モニタリングの必要性と目的 モニタリング戦略における必要な4つのシグナル レイテンシ トラフィック エラー サチュレーション モニタリングのデータソース メトリクス ログ モニタリングシステムの管理 システムの設定をコードで管理（IaC） 統合されたダッシュボードを準備する 疎結合の優先（設定の柔軟な変更性を担保する） SRE導入及び戦略的なモニタリングは弊社「3shake」にお任せください モニタリングの必要性と目的 システムをモニタリングする必要性や目的は多くありますが、以下がSRE担当者が活用する一般的なモニタリング項目になります。 アラート それらの問題と調査と診断 システムに関する情報を可視化 長期的なトレンド分析 システムのふるまいの比較（軸は実験、変更前後、時間など） モニタリングを行う流れは「収集→分析→可視化」というのが一般的な流れです。まずはアラートによりシステムの破損もしくは破損する可能性があることを検知し、通知を受けます。システムが自身で問題を自動解決できない場合は人間が受け取ったアラートをもとに、調査及び診断を行い、必要に応じて問題の解決に取り掛かります。 アラートを出す際、「何かがおかしい」「エラーが発生した」というような抽象的なアラートの発し方は避けるようにしましょう。抽象度の高いアラートが多量に発生すれば無駄な労力を割いてしまったり、アラートの重要性（価値）自体が下がってしまう恐れもあります。 システムに関する情報の可視化は次項に示す4大シグナルを基本とした情報をもとにダッシュボードを構築し管理します。 そのほか、長期的なトレンドの分析やシステムのふるまい比較をする際にモニタリングを活用するケースもあります。システムアップデート前後で「振る舞いが異なる」「一部の処理でエラーを吐いている」、テスト的に「どちらのクエリの方が早いか比較する」といったケースでもモニタリングは活用されます。 もちろん、上記で挙げている全てを必ずやらなければならないということは無く、システムの規模や運用体制におけるモニタリングの重要性などを考慮して取捨選択すると良いでしょう。 また、あくまで「ユーザー視点での監視」が重要であることは忘れないようにしましょう。アプリケーションの実装の詳細についてはユーザーは気にしません。ユーザーは「アプリケーションが動いているかどうか」という点のみ気にするということを忘れないという事も、モニタリングを設計するうえで重要な要素となります。 ※『入門 監視』２章 監視のデザインパターン参照 モニタリング戦略における必要な4つのシグナル モニタリングシステムの選択で重要なことは、「重要なことを理解し優先順位を付けること」です。ここからは、モニタリングにおける4大シグナルについて解説します。 レイテンシ レイテンシは分かりやすく言うと「応答速度」です。リクエスト処理をしてからレスポンスが返ってくるまでに要する時間のことを指し、ユーザーの満足度に繋がる要因のひとつとなります。注意すべき点は、リクエストに対して「成功したレイテンシ」と「失敗したレイテンシ」を分けて考えるべきであるという点です。成功したレイテンシに比べ、HTTP500などの失敗したレイテンシは、きわめて早いレスポンスで返されるためです。成功と失敗のレイテンシを分けてモニタリングすることではじめて正しいレイテンシの管理ができると言えます。 トラフィック トラフィックはシステムに対するリクエストの量を表します。Webサービスを扱う場合は基本的に毎秒のHTTPリクエスト数で計測します。トラフィック数を監視する際は、「静的コンテンツのトラフィック数」「動的コンテンツのトラフィック数」といったように、トラフィックの内訳ごとに分けて管理するのが望ましいです。 エラー エラーは、処理に失敗したリクエストレートを指します。失敗にはHTTP500などの「明示的な失敗」とHTTP200などの「暗黙的な失敗」、そして約束したレスポンスタイムを超えてしまうといった「ポリシーに関する失敗」が存在します。エラーを検知する際のプロトコルコードは内容の判別を行うには不十分なため、より詳細な状況を把握するためにはより深い内部のプロトコルを必要とする場合もあります。 サチュレーション サービスの飽和状態を表すのがサチュレーションです。システムは利用率が100%に近づくにつれてパフォーマンスが低下するため、許容とする利用率を予め決めて監視する必要があります。サチュレーションの具体的な対象は、システム的に制約のあるものが対象になるため、「必ずコレ」といったものはありません。メモリに制約があれば「メモリの利用率」、I/Oに制約があるのであれば「I/Oの利用率」といったように判断するようにしましょう。 モニタリングのデータソース モニタリングには、メトリクス、ログ、トレース、イントロスペクションなど多くの種類が存在します。本章ではGoogleがSREの最も基礎的かつ最適なモニタリングの要求だと述べる「ログ」と「メトリクス」の2つについて触れていきます。 メトリクス メトリクスは、様々なデータポイントから定期的に集約されたイベントや属性を示す数値の情報を示します。モニタリングのアラートやダッシュボードにメトリクスの情報を利用することで、リアルタイム性の高いアラートの通知を可能にします。 ログ ログはイベント記録のことを指します。単純な「テキストのログ」やクエリや集計ツールに利用できる「構造化ログ」が存在します。イベントの発生からログが現れるまでに多少の遅延が発生するため、リアルタイムを追求したアラートにはあまり適していません。問題の根本解決をする際は、メトリクスだけでは情報が不十分であることが多いため、より詳細な情報を見れるログを使います。 メトリクスとログはそれぞれ上記のような特徴を持つため、お互いの利点を組み合わせ「モニタリング→問題の解決」のフローを構築すると良いでしょう。 モニタリングシステムの管理 モニタリングシステムを管理する場合、いくつか注意すべきポイントがあります。以下、3つ解説していきます。 システムの設定をコードで管理（IaC） システムの設定をコードで管理することには明確なメリットがあります。 変更履歴の管理 変更情報から追跡システムへのリンク […]The post SREの中核を担うモニタリングの必要性とその戦略について理解する first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/sre-monitoring-strategy/","isoDate":"2022-05-18T02:01:21.000Z","dateMiliSeconds":1652839281000,"authorName":"Sreake","authorId":"Sreake"},{"title":"良いポストモーテムを執筆するために必要な5つのポイント","contentSnippet":"SREにおいてポストモーテムの文化を根付かせることは必要不可欠です。ポストモーテムはSREの導入効果をより高め、結果としてシステムの信頼性向上に繋がる体制が作れます。 本記事では、良いポストモーテムの形成方法について解説します。ポストモーテムの作り方で悩んでいる担当者の方、SRE導入を検討している方は最後までお付き合いください。 ポストモーテムの必要性とメリット 良いポストモーテムを執筆するために必要な5つのポイント ポストモーテム文化を根付かせるための施策 ポストモーテム文化およびSRE組織の形成ならお任せください ポストモーテムの必要性とメリット ポストモーテム(post mortem) は「事後」を意味し、SREにおいては「失敗から学び、同じ過ちを繰り返さないこと」に重点を置いた考え方になります。 サービス運用において障害や失敗が発生した後、「ひとまず問題は解決したし、収束したからOK」とするのではなく、原因を追求し再発防止策をしっかり取ることが重要です。 なお、ポストモーテムが「担当者やチームの吊し上げの場」となってはいけません。吊るし上げが怖くて失敗を隠してしまうような環境ではなく、「問題の起因となったアクションを特定し、その問題を正しくドキュメント化、影響を及ぼす全ての根本原因が理解される」という目的のもと取り組む必要があります。 良いポストモーテムを執筆するために必要な5つのポイント ここからは良いポストモーテムを解説していきます。以下5つは良いポストモーテムを執筆するために考慮すると良いポイントです。 明確さ 具体的なアクションアイテム 非難を行わない 周辺への影響度の深さ 即時性と簡潔さ より具体的に理解するために、下記のポストモーテムの例を見ながら解説します。 参照：Example Postmortem まず、上記の例ではポストモーテムとして必要不可欠な要素である「具体的な事象や状況」「発生原因」「発生した影響」「発覚と対応の経緯」はしっかり記載されており、良いポストモーテムの例として最適であることが確認できます。 明確さという点においては、アクションアイテムの項目で「Type」が記載されている点に注目します。アクションアイテムのTypeがひと目で判断できれば、担当者の割り当てが容易になり、より迅速な問題解決に繋がるでしょう。 また、「Summary」や「Impact」の箇所ではインシデントについての有益なデータを、定量的に数値で記載している点も良い点と言えます。数値データの透明性をしめるためにオリジナルデータが格納されているソースへのリンクなどがあるとよりよくなると考えられます。 具体的なアクションアイテムの箇所では、「Type（種類）」「Owner（担当）」「Bug（バグ）」の3点が記載されていますが、さらに「importance（重要度）」があるとより良いでしょう。インシデントが発生した際に重要度や優先順位を即座に判断するのは難しいためです。誰がどのような優先順位でアクションすべきか判断できるようにしておくことが大切です。 ポストモーテムの文化では「非難をしない事」が非常に重要になります。「誰が」ではなく「何が」失敗を引き起こしてしまったのかを明確に書くと良いでしょう。 インシデントの影響度合いについては「深刻度（深さ）」「根本原因」「トリガー」「解決策」が書かれていることを確認しましょう。解決にいたるまでに使われたソースなども記載しておくと良いポストモーテムが出来上がります。 また、担当メンバーがタイムライン上で事象を記載することで、相互にコミュニケーションを取っているのは良い点です。後々、時系列での事象確認をすることができるため、些細なアクションでも残しておくと役立つかもしれません。 ポストモーテム文化を根付かせるための施策 安定かつ信頼性の高いシステムの実現にはポストモーテムは欠かせませんが、ポストモーテムを根付かせる為には、非常に大きな労力がかかることもまた事実です。 ポストモーテムを根付かせるための有効的な施策としては、 ポストモーテムに対する報酬 ポストモーテムのオープンな共有 ツールやテンプレートの活用 などが挙げられます。資産性の高いポストモーテムを執筆したエンジニアには報酬を与えながら、皆が積極的に取り組むことで組織が強固になっていく仕組みを検討すると良いでしょう。また、ポストモーテムを根付かせるために定期的なチーム間レビューや報告会を行うといった取り組みも有効です。ポストモーテムを書いたものの活用されていないとなると、エンジニアとしてもやりがいを感じることは難しいでしょう。 そのほか、ポストモーテムを書くにあたって「PagerDuty」などのテンプレートを使ったり、ポストモーテムを書くべきインシデントの基準（データの損失、ダウンタイムが一定の閾値を超える、など）を設けてあげるなど、書きやすい環境を整えることも重要です。 まずは完璧なポストモーテムを目指すのではなく、試験的に取り入れることから始めてみると良いかもしれません。 ポストモーテム文化およびSRE組織の形成ならお任せください 前述した通り、ポストモーテムはSREの導入に欠かせない取り組みですが、すぐに目に見えて効果が出るものではなく、労力もかかるため後回しにしがちです。しかし、インシデントが再発してからではその損失を抑えることが出来ないのも事実です。 まずは試験的でも良いのでポストモーテムの取り組みを始めてみてください。「どのように書けばよいのかわからない」「最適なポスモーテムの書き方を教えてほしい」という企業様がいらっしゃいましたら、ぜひ弊社にお任せください。SRE導入のお手伝いもさせていただきますので、まずは気軽にお問い合わせいただければと思います。The post 良いポストモーテムを執筆するために必要な5つのポイント first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/5point-good-postmortem/","isoDate":"2022-05-18T01:59:15.000Z","dateMiliSeconds":1652839155000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Google Cloud上で簡易的な高権限管理を実現する","contentSnippet":"高権限管理とは 高権限、特権ID、リリース権限、etc… 平常時は運用に必要な最低限の権限のみを持ち、リリース作業や障害対応などの必要なタイミングでのみ権限を一時的に付与する 安全な運用の面ではもちろん、上場すると J-SOX(内部統制) 法の面で証跡が必要だったり、金融系だと PCI DSS で必要だったりする Google Cloud における一時付与方法 IAM Condition による時間制限付きでのポリシー更新 Overview of IAM Conditions | Cloud IAM Documentation | Google Cloud 条件付き IAM ポリシーで、ある時刻以降は権限を無効にする。 これによって剥奪の考慮が必要ない 権限が無効になるだけでポリシーは残り続けるのでクリーニングしないとポリシーが汚くなる 基本ロールに condition は設定できない 高権限が付与された Group に追加する REST Resource: members | Directory API | Google Developers Workspace の Group を用意しておき、作業時にメンバー追加→終了時に削除する。 剥奪の実装が必要(剥奪タイミングの管理、失敗時のリトライ) 管理者が異なる場合都度 Workspace 管理者に依頼してグループを作る必要がある 時限つきトークンで […]The post Google Cloud上で簡易的な高権限管理を実現する first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/gcp-privilege-management/","isoDate":"2022-05-16T01:04:42.000Z","dateMiliSeconds":1652663082000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Datadog APMを用いてLambdaのパフォーマンスを可視化する","contentSnippet":"AWSのプロジェクトではお馴染みのLambda関数を、 Datadog APMを用いてトレース情報の取得の手順についてご紹介しますThe post Datadog APMを用いてLambdaのパフォーマンスを可視化する first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/datadog-lambda/","isoDate":"2022-05-12T10:48:40.000Z","dateMiliSeconds":1652352520000,"authorName":"Sreake","authorId":"Sreake"},{"title":"GKE Autopilot 触ってみました","contentSnippet":"社内プロダクトではこんな感じで GKE Autopilot を使ってます 注意する箇所 Terraform google provider のバージョンを一定以上に上げる必要がある 公式の GCP Terraform Module では，enable_autopilot オプションは未サポート→ google_container_cluster リソースを使用する 設定できないアドオンを記述している場合はエラーが出るので削除する 利用できるアドオン HTTP ロードバランシング (NEG等) VPA (垂直 Pod オートスケーリング) デフォルト CSI ドライバ NodeLocal DNSCache 利用できないアドオン DataPlane V2 (Cillium) GKE Autopilot Terraform Sample Spot Instance (≒ Preemptive / SpotVM) GKE クラスタ構築時には特に設定の必要はなし Pod の NodeSelector に cloud.google.com/gke-spot=true を指定する Spot 含めて、課金は […]The post GKE Autopilot 触ってみました first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/gke-autopilot/","isoDate":"2022-05-12T02:00:00.000Z","dateMiliSeconds":1652320800000,"authorName":"Sreake","authorId":"Sreake"},{"title":"cert-manager について学ぶ","contentSnippet":"ACME challenges [HTTP01] 概念が掴みにくい用語 チャレンジ (challenges)ACME クライアント(cert-manager)がドメインを所有しているのを確認すること Issuer (発行者)証明書を発行(issue, issuance)する認証局 (CA; Certificate Authority) のこと→ 種類は SelfSigned, CA, Vault, Venafi(ベナファイ), External, ACME(HTTP01, DNS01) SAN (Subject Alternative Name; サン)1つの証明書に2つ以上のホスト (CN; Common Name)[e.g. www.example.com, example.com] を含めることができる追加名のこと cert-manager 特徴 証明書の管理更新を自動化できるクラウドネイティブな OSS APIを利用する場合は acme.cert-manager.io.io/v1, cert-manger.io/v1 等がある ユースケースとしては自動的に Let’s Encrypt を発行して、ローテションしてくれる Issuer である ACME(HTTP01, DNS01) が使用されることが多いように思う 参照: https://cert-manager.io/docs/configuration/acme/ Helm を利用すると Webhook […]The post cert-manager について学ぶ first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/learn-about-cert-manager/","isoDate":"2022-05-10T01:03:04.000Z","dateMiliSeconds":1652144584000,"authorName":"Sreake","authorId":"Sreake"},{"title":"GCR に push するときの権限周りの注意点","contentSnippet":"説明すること GCR での権限エラーの概要 GCS のバケットレベルについて GCR でのイメージの保存方法について GCR での権限エラーの概要 起きたこと あるアプリチームは GCR にイメージを push できるのに、その他のアプリチームは push する Service Account に storage.object.get 権限の付与しないと push ができない 前提と設定内容 GCR を作成するプロジェクトは、全アプリチームで共有している GitLab Runner でビルドをして GCR への push を行っている 各アプリチームは共通のベースイメージを使用している GitLab Runner を悪用したイメージの抜き出しなどを防ぐため、カスタムロールを使用している・storage.buckets.list・storage.buckets.update・storage.objects.create・storage.objects.list・storage.objects.update 各アプリチームで使用している GitLab Runner 用の Service Account の権限は同じで、各アプリチームで Service Account を作成している GCR に使用している GCS のバケットレベルは きめ細かい で設定されている 参考 […]The post GCR に push するときの権限周りの注意点 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/gcr-push/","isoDate":"2022-05-10T01:02:05.000Z","dateMiliSeconds":1652144525000,"authorName":"Sreake","authorId":"Sreake"},{"title":"【バグバウンティQ＆A】Intigritiはバグバウンティプログラムをどのように最適化しているか？","contentSnippet":"【Q&A】シリーズでは、バグバウンティプログラムに関するよくある質問について、弊社CEOのStijn Jansがお答えしています。今回は、「Intigritiはバグバウンティプログラムをどのように最適化しているか」についてご紹介します。The post 【バグバウンティQ＆A】Intigritiはバグバウンティプログラムをどのように最適化しているか？ first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/how-does-intigriti-optimise-bug-bounty-success/","isoDate":"2022-04-28T01:55:08.000Z","dateMiliSeconds":1651110908000,"authorName":"Sreake","authorId":"Sreake"},{"title":"FargateにDatadog Agent導入してみた","contentSnippet":"Sreake事業部の槌田です。普段はSREとして設計、構築、監視まで業務をこなしています。最近、監視業務でDatadogを使うことが多くなってきて興味を持ち始めたので検証や知見を書いていく予定です！先日案件でECS on FargateにDatadog Agentを入れたのでインストール方法や知見を書いていきます。The post FargateにDatadog Agent導入してみた first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/datadog-agent/","isoDate":"2022-04-26T05:50:23.000Z","dateMiliSeconds":1650952223000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Datadog 101概要で紹介されているサービスのまとめ","contentSnippet":"Datadog 101 - 概要の動画で紹介されている機能について、著者なりの解釈で、キャプチャ画像とともにかいつまんでご紹介していきたいと思います。The post Datadog 101概要で紹介されているサービスのまとめ first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/datadog101/","isoDate":"2022-04-26T05:50:18.000Z","dateMiliSeconds":1650952218000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Google Cloud PCA について","contentSnippet":"試験概要 どんな試験？ Professional Cloud Architect 認定資格 | Google Cloud Professional Cloud Architect は、Google Cloud の技術を組織が活用するために必要なクラウド アーキテクチャと Google Cloud Platform に関する専門的な知識を活かして、ビジネス目標を推進するスケーラブルで高可用性を備えた堅牢かつ安全な動的ソリューションを設計、開発、管理するスキルを持ったアーキテクトです。 クライアントのビジネス要件や技術的要件に対して、Google Cloud Platform のサービスを使用して解決する能力が問われる Google Cloud Certified – Professional Cloud Architect 認定試験では、以下に関する能力が評価されます。 ・クラウド ソリューション アーキテクチャの設計と計画 ・クラウド ソリューション インフラストラクチャの管理とプロビジョニング ・セキュリティとコンプライアンスに対応した設計 ・技術プロセスやビジネス プロセスの分析と最適化 ・クラウド アーキテクチャの実装の管理 ・ソリューションとオペレーションの信頼性の確保 以下の内容が問われます。 各サービスの正しい使い方を理解していること Google Cloud Platform のベストプラクティスを理解していること 出題の形式 基本的には４つの選択肢から、正しいものを１つ選ぶ（複数選択もあり） たまに複数選ぶ ケーススタディ 架空のプロジェクトをベースとした選択問題 […]The post Google Cloud PCA について first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/google-cloud-pca-%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6/","isoDate":"2022-04-20T00:02:02.000Z","dateMiliSeconds":1650412922000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Intigritiリーダーボードとは何か、それが企業のバグバウンティプログラムにどのような影響を与えるか","contentSnippet":"今回の記事では、Intigritiのリーダーボードがどのようなものか、より詳しく説明していきます。また、バグバウンティプログラムやバグハンターコミュニティにどのような利益をもたらすかについても紹介していきます。The post Intigritiリーダーボードとは何か、それが企業のバグバウンティプログラムにどのような影響を与えるか first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/intigriti-leaderboard-what-is-it-and-how-does-it-impact-your-program/","isoDate":"2022-03-22T01:55:00.000Z","dateMiliSeconds":1647914100000,"authorName":"Sreake","authorId":"Sreake"},{"title":"Securify申し込みから利用までを徹底解説 [使ってみた]","contentSnippet":"当社が2021年12月より提供開始した、自動脆弱性診断ツール「Securify (セキュリファイ)」ですが、おかげさまで多くの企業様よりお問い合わせ、ならびご利用頂いております。現在ベータ版での提供であり、全機能を無料でご利用可能です(2022年1月現在)。 以下では、Securifyを利用開始するまでの流れについて、またSecurifyの画面についても解説いたしますので、「自動の脆弱性診断ツールを探している」方は、ぜひご一読いただければ幸いです。 Securify利用開始までの流れ (1)フォームから申し込み (2)担当者と打ち合わせ (3)ID + ログインURLを受信→利用可能 Securifyログイン・画面解説 マジックリングでログイン ログイン後の画面解説 画面左: プロジェクト管理 画面左: アカウント管理 画面中央: プロジェクトを作成 画面右上: お知らせ（ベルのマーク） 画面右上: 黒丸アイコン（メールアドレスのアルファベット頭文字が表示） 画面右下: ？マーク 自動の脆弱性診断プロジェクトを作成 1.トップページから「プロジェクトを作成」をクリック 2.プロジェクト名、説明を入力 3.プロジェクトが登録され、詳細情報入力が可能に。 4.プロジェクトが登録され、詳細情報入力・確認が可能に 5.ドメインを登録する 6.診断を実施する (1)通常診断 (2)定期診断 まとめ Securify利用開始までの流れ 結論から申し上げると、Securifyはわずか2ステップで利用開始できます。順に解説いたします。 (1)フォームから申し込み 当社Securify紹介ページ内のフォームからお申し込みください（ページの一番下です）。 全項目の入力にかかる時間は、長く見積もっても1-2分程度ですので、気軽に申し込み可能です。 (2)担当者と打ち合わせ フォーム送信後、Securify担当者から電話またはメールで連絡があります。 その後、利用開始前の打ち合わせが設定されます。打ち合わせ時間は30分から1時間程度で、Securifyのコンセプト、機能、使い方などをご紹介すると同時に、お客様がどのような目的でSecurifyをご利用されるかについてもお伺いしています。 (3)ID + ログインURLを受信→利用可能 打ち合わせ終了後に、当社Securify担当者よりメールにて、Securifyを利用するための企業IDとログインURLを案内させていただきます。このメールの受信後からSecurifyが利用可能となります。なお、利用時の注意事項についても記載してあるため、必ず読んでください。 Securifyログイン・画面解説 マジックリンクでログイン Securifyへのログインは、メールに記載のログインURLから行います。ログインURLをクリックし、「企業ID」と「登録メールアドレス」を入力します。 入力後、「ログイン用メール送信」ボタンをクリックすると、ログイン用のメールが送信されます。このメールに記載されたリンク（マジックリング）をクリックすると、ログインできます。 メールが送信されるまで、クリックして数秒待つ必要がありますのでご注意ください。 パスワードは使用しません（パスワードレス）ので、パスワードを記憶・管理する必要がなく、またパスワードの使い回しといったリスクもなく安全です。 ログイン後の画面解説 ログイン後はこのような画面が表示されます。 なお、この画面は2022年1月現在のもので、変更となる可能性がございます。 […]The post Securify申し込みから利用までを徹底解説 [使ってみた] first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/securify_trial/","isoDate":"2022-03-18T15:08:46.000Z","dateMiliSeconds":1647616126000,"authorName":"Sreake","authorId":"Sreake"},{"title":"脆弱性によるセキュリティリスクへの効果的な対処法とは？対策の流れを徹底解説！ | sreake.com","contentSnippet":"システムに脆弱性があると悪意のある攻撃が行われる可能性があり、セキュリティリスクを抱える原因になります。脆弱性が生じる原因は複数あるため、原因を理解したうえで効果的な対処を行わなければなりません。 今回は脆弱性によるセキュリティリスクの原因を紹介したうえで、効果的な対処法と対策の流れについて解説します。ぜひ参考にしてみてください。 情報セキュリティ上の「脆弱性」とは？ 脆弱性が生じる原因 脆弱性によるセキュリティリスク例 システムへの不正侵入 情報の漏えいや盗難 脆弱性に対するリスク対策 脆弱性に関する情報を集める 脆弱性診断ツールを利用する 脆弱性診断サービスを利用する バグバウンティを活用する 情報セキュリティ上の「脆弱性」とは？ 情報セキュリティ上の「脆弱性」とは、OSやソフトウェアにおいて発生する、情報セキュリティ上問題となる可能性がある欠陥を指します。これは総務省において定義づけされているものです。「ソフトウェアやハードウェアが脆弱性を抱えている」といったような使い方をされる言葉です。 脆弱性を抱えていると、脆弱性をついて悪意のある攻撃が行われるケースがあり、情報の漏えいや不正ログインといった、運営上あってはならない事態に繋がる恐れがあります。 悪意のある攻撃を受けると、自社が被害を受けるのはもちろん、取引先企業や顧客にまで被害が及ぶ可能性もあるため注意が必要です。 脆弱性に対応するために、ソフトウェアを開発したメーカーが更新プログラムを提供するのが一般的ですが、脆弱性への対策はそれだけやっていればOKということはありません。 脆弱性は次々に見つかるものです。一度対策をしたら終わりではなく、常に情報を収集して必要に応じて迅速にアップデートを行うなどの対策が求められます。 近年ではOSやソフトウェアに対する脆弱性が発見された後、メーカーが更新プログラムを提供するまでに攻撃が行われるゼロデイ攻撃も増加しました。 更新プログラムが提供されるまでは、指摘された脆弱性の内容を確認し、該当の脆弱性に繋がる行為を行わないなど、普段以上に注意が必要です。 参考：総務省│国民のための情報セキュリティサイト　脆弱性（ぜいじゃくせい）とは？ 脆弱性が生じる原因 脆弱性が生じる要因は、主に以下の5つです。 プログラムの不具合 プログラムの設計ミス 想定と異なる利用方法 ミドルウェアの脆弱性 新たな攻撃方法が生み出される 「プログラムの開発過程でバグが混入する」「コーディングミスがある」など、プログラムそのものに不具合があると、脆弱性が生じるきっかけになります。 セキュリティ上必要な設計が漏れているなど、プログラムの設計ミスがあることも脆弱性が生じる原因の一つです。上流工程で設計ミスがある場合や、設計通りであっても攻撃者から見れば攻撃可能な状態になっている場合、下流工程での修正は容易ではありません。 ハードウェアやソフトウェアの利用方法が多様化し、開発当初の想定とは異なる利用方法をされる中で脆弱性が生じる可能性もあります。開発段階でユーザーの利用方法すべてを想定するのは、不可能だと言えるでしょう。 使用しているミドルウェアに脆弱性が発見されると、システム自体に脆弱性が生じます。ミドルウェアの脆弱性を利用して他システムに攻撃をするといった危険性を秘めているため、システム全体の脆弱性に常に目を配ることが重要です。 近年では新たな攻撃方法が生み出されるペースも速く、システムの運用中には予想されていなかった脆弱性が攻撃者によって見つけ出されるケースも多く見られるようになっています。 脆弱性によるセキュリティリスク例 脆弱性によって起こりうるセキュリティリスクの例を3つほど紹介します。 システムへの不正侵入 脆弱性を放置していると、システムへの不正侵入を試みられるリスクがあります。 内部への侵入を許すとコードやファイルの改ざんが行われ、機密情報が抜き取られたり破壊されたりします。 不正侵入は自社だけの影響にとどまらず、他への攻撃の踏み台として利用される可能性もあります。踏み台として悪用されると、取引先や顧客に迷惑をかける可能性もあるため避けなければなりません。 データの改ざんや破壊、他への攻撃の踏み台としての利用以外にも、システムに不正に侵入された結果、管理者としての権限が乗っ取られるケースも見られます。 管理者権限が乗っ取られるとシステムが停止し、業務の継続が困難になる可能性もあるため、注意しなければなりません。システムの停止まではいかなくても、調査のために一時的にサービスを停止する必要が生じて大きな損害を被る場合もあります。 情報の漏えいや盗難 外部から内部ネットワークに侵入されなくても、情報が漏洩したり盗難に遭ったりするリスクがあります。たとえば内部に侵入せずに企業が公開しているウェブサイト上で情報を抜き取るといった攻撃が可能です。 情報の漏えいや盗難に関連する、脆弱性を利用した攻撃の例を確認しましょう。 脆弱性の例 方法 SQLインジェクション ・不正なデータベース言語を攻撃対象のウェブサイトに注入する・注入した言語の命令を実行させる クロスサイト・スクリプティング ・攻撃対象のウェブサイト上に罠となるプログラムを仕込む・訪問者が特定の行動をすると被害が出る SQLインジェクションの「SQL」とは、代表的なデータベース言語です。ウェブサイトに不正なSQLを注入すれば、注入したSQLによる命令を実行できます。入力フォームやキーワード検索窓にSQLを仕込めば、データを抜き取ったり隠されているデータを盗み見たりできるのです。 クロスサイト・スクリプティングでは、攻撃対象のウェブサイト上に罠となるプログラムを仕込んで攻撃します。たとえば悪意のあるURLを仕込み、訪問者がリンクをクリックすると悪意のあるプログラムが実行されるといった仕組みです。 顧客の個人情報やクレジットカード情報など重要な情報が抜き取られると、信用の失墜や多額の損害賠償につながるため、警戒しなければなりません。 脆弱性に対するリスク対策 脆弱性に対するリスクを最小限に抑えるために、普段から行なっておくべき対策を紹介します。 […]The post 脆弱性によるセキュリティリスクへの効果的な対処法とは？対策の流れを徹底解説！ | sreake.com first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/vulnerability-security-risk/","isoDate":"2022-02-14T13:37:15.000Z","dateMiliSeconds":1644845835000,"authorName":"Sreake","authorId":"Sreake"},{"title":"SREチームの作り方と5つの導入ステップを理解する","contentSnippet":"「SREに興味はあるが、どのように取り組めばよいか」と悩んでいる企業の方は多いかと思います。社内にいる人材を駆使して取り組むのか、それとも新しくSREの知識に富んだ人材を雇えばよいのか、またどのように組織を作ればよいかなども悩む点でしょう。 そこで本記事では、どのようにしてSREの組織を形成すればよいのか、解説していきます。SREチームの編成や取り組み方に興味がある方は参考にしてください。 理想的なSREチームのあり方を考える Googleが提唱する理想的なSREの組織 自社にあった組織を形成 SREの導入ステップを理解する ①現状の定義・組織構造の理解 ②ステークホルダーの特定と教育 ③ビジネスケースの作成と提示 ④SREチームの編成 ⑤結果の計測 SREのチーム編成から導入まで弊社にお任せください 理想的なSREチームのあり方を考える SREはGoogleが提唱した信頼性向上のための施策です。理想的なSREのあり方についてGoogleが提唱している考えを参考として紹介します。Googleのやり方をすべて真似する必要はありませんが、概念として知っておくと参考になるはずです。 Googleが提唱する理想的なSREの組織 GoogleではSREの組織形成として、以下のメンバーで構成されることが理想的であると述べています。 50～60%：Googleの正規のソフトウェアエンジニア 40～50%：正規のエンジニア『予備軍』で他のメンバーが持っていないスキルを持っているエンジニア 複数の異なるスキルが合わさることではじめて、信頼性を担保したハイクオリティなサービス運営が可能なSRE組織になります。SREを導入する際に、一人ひとりに高いコーディングスキルや運用スキル、インフラ知識を求めるのではなく、メンバー全員で不足しているスキルを補うことを意識すると良いでしょう。 正規のエンジニア『予備軍』という表現の意味するところとしては、「アプリケーションに対する技術力だけでなく、インフラやDBなどの広い知識を持つメンバー」ということが表現されているのではないかと考えられます。具体的なスキルとしては、「UNIXシステムの内部構造」や「ネットワーク（レイヤー1からレイヤー3）」の専門知識であることが多いようです。 しかし、上記のスキルはあくまでGoogleが唱えているものであり、現実的な話としては自社のサービスや環境で使用される「アプリケーション開発スキルや知見」「インフラに関する知識や技術力」といったスキルであることが多いのが現状です。 自社にあった組織を形成 先に紹介した「Googleが提唱する理想的なSREの組織」はあくまでGoogleが良しとする考えのため、サービスの成長フェーズや企業規模によって取り組み方は変える必要があります。 SREの導入で大切なのは、信頼性向上のための自動化や効率化に向けて、常に結果を振り返り改善し続けることです。中長期的な目線を持ち、自社にあった組織ないし取り組み方を模索することを意識すると良いでしょう。 またメンバーも最初に決めたメンバーにこだわらず、SREを進めていくうちに発覚した必要なスキルを持つメンバーを途中で入れる柔軟性も持っておきましょう。 もしSREの人材を雇う場合はインフラエンジニアとしての技術とスキル、アプリケーション開発スキル、SRE導入実績などを見たうえで選びます。ただ、これらのスキルを全て有する人材は非常に希少で、年収などの面でも優遇する必要があるため、採用はタイミングなどを含め慎重に行う必要があります。 SREチームの初期発足時は、なるべく社内メンバーを探して構成することをおすすめします。もしSREに関する知見があるメンバーが社内にいない場合や、スキル面で不安があるという場合は、新規でSRE人材を採用するのではなく、SREの導入支援を行うサービスを利用するのもひとつの手です。新規でSRE人材を雇っても「結局SREがうまく機能しなかった」「実はSREチームは必要なかった」といったケースも考えられるので、SRE導入の初期フェーズはより慎重に進めると良いでしょう。 SREの導入ステップを理解する SRE業界で有名な本である「SREの探求」の8章の2では、以下の5つの導入ステップを踏むことでスムーズなSRE導入ができると示しています。内容を要約し、わかりやすく解説いたします。 ①現状の定義・組織構造の理解 SREが組織の将来に占める立ち位置やビジネスケースを提示するために現状を把握し、組織構造を理解します。現状の把握とは、企業内で存在する組織構造や責任者の把握、SREを導入する際にステークホルダーとなりうる人物の把握などです。 ②ステークホルダーの特定と教育 SRE導入のカギとなるステークホルダーと会話を重ね、組織内でのSREチームの立ち位置や影響しうるストーリーの構築を行います。ここで指すステークホルダーの例としては、CIO（Chief Information Officer）や運用担当責任者、サポート担当責任者、エンジニアリング担当責任者など、各チームのリーダーを指します。 ③ビジネスケースの作成と提示 現状の課題やコスト、SRE導入における好影響などを含め、ビジネスケースを提示し社内での理解を得ます。ビジネスケースを作成する際は、直面している課題や現状かかっているコスト、運用や信頼性に及ぼす潜在的な影響、費用対効果といった点をなるべく具体的につめることがポイントとなります。 ④SREチームの編成 SREのビジネスケースを決定し、目標達成に向けて最適な人材をSREチームとして招集しチームを編成します。SREチーム編成における最適な人材は、サービスの成長フェーズや改善したい業務内容によりますが、「アプリケーション開発を行う技術力や知見」「インフラに関する知識や技術力」「サービスの運用スキル」などが必要となります。ただし、これらの必要スキルを全て有する人材は稀であるため、チーム全体でスキルを補うことを考えてチーム編成を行うと良いでしょう。 ⑤結果の計測 結果を計測し、振り返りを行い改善し続けます。 あらかじめTrelloやAsanaといった工数管理ツールとTableauやLookerといったBIツールを連携させておけば、SRE導入前と導入後の工数削減率は容易に把握できます。 中でも特に、現状の定義・組織構造の理解に時間をかけると良いでしょう。SREを導入するにふさわしい場所を模索し、ビジネスケースに落とし込むことでSREの導入効果を最大化できます。SREはチームだけでなく、周りのメンバーや上層部からの理解を得てはじめてうまくいくものです。 導入の初期フェーズでは小さいスケールから始め、徐々に様々なプロダクトに広げていくことで社内の信頼を得られるでしょう。 SREのチーム編成から導入まで弊社にお任せください 「明日からSREチームを作って、Webサービスの信頼性を向上してください」といきなり言われても、まず機能しません。SREによって信頼性を向上させるためには、導入する目的を明確にし、適切な人材を組織し、施策を講じる必要があるからです。 弊社はSREをサービスとして提供していますが、その一環でSRE組織の立ち上げも支援しております。SREチームが機能するための基盤づくりはもちろん、戦略策定から設計・構築・運用、監視製品の導入までSREに必要な要素を統合的に提供可能です。 ぜひ一度貴社サービスの課題に感じている点を含め、お話を聞かせていただければと思います。The post SREチームの作り方と5つの導入ステップを理解する first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/sre-team-building-5step/","isoDate":"2022-01-17T10:11:19.000Z","dateMiliSeconds":1642414279000,"authorName":"Sreake","authorId":"Sreake"},{"title":"リソース不足の組織が、SREに取り組む際の3つのポイントについて解説 [SREチーム構築]","contentSnippet":"「自社エンジニア組織においてSREを導入したい」「しかし、リソースの制約により、Googleが行っている『理想的なSRE』を行うのは難しい」 このように考えている企業は多いかと思います。今回は、「制約がある状況下でも、SREに取り組む際のポイント」についてご紹介したいと思います。 「理想的なSRE」とのギャップを理解する リソース不足の組織がSREをはじめる際のポイント 1.小さく始める 2.できることをやる 3.正しい方法論で取り組む リソース不足を理由にSREをあきらめない 「理想的なSRE」とのギャップを理解する Googleが提唱するSREについてですが、下記の3点が特徴として上げられます。 SREチームの人材 50-60%は「（Googleの）正規のソフトウェアエンジニア」で、残りの40-50%は「正規のエンジニア予備軍だが、他のメンバーには持っていないスキルを持っているエンジニア」で構成される。 SREの方法論 SLI/SLOの定義、エラーバジェットの設定、自動化のためのコーディング、CI/CDの導入、インシデント後のポストモーテムの実施など SREが根付く組織文化 組織のサイロ化をなくした競合体制の構築、インシデント発生時に特定の人を責めずポストモーテムとして学ぶの機会とするなど この3つのどれが欠けても「Googleと同様のSREチーム」の構築が難しいのが実情です。しかし、大半の組織の実情は「この3つが揃っていることはほとんどない」のが一般的で、最も欠けているのは「人材」です。例えば、以下のような例です。 Webサービス開発を行っているソフトウェアエンジニアを、SREチームに異動させるのは開発リソース的に難しい。 技術力が乏しい人材が、SREチームに配置されている。 そもそも社内には、SREとなる要件を満たす人材がほとんどいない。 SRE経験者を外部から採用するのは、人件費を考えると難しい。 このように、世の中の大半の組織では「Googleが行っているSRE」と「自社が行うSRE」との、特に人員的なギャップに悩むことになります。 リソース不足の組織がSREをはじめる際のポイント Googleが提唱するSREと、自社が行えるSREのギャップに直面して、「当社にはSREは無理か」と諦めそうになるケースもあります。しかし、多くの組織ではこうした人材に関する問題がありながらも、SREチームを設けて活動を続けています。 「Done is better than perfect. （完璧であるより、まずは終わらせることが重要）」という格言がある通り、SREも「完璧な体制を整えようとせずに、与えられた状況下でまず始める」ことが大切です。 限られたリソースでSREに取り組むために必要な「3つのポイント」を以下でお伝えします。 1.小さく始める 当社は「Sreake」という、SREを外部企業に提供するサービスを行っていますが、お客様に常にお伝えしているのは「小さく始めましょう」という点です。 やるべきことは多くあり、かつSREが根付く文化も一朝一夕では実現できません。かつ、人的リソースも限られている中でSREをはじめるには、「SREチームとして、我々はやっていける」という成功体験を得ることが非常に大切です。このため、既存の大型サービスから取り組むのではなく、新規のサービスやそこまで大きくないサービスから取り組むほうが、SREをはじめやすいと言えます。 なお、GoogleはSREチームの評価に役立つレベル別チェックリストを作っていますので、参考にしてください。 2.できることをやる SREというと、「コーディングスキルが高いSREエンジニアが、サービス自動化のために大量にプログラムを書いていく」イメージをお持ちの方もいるかと思います。しかし、「SREを導入したいが、SREエンジニアの要件を満たす人材がほとんどいない」ケースもあります。 一例に「株式会社ハートビーツ」があります。こちらの会社はMSP事業者向けにインフラ運用を代行する事業を行っています。ハートビーツがSREを行った際、その主体となったのは「運用グループのエンジニア」です（サービス開発を行うソフトウェアエンジニアではありません）。 ハートビーツでは、サービス開発を行うエンジニアと比べ、ソフトウェアエンジニアリング力に限界があることは承知のうえで、SREの方法論を用いてトイル対策に臨んでいます。結果、トイルの削減に成功していますが、Googleが実現している「トイルに費やす時間は、SREエンジニアの時間の半分以下」という目標まではまだ到達していません。 では、ハートビーツのSREが失敗だったかというと、もちろんそうではありません。自社の限界を理解しながらも、改善を積み重ねて成果を出しています。 もし、貴社が「うちのリソースでは到底SREは無理」とお考えの場合は、ぜひハートビーツの事例を参照ください。リソースが限定的であっても「できることをやる」という姿勢で正しく取り組むことで、得られるものは多くあります。 3.正しい方法論で取り組む SREは概念ではなく、体系だった方法論です。よって、方法論の正しい実践により、成功確率を高められます。SREの方法論は、「SRE: サイトリライアビリティエンジニアリング」（通称SRE本）の内容をGoogleが無償公開（英語）していることに加え、邦訳も刊行されているため容易に入手できます。 また、SREに関しては多くの企業が自社の取り組みをセミナーやブログで公開しているので、こうした具体例からも多くを学べます。なお、当社では2020年9月に「SRE Gaps 理論と実践からSREを再考する」というイベントを開催し、この内容をアーカイブ配信ならびイベントレポートとして公開しています。ぜひ参考にしていただければと思います。 こうした情報を踏まえた上で、「自社でSREを始めるために支援を受けたい」という場合は、当社のSRE支援サービスである「Sreake」をご検討ください。これまで、NTTデータ様、JCB様などの大きな企業向けに支援実績に加え、中堅企業やスタートアップへの支援実績も豊富にあります。多くの組織でSREの導入支援に取り組んできたメンバーが、貴社SREの実践のお手伝いをさせていただきます。 リソース不足を理由にSREをあきらめない 「SREチームを社内に設けて、サービスの信頼性を高めたい」という企業が、はじめから「リソースが全て揃った完璧な状態でスタートできた」という例はほぼ皆無といってよいでしょう。逆に言うと、どの企業も何かしらのリソース不足を抱えたまま、SREチームを設けて苦闘しています。 前項で、リソース不足であっても「小さく始める」「できることをやる」「正しい方法論で取り組む」ことが重要とお伝えしました。また、自社のリソースだけではSREチームの立ち上げが難しい、または成功確率を高めるために外部の支援を得たいという場合は、当社のSRE支援サービス「Sreake」を活用ください。お問い合わせを頂いた内容について、真摯に回答させていただきます。The post リソース不足の組織が、SREに取り組む際の3つのポイントについて解説 [SREチーム構築] first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/sre-team-building/","isoDate":"2022-01-17T10:09:49.000Z","dateMiliSeconds":1642414189000,"authorName":"Sreake","authorId":"Sreake"},{"title":"SREにおけるトイルの判断と切り分け方","contentSnippet":"SREの導入で重要な項目のひとつに「トイルの削減」が挙げられます。しかし、トイルを削減すると言っても、「トイルをどのように定義し、何をどこまでトイルとして扱うのか」の判別が難しい場合があるかと思います。 そこで、本記事ではトイルの定義に加えて、トイルを削減するメリットやトイルの判別に役立つポイントを解説します。SREの導入やトイルの削減に関心がある方は、ぜひ最後までお付き合いください。 トイルの定義と判別方法 トイル削減はなぜ必要なのか サービスのスケーラビリティに悪影響を及ぼす可能性がある トイルの自動化によりヒューマンエラーのリスクを減らせる エンジニアが本来の作業に集中できない トイルを削減するための5ステップ STEP1：トイルの洗い出し STEP2：トイルを測定する STEP3：トイルに優先順位をつける STEP4：トイルを解決する STEP5：定期的な見直しを行う トイルを拒否する/まとめて並列処理する トイルを拒否する まとめて並列処理する トイルをセルフサービス化する SLOを利用したトイル削減 SREの導入実績豊富な弊社がサポートします トイルの定義と判別方法 toil（トイル）を直訳すると「苦労」「骨が折れる」といった意味を表す言葉です。この表現だけを見ると「トイル=面倒で苦労のかかる仕事」と理解してしまいがちですが、SREにおけるトイルには明確な定義が存在します。 Google Cloud Blogに投稿されたこちらの記事によれば、トイルとは 手作業であること 完全な手作業だけでなく、「あるタスクを自動化するためのスクリプトを、手作業で実行する」ことも含まれます。 繰り返されること 1度、2度で終了する作業ではなく、繰り返し何度も行われる作業です。 自動化が可能なこと そのタスクの処理において「手作業と同レベルで自動化が可能」または「タスクの必要性がなくなる仕組みを作れる」場合を指します。 戦術的であること 戦略的なタスク、または予測に基づくタスクではなく、通常タスクに割り込んで行われる問題対応的なタスクを指します。 長期的な価値がないこと 「古いコードや設定を踏み込んで整理する」といった、短期的には必要だが、長期的にサービスに価値をもたらすわけではないタスクを指します。 サービスの成長に比例して増加すること サービスのサイズ、トラフィックの量、ユーザー数などに正比例して増加するタスクは、おそらくトイルである可能性が高いといえます。 といった特徴を持つ作業のことを指します。自社の作業においてトイルを判別する場合、上記の項目に当てはめて考えることで、トイルが判別できるはずです。その際、「作業の種類」「作業の難易度や作業にかかる時間」「作業の発生頻度」を把握することで、トイルの削減による作業効率向上の手がかりになるでしょう。 また、トイルの具体的な例としては以下のような物が挙げられます。 アカウント発行業務 データベース スキーマ変更の適用 日々のアラートトリアージ業務 ネットワーク設定変更…etc 上記の項目はすべて定常的で、「ある程度パターン化できる作業」という共通点があります。 逆に、システムの開発に必要なコーディング作業やオーバーヘッド（管理上の雑務）などの作業はトイルには含まれません。 参照：Identifying and tracking toil using SRE principles トイル削減はなぜ必要なのか Googleが提唱するSREにおいて、トイルは50％以下に抑えることが推奨されていますが、そもそもなぜトイルを削減する必要があるのでしょうか。ここでは大きく3つの視点で、トイル削減の必要性について解説します。 サービスのスケーラビリティに悪影響を及ぼす可能性がある […]The post SREにおけるトイルの判断と切り分け方 first appeared on sreake.com | 株式会社スリーシェイク.","link":"https://sreake.com/blog/sre-toil-select/","isoDate":"2022-01-17T10:09:04.000Z","dateMiliSeconds":1642414144000,"authorName":"Sreake","authorId":"Sreake"}]},"__N_SSG":true}