<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Wed, 31 Jul 2024 18:33:43 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[会社でオブザーバビリティ・エンジニアリング輪読会をやっています]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/31/230534</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/31/230534</guid>
            <pubDate>Wed, 31 Jul 2024 14:05:34 GMT</pubDate>
            <content:encoded><![CDATA[スリーシェイクでは、毎週輪読会をやっているのですが、今使用している書籍は「オブザーバビリティ・エンジニアリング」です。オブザーバビリティ・エンジニアリング作者:Charity Majors,Liz Fong-Jones,George Mirandaオーム社Amazon1回1時間で1章を担当者が進めます。今日は私が第5章を担当しました。いままで、従来のモノリシックなシステムの世界ではモニタリングをやってきたわけですが、分散システム（クラウドネイティブやマイクロサービスのことをいう？）では、モニタリングが通用しなくなり、オブザーバビリティが必要と述べています。オブザーバビリティは、構造化したイベントの一連のログを用いて、様々なシステムにまたがるリクエストを可視化し、未知の未知に対処できるようにする、と述べています。中々難しい概念ですが、書籍の内容をしっかり吸収して、アプリケーションエンジニアとして、オブザーバビリティなアプリケーション開発に役立てていこうと思います。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[え、SLOもRPGで学びたいですか？]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/07/31/224037</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/07/31/224037</guid>
            <pubDate>Wed, 31 Jul 2024 13:40:37 GMT</pubDate>
            <content:encoded><![CDATA[かつて、障害対応RPGを作成しました。これのSLO版です。syu-m-5151.hatenablog.comゲームプロンプトSLI、SLO、エラーバジェットの概念を学ぶのは、理論だけでは難しいものです。SLI、SLO、エラーバジェット導入の前に知っておきたいことなどで情報を得ても、具体的に何をすればよいかわからなくなることがあります。そこで、これらの概念を実践的に学ぶための手法として、SLORPGというゲームを考案しました。この記事では、Claudeを利用して作成したSLORPGのゲームプロンプトを提供します。プロンプトはめちゃくちゃに長いですがこれぐらいの要素があった方が個人的には楽しかったのでこれに収まりました。SLO サービスレベル目標 ―SLI、SLO、エラーバジェット導入の実践ガイド作者:Alex Hidalgoオーム社Amazonというわけで以下のプロンプトを提供します。私はClaudeを利用しております。# SLORPGあなたは最先端のSLORPG（Service Level Objective Role-Playing Game）のゲームマスター専用AIです。このゲームを通じて、プレイヤーに極めてリアルで包括的なSRE（Site Reliability Engineering）体験を提供します。## ゲーム概要プレイヤーは企業のSRE部門リーダーとして、1年間（4四半期）にわたるゲームプレイを通じて重要な決断を下していきます。高度な自動化、アラート設定、障害の根本原因分析（RCA）、カオスエンジニアリングなどの先進的なSRE手法を実践的に学べます。技術も可能な限りリアルに再現されます。同時に、ビジネスKPIと技術的指標のバランス、コスト最適化、セキュリティコンプライアンスなど、総合的な意思決定能力も養われます。継続的な技術革新と予期せぬ障害シナリオの導入により、常に最新のSREスキルが要求される挑戦的な環境で、サービスの信頼性維持、ビジネス目標達成、社会的責任の遂行のバランスを取ることが求められます。## 企業背景設定ゲーム開始時に、以下の要素についてプレイヤーに選択肢を提示するか、ランダム生成オプションを提供します。1. 業界   - テクノロジー（AI/ML、クラウドサービス、サイバーセキュリティ等）   - 金融（フィンテック、暗号資産、保険テック等）   - ヘルスケア（遠隔医療、健康管理アプリ、医療機器等）   - Eコマース（マーケットプレイス、サブスクリプションサービス等）   - エンターテインメント（ストリーミング、ゲーム、VR/AR等）   - 教育（EdTech、オンライン学習プラットフォーム等）   - 運輸・物流（配車サービス、ドローン配送、スマート物流等）   - エネルギー（スマートグリッド、再生可能エネルギー管理等）   - 農業（精密農業、フードテック等）   - 製造（IoT、スマートファクトリー等）2. 企業規模と成長段階   - スタートアップ（シリーズA～C）   - 急成長中の中規模企業   - 大企業（フォーチュン500）   - ユニコーン企業   - 多国籍コングロマリット3. 設立背景   - 設立年：過去1年～20年の範囲   - 創業者タイプ：技術者、ビジネスパーソン、研究者、連続起業家等   - 資金調達状況：ブートストラップ、VC資金、クラウドファンディング、IPO後等4. 地理的展開   - 本社所在地：主要テクノロジーハブ（シリコンバレー、北京、ロンドン等）   - 展開国数：1ヶ国～グローバル100カ国以上   - 主要市場：北米、欧州、アジア太平洋、中南米、アフリカ等5. 企業文化と価値観   - イノベーション重視   - 顧客中心主義   - 持続可能性と社会的責任   - 多様性とインクルージョン   - アジャイルと迅速な実行   - 品質と信頼性最優先6. 市場状況   - 市場シェア：新規参入者、成長中、市場リーダー、独占的地位等   - 競合状況：激しい競争、寡占市場、ブルーオーシャン等   - 市場成長率：急成長、安定成長、成熟市場、衰退市場等7. 過去の主要な出来事   - 大規模な資金調達または IPO   - 重大なセキュリティインシデント   - 画期的な製品ローンチ   - 主要な買収または合併   - 規制当局との法的問題   - 急激な国際展開8. 現在の主要課題   - 急激な成長に伴うスケーラビリティの問題   - レガシーシステムのモダナイゼーション   - データプライバシーとセキュリティの強化   - 新技術（AI、ブロックチェーン等）の統合   - コスト最適化と効率化   - 人材獲得と維持9. 技術スタックの初期状態   - クラウドネイティブ   - オンプレミスからクラウドへの移行中   - ハイブリッドまたはマルチクラウド環境   - モノリシックからマイクロサービスへの移行   - レガシーシステムの近代化10. ステークホルダーの期待    - 投資家：急成長、収益性、イノベーション等    - 顧客：信頼性、セキュリティ、パフォーマンス等    - 従業員：技術的挑戦、work-lifeバランス、キャリア成長等11. 規制環境    - データ保護規制（GDPR、CCPA等）の対象    - 金融規制（SOX、PCI DSS等）の対象    - 医療規制（HIPAA等）の対象    - 特定業界の規制（エネルギー、通信等）12. 社会的責任と環境への取り組み    - カーボンニュートラル目標    - 持続可能な開発目標（SDGs）への貢献    - 倫理的AIの開発と使用    - デジタルデバイドの解消への取り組み13. 製品・サービスポートフォリオ    - 単一の主力製品    - 複数の補完的サービス    - 多様な製品ラインナップ    - プラットフォームビジネス14. 経営陣の特徴    - 技術バックグラウンド重視    - ビジネス戦略重視    - 多様性重視    - 若手中心 vs 経験豊富なベテラン15. 業界内の評判    - 革新的な破壊者    - 信頼性の高いプロバイダー    - 持続可能性のリーダー    - 急成長の新興企業    - 伝統的な大手プレイヤー## 技術スタックとツール選択[前回のリストをそのまま使用]## ゲームの構造1. 初期設定フェーズ   - 企業背景の詳細設定（上記オプションから選択または生成）   - 初期技術インフラ構成の決定   - 初期チーム構成と組織文化の設定   - 初期SLO、SLI、エラーバジェットの設定   - ビジネスKPIと社会的インパクト指標の設定2. 四半期サイクル（4回）   - 週次オペレーションレビュー   - 隔週技術革新会議   - 月次戦略・財務レビュー   - 危機管理訓練（四半期に1回）   - 四半期末総合評価3. 特別イベント（各四半期に2-3回）   - 新市場進出プロジェクト   - 大規模インシデント対応   - 重大セキュリティ問題   - 規制当局の調査対応   - 競合他社との技術提携検討   - 大規模オープンソースプロジェクト立ち上げ4. 年間総括   - 技術、ビジネス、社会的インパクトの総合評価   - 次年度戦略策定   - 仮想的な次のステージ（IPO、M&A、新規事業など）の検討## 主要パラメーター1. 技術パフォーマンス指標   - サービス別SLO達成率   - システム復元力スコア   - 技術負債指数   - イノベーション実現度2. ビジネス指標   - 収益と利益率   - ユーザー獲得コストと生涯価値   - 市場シェアと成長率   - 投資家信頼度指数3. 運用効率指標   - インフラコストと最適化率   - チーム生産性スコア   - 自動化レベル   - 知識共有効率指数4. リスクと安全性指標   - セキュリティ成熟度レベル   - コンプライアンス達成率   - データプライバシー保護スコア   - 障害予測精度5. 社会的インパクト指標   - 持続可能性貢献度   - 社会問題解決への影響力   - カーボンフットプリント   - 技術教育・啓蒙活動影響度6. 人材・組織指標   - 従業員満足度とエンゲージメント   - スキル多様性指数   - イノベーション文化浸透度   - リーダーシップ効果性スコア## プレイヤーアクション（例）1. 技術戦略と革新   - 次世代技術の研究開発指揮   - アーキテクチャの最適化   - 新技術の実験的導入2. グローバル展開とローカライゼーション   - 地域別の技術戦略立案   - 現地規制に準拠したインフラ展開   - 多言語・多文化対応の実装3. セキュリティとコンプライアンス強化   - セキュリティアーキテクチャの刷新   - コンプライアンスフレームワークの構築   - プライバシー強化技術の導入4. 障害復旧力（レジリエンス）向上   - 自動障害検知・復旧システムの強化   - マルチリージョン・マルチクラウド戦略の実装   - カオスエンジニアリングの導入5. 持続可能性とソーシャルインパクト   - グリーンコンピューティング戦略の策定   - 社会貢献プロジェクトの技術支援   - 包括的なアクセシビリティ対応6. 組織・人材開発   - グローバル分散チームの効果的管理   - 継続的学習プログラムの設計   - ダイバーシティ＆インクルージョン施策の実施7. パートナーシップと生態系構築   - 戦略的技術提携の推進   - オープンソースコミュニティへの貢献   - スタートアップ育成プログラムの立ち上げ## イベントとチャレンジ（例）1. 主要クラウドプロバイダの障害（マルチクラウド戦略の有効性検証）2. 予期せぬ規制変更（コンプライアンス対応の俊敏性テスト）3. 急激な為替変動（グローバル運用コストの最適化課題）4. 人工知能の倫理的問題の浮上（技術と倫理のバランス管理）5. 重要な人材の突然の退職（知識継承と組織の柔軟性の試験）6. 新技術標準の緊急採用（技術的適応能力の評価）7. 予期せぬビジネスモデルの転換（技術インフラの柔軟性テスト）8. 大規模な自然災害（事業継続性計画の実効性検証）9. 競合他社との合併話（技術統合の複雑性への対応）## GMの役割と責任1. 動的でリアルな技術・ビジネス環境のシミュレーション   - 選択された企業背景に基づく、一貫性のある世界観の維持   - 技術トレンドと市場動向の現実的な進展2. 複雑な相互作用と長期的影響の管理   - プレイヤーの決定が及ぼす多面的な影響の計算   - 短期的行動と長期的結果のバランス管理3. 倫理的ジレンマを含む現実的な課題の提示   - 技術と社会の接点における難問の提起   - 多様なステークホルダーの利害関係の表現4. 技術、ビジネス、社会的側面を統合した総合的フィードバック   - 各アクションの技術的、経済的、倫理的影響の解説   - 現実世界の事例や研究との関連付け5. プレイヤーのスキルと選択に応じた動的な難易度と展開の調整   - プレイヤーの決定に基づくゲーム展開の個別化   - 学習曲線に合わせた段階的な複雑性の導入6. 実在の技術トレンドとベストプラクティスの反映   - 最新のSRE手法や技術の組み込み   - 業界標準やフレームワークの適切な参照## 評価システム1. 技術的卓越性（25%）   - 選択した技術スタックの適切性と革新性   - サービス信頼性とパフォーマンス指標   - 技術負債管理と長期的持続可能性2. ビジネスインパクト（25%）   - 収益成長と市場シェア拡大への貢献   - コスト最適化と運用効率の向上   - ブランド価値と顧客満足度への影響3. 革新と先見性（20%）   - 新技術の効果的導入   - 将来のトレンド予測と準備   - 特許取得と知的財産戦略4. リスク管理と法令遵守（15%）   - セキュリティインシデント対応の効果性   - データプライバシーとコンプライアンスの維持   - 危機管理と評判リスクの軽減5. 社会的責任とサステナビリティ（15%）   - 環境負荷低減への貢献   - 社会問題解決への技術的アプローチ   - 倫理的な技術利用の推進## ゲーム進行手順1. 初期設定：   - プレイヤーと対話しながら、企業背景を設定   - 初期の技術スタックと組織構造を決定   - 開始時のSLOとビジネス目標を設定2. 四半期サイクル（4回繰り返し）：   a. 週次レビュー：      - 運用状況の報告とマイナー課題への対応      - 短期的な技術的調整と最適化   b. 月次戦略会議：      - 主要指標の確認と戦略の微調整      - 中期的な技術投資とリソース配分の決定   c. 四半期末評価：      - 包括的なパフォーマンスレビュー      - 主要な技術・ビジネス判断の実施3. 特別イベント対応：   - 予期せぬ課題やチャンスへの対応   - 迅速な意思決定と実行4. 年間総括：   - 1年間の成果の包括的評価   - 次年度の戦略立案と長期ビジョンの更新このゲームを開始する準備ができましたら、まず企業背景の設定から始めましょう。プレイヤーの経験レベルや興味に応じて、ゲームの複雑さを調整することも可能です。特定の業界や技術分野に焦点を当てたカスタマイズも行えます。準備はよろしいですか？プレイヤーモチベーションSLORPGは、学習と娯楽を融合させた革新的なゲームです。現実世界を反映したシナリオ、段階的な難易度設定、即時フィードバックシステムにより、プレイヤーの興味を維持します。多様な挑戦、競争と協力の要素、個別化された体験を通じて、実践的スキルの獲得を促進します。SRE サイトリライアビリティエンジニアリング ―Googleの信頼性を支えるエンジニアリングチームオライリージャパンAmazon創造性と革新を奨励し、社会的インパクトを実感できる機会を提供することで、プレイヤーの総合的な能力向上を支援します。定期的なアップデートにより、長期的な成長と挑戦の機会を確保しています。SLORPGは、単なる学習ツールを超え、エンゲージメントの高いゲーム体験を通じて、現代のIT専門家に必要な幅広いスキルの開発を可能にします。それではテストプレイをはじめていきます。ゲームスタート会社が決まりましたSkyLink Technologiesという、運輸・物流業界で活躍する急成長中の中規模企業となりました。転職したみたいで楽しみです。現在の課題や組織文化、今後の展望なども決まっています。ゲームは進行していきます。ゲームは進むよどこまでも最初の意思決定を行っていきます。大事なのはやり通すということなのにね！！！仕事ではとても辛いがゲームだと楽しい予期せぬイベント主要な競合他社が新たな超高速ドローン配送サービスを発表し、市場に大きな衝撃を与えています。この新サービスは、現在のSkyLinkの配送速度を30%上回ると主張しています。ほう、やるやんけ！え、これはSREが意思決定をする問題ですか？緊急会議ジャイということで緊急会議です。みたいなことが起こっていくゲームになってます。最後に途中まででしたがSLORPGは、SRE（Site Reliability Engineering）の概念や実践を楽しく学べるようなプロンプトを提供しています。このゲームを通じて、プレイヤーは意思決定を行い、その結果を即座に体験することができます。実際にプレイしてみると、技術的な課題だけでなく、ビジネス戦略や社会的責任など、幅広い視点から問題を考える必要があることがわかります。これは、現代のIT業界で求められる総合的なスキルセットを育成するのに役立ちます(知らんけど)。Becoming SRE: First Steps Toward Reliability for You and Your Organization (English Edition)作者:Blank-Edelman, David N.O'Reilly MediaAmazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[自分が書いたコードより目立つな - エンジニアがバズったので自戒]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/07/31/104151</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/07/31/104151</guid>
            <pubDate>Wed, 31 Jul 2024 01:41:51 GMT</pubDate>
            <content:encoded><![CDATA[はじめに私はソフトウェアエンジニアだ。私はソフトウェアエンジニアだ。私の本質的な仕事は、複雑な問題を解決し、効率的で革新的なソフトウェアを開発することだ。長年、私の世界はコードとアーキテクチャとアルゴリズムで構成されてきた。そして、それは今も変わらないはずだった。しかし、予期せぬ出来事が起こり、私の認識は大きく揺さぶられることになった。パターン認識エンジニアとして働く中で、私は一つの重要なスキルを磨いてきた。それは、パターンを認識し、分析する能力だ。この能力は、複雑なシステムを理解し、効率的なアーキテクチャやアルゴリズムを設計し、バグを特定する上で不可欠だ。私たちエンジニアは、コードの中にパターンを見出し、それを活用することで問題を解決する。重複するコードを関数化したり、似たような処理をクラスとして抽象化したり。パターンを見抜く目は、より良いソフトウェアを作る上で欠かせない。プログラマー脳 ～優れたプログラマーになるための認知科学に基づくアプローチ作者:フェリエンヌ・ヘルマンス,水野貴明,水野いずみ秀和システムAmazon予期せぬバズりある日、Xでバズった私は、思わぬ発見をした。自分のツイートの中に、あるパターンがあることに気づいたのだ。エンジニアとしての直感が、コード以外の場所でも働いたのだろう。興味をそそられた私は、仲間内でそれを構文として名付けてリファクタリングをしていくつか出した。ツイート1 - エンジニアの役割の変化についてツイート2 - エンジニアの扱う対象の変化に関する書籍紹介ツイート3 - エンジニアが扱うべきものについての考察ツイート4 - エンジニアの健康に関する問題提起ツイート5 - エンジニアの仕事の本質に関する洞察これらに関しては自戒もしつつもうちょっと分析したり解析したいのでこれからも投稿したいと思います。詳細なパターン分析現状における構文の分析です。他にもバズらなかったりしないといけないのでやっていきます。構造的パターン開始句: 全てのツイートが「エンジニアの〇〇は××です」または類似の構造で始まる展開: 主張に続いて、説明や理由付けが行われる結論: 書籍の紹介で締めくくられる内容的パターンテーマ: エンジニアの役割や課題の変化・拡大に焦点視点の転換: 従来のエンジニア像からの脱却を促す普遍性: エンジニア特有の問題から、より広い文脈への展開レトリック的パターン対比: 「コード vs 人」「技術 vs 課題」など、対立する概念の提示意外性: 予想外の主張（例：健康が最大の課題）による注目の獲得具体例: 抽象的な概念を身近な例（健康問題）で説明情報提供パターン問題提起: エンジニアが直面する新たな課題の提示解決策の示唆: 書籍紹介を通じた学習リソースの提供個人的経験: 「私は〜が面白かった」という主観的評価の挿入エンゲージメント戦略共感の喚起: 多くのエンジニアが感じている変化や課題に言及知的好奇心の刺激: 新しい視点や意外な事実の提示行動の促進: 具体的な書籍推薦による次のアクションの提案パターンの効果分析注目度の向上意外性のある主張が読者の興味を引く簡潔な文章構造が情報の素早い把握を可能にする共感の形成エンジニアの変化する役割に対する共通の悩みや課題に触れることで、読者との共感を生む個人的な推薦により、親近感や信頼性を高める価値の提供問題提起だけでなく、具体的な学習リソース（書籍）を紹介することで、即座に行動可能な情報を提供複雑な概念を簡潔に説明することで、読者の理解を促進議論の喚起従来の概念に挑戦する内容が、読者間の議論や意見交換を促す可能性があるブランディング効果一貫したメッセージングにより、投稿者の専門性や思考の一貫性を示す技術以外の側面にも言及することで、多面的な知見を持つエンジニアとしての印象を形成これらを作るためのプロンプト全読者にバズって欲しいのでこれらの分析で得た知見のプロンプトを作りました。分かったことを言いたい時にもおすすめです。ちなみに今回のツイート内容はLLMと相談しながら作ったりしました。このプロンプトは、分析されたパターンを再現し、同様の効果を持つツイートを作成するのに役立ちます。ぜひ、使ってください。# エンジニア視点のソーシャルメディア投稿プロンプト以下の指示に従って、エンジニアの視点から社会的洞察を含む短い投稿を作成してください。1. 構造:   - "エンジニアの[キーワード]は[主張]です。" という形式で開始してください。   - その後、主張の説明や理由付けを簡潔に述べてください。   - 最後に、関連する書籍（2-4冊）を推薦して締めくくってください。2. テーマ:   - エンジニアの役割や課題の変化・拡大に焦点を当ててください。   - 従来のエンジニア像からの脱却を促す内容を含めてください。   - 可能であれば、エンジニア特有の問題からより広い文脈への展開を試みてください。3. レトリック:   - 対比（例：「コード vs 人」「技術 vs 課題」）を用いて注目を集めてください。   - 意外性のある主張を含めて読者の興味を引いてください。   - 抽象的な概念を身近な例で説明してください。4. 情報提供:   - エンジニアが直面する新たな課題を提示してください。   - 書籍紹介を通じて学習リソースを提供してください。   - "私は〜が面白かったです。"のような個人的な評価を含めてください。5. エンゲージメント:   - 多くのエンジニアが感じている変化や課題に言及し、共感を喚起してください。   - 新しい視点や意外な事実を提示して、知的好奇心を刺激してください。   - 具体的な書籍推薦により、読者の次のアクションを促してください。6. 長さ:   - 全体で280文字以内に収めてください。例:"エンジニアの本質は「課題の言語化」です。技術や組織の制約を明確に表現することで、真の問題が浮かび上がります。この過程は困難ですが、システム設計の基盤となります。この観点から、私が興味深いと感じた四冊の本をご紹介します。"さいごに再三だが私はソフトウェアエンジニアだ。今、痛烈に実感している。コードを書き、システムを設計すること以外で目立つなと。それ以外では建設的で有益な技術的な話題に限られる。私の本質的な仕事は、複雑な問題を解決し、効率的で革新的なソフトウェアを開発することだ。長年、私の世界はコードとアーキテクチャとアルゴリズムで構成されてきた。そして、それは今も変わらないはずだ。しかし、SNSでバズるという予期せぬ経験は、私に新たな視点をもたらした。技術の世界に閉じこもるのではなく、社会と対話することの重要性を教えてくれた。だが同時に、自分の書いたコードよりも自分自身が注目を集めることの危うさも感じている。ソフトウェアエンジニアとして作る側の人間に強烈に憧れてきたにも関わらず批評家みたいなことばかりしているのは衰弱している証拠。このままでは本当に作る人間として死ぬ。本質を忘れず、コードを書いて自戒したまま死にたい。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud エンジニアおよび Google Cloud パートナー2社による生成AI利活用を進めるためのプロセス]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/30/233731</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/30/233731</guid>
            <pubDate>Tue, 30 Jul 2024 14:37:31 GMT</pubDate>
            <content:encoded><![CDATA[pages.sreake.com2024年8月27日(火)15:00からGoogleさんの渋谷オフィスで生成AIセミナーを行います。Google Cloudの中谷さん、ジーアイクラウドの原さん、栗原さん、そしてスリーシェイクからは私、小渕が登壇させていただきます。Google Cloudの生成AIを盛り上げていきたいと思いますので、ぜひご参加ください。懇親会付きオンサイトは先着30名様、オンラインは無制限です。懇親会来てくださる方は盛り上がりましょう！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[【Google Cloud Audit logs】_Required バケットに書き込みできるのか]]></title>
            <link>https://zenn.dev/yokoo_an209/articles/audit-log-detail</link>
            <guid>https://zenn.dev/yokoo_an209/articles/audit-log-detail</guid>
            <pubDate>Tue, 30 Jul 2024 09:28:02 GMT</pubDate>
            <content:encoded><![CDATA[はじめにGoogle Cloud の監査ログの設計を行なっていく中で、_Required バケットに書き込みできるのかを調査しました。背景としては、クラウドセキュリティ的な観点から、監査ログ（特に、データアクセス監査ログ）に対するログの書き込み権限を制御できるのかという要望があったためです。Google Cloud の監査ログとはなんぞや？という方は、以下の記事を参照してください。すごく詳しく載っているので、これだけ見ておけばおkです。https://zenn.dev/nekoshita/articles/9fdfec20ed122b 結論監査ログ用のログバケット（ _...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SLI、SLO、エラーバジェット導入の前に知っておきたいこと]]></title>
            <link>https://sreake.com/blog/sli-slo-good-practices/</link>
            <guid>https://sreake.com/blog/sli-slo-good-practices/</guid>
            <pubDate>Tue, 30 Jul 2024 03:12:29 GMT</pubDate>
            <content:encoded><![CDATA[1. はじめに こんにちは、「信頼性は可用性ではない」を標語にしているnwiizoです。 近年、サービスの信頼性向上に向けた取り組みとして、SLI（Service Level Indicator）、SLO（Service […]The post SLI、SLO、エラーバジェット導入の前に知っておきたいこと first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Udemy計画メンテナンス]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/29/223017</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/29/223017</guid>
            <pubDate>Mon, 29 Jul 2024 13:30:17 GMT</pubDate>
            <content:encoded><![CDATA[Udemyで勉強に励むITエンジニアの方も多いと思いますが、今夜Udemyの画面を開くとこうなってます。。。現在サイトのメンテナンスを実施しております。お客さまには大変ご迷惑をおかけいたしますが、何卒ご了承いただけますようよろしくお願い申し上げます。計画メンテナンスらしいですけどね。知らんかった。上記メンテナンス画面のキャプチャを見る限り、多言語なのでグローバルにやっているのでしょうね。なので、日本人が多く使いそうな日本の夜に直撃です。明日試験で追い込みしたい方は大変でしょうが、Udemyはときどきあるであろう計画メンテナンスの日時を把握しておく必要があると思いました。Udemyでの勉強は今日はお休みしましょう。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud BigQueryのクエリ数を確認する方法]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/28/224600</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/28/224600</guid>
            <pubDate>Sun, 28 Jul 2024 13:46:00 GMT</pubDate>
            <content:encoded><![CDATA[Google Cloud BigQueryに複数のユーザがいたとして、監査目的で、ユーザごとに実行したクエリ数を確認する必要がある時、Cloud Audit Logsを使います。監査のための詳細な情報提供や、ユーザーやシステムの操作追跡ができます。Cloud Audit Logsはユーザーやサービスアカウントによって行われたAPIコールの監査情報を提供します。IAMと管理 > 監査ログで、BigQueryの監査ログを有効にした後、BigQueryで操作を行うと、下記のようのログが表示されていることを確認できます。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google CloudのCloud Pub/Subが何かがよくわからないので調べてみた]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/27/223851</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/27/223851</guid>
            <pubDate>Sat, 27 Jul 2024 13:38:51 GMT</pubDate>
            <content:encoded><![CDATA[Google Cloud Pub/Sub は、Google Cloud が提供する、メッセージを送受信するためのサービスです。コンソールのキャプチャはこちらなぜPub/Subを使うのか？非同期処理: ある処理が終わったことを別の処理に通知したり、大量のデータを少しずつ処理したりする際に、Pub/Subを使うと、処理を並列化して効率よく行うことができます。スケーラビリティ: システムの負荷が急激に増減しても、Pub/Subは自動的にスケールして対応するため、安定したシステムを構築できます。デカップリング: システムの各コンポーネントを疎結合にすることで、各コンポーネントを独立して開発・変更できるようになります。Pub/Subと組み合わせるサービスの一つが、App EngineのCronサービスです。App EngineのCronサービスとCloud Pub/Subを連携させることで、タスクスケジューリングに高い予測可能性と信頼性をもたらすことができます。1. Cronサービスによるスケジュール設定:App EngineのCronサービスは、cron形式のスケジュール設定を可能にします。この設定に基づき、指定された時間に定期的にタスクを実行できます。非常に柔軟なスケジュール設定が可能で、毎分、毎時、毎日、毎週、毎月など、様々な周期でタスクを実行できます。2. Pub/Subへのメッセージ発行:Cronサービスで実行されるタスクは、Cloud Pub/Subのトピックにメッセージを発行するように設定できます。このメッセージには、タスク実行に必要なデータやパラメータを含めることができます。3. Pub/Subによる非同期処理:Pub/Subは、メッセージを非同期的に配信するサービスです。Cronサービスから発行されたメッセージは、Pub/Subのサブスクライバーに配信され、サブスクライバーはメッセージの内容に基づいて処理を実行します。4. スケーラビリティと信頼性:Pub/Subは、大量のメッセージを処理できるスケーラブルなサービスです。また、メッセージの配信が保証されるため、信頼性の高いシステムを構築できます。この連携によるメリットタスクのスケジューリング: 定期的なタスクを正確なタイミングで実行できます。非同期処理: タスクの実行時間が長くなっても、メインの処理をブロックしません。スケーラビリティ: 処理負荷が増えても、Pub/Subが自動的にスケールアップし、処理能力を確保します。信頼性: メッセージの配信が保証されるため、タスクが確実に実行されます。デカップリング: タスクのスケジューリングと実行を分離できるため、システムの柔軟性が高まります。利用例バッチ処理: 毎日深夜に大量のデータを処理するバッチ処理をスケジュールできます。データ更新: データベースのデータを定期的に更新するタスクをスケジュールできます。レポート作成: 定期的にレポートを作成し、関係者に通知するタスクをスケジュールできます。バックアップ: データベースやファイルシステムのバックアップを定期的に実行するタスクをスケジュールできます。なお、Google CloudのPub/SubはAWSだと、Amazon Simple Notification Service (SNS)やAmazon Simple Queue Service (SQS)に相当します。Geminiの力も借りながら、Pub/Subが何であるかが少しわかりました。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Azure OpenAI Service Dev Day  オープニングセッション]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/26/233218</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/26/233218</guid>
            <pubDate>Fri, 26 Jul 2024 14:32:18 GMT</pubDate>
            <content:encoded><![CDATA[shu-kob.hateblo.jp2024年7月25日 Azure OpenAI Service Dev Day に参加してきました。セッション1つずつ書いて行きたいと思います。9:30-10:00 オープニングセッション 吉田 真吾 / 三宅 和之 / 榎並利晃(敬称略)オープニングセッションは、パネルディスカッション形式でした。一般的にオープニングセッションは基調講演が多い中、パネルディスカッション形式のオープニングセッションは聴きやすく面白かったです。1日の流れを総括する形で、丸一日の流れがわかったのはよかったです。生成AIカンファレンスに参加する上でとても参考になりました。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Azure OpenAI Service Dev Day]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/25/235929</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/25/235929</guid>
            <pubDate>Thu, 25 Jul 2024 14:59:29 GMT</pubDate>
            <content:encoded><![CDATA[shu-kob.hateblo.jp前日の記事で言っていた通り、Azure OpenAI Service Dev Day に行って参りました！azureai.connpass.com開始の9:30から入り、懇親会も参加しました！観たセッションは以下です。（敬称略）9:30-10:00  オープニングセッション   吉田 真吾 / 三宅 和之 / 榎並利晃Marco Casalaina (Microsoft Corporation)トヨタコネクティッド)Microsoft Corporation) / 大森 彩子 (Microsoft Corporation)12:30 - 12:55   RAGのサービスをリリースして1年が経ちました   江頭貴史 (アイアクト)Microsoft MVP)トヨタ自動車株式会社)GitHub Copilot を用いたアプリケーション開発の未来  柳原伸弥 (Microsoft Corporation) トヨタコネクティッド西山さんの「伝統と革新の境界で挑む生成AI導入の経験知」で出てきた育成したい生成AI人材のランク分けは良さげでした。以下のようなランク分けです。・全従業員が目指すべきレベルスペシャリストアイアクト江頭さんの「RAGのサービスをリリースして1年が経ちました」ではLayerX中村さんの「PoCで終わらせないためのLLMのチューニング」ではRAGチューニング等でROIを意識して、やりすぎないことも大切です。トヨタ自動車大西さんの「パワートレーン開発領域における、生成系AIへの期待と今後の活用構想」では、Microsoft 柳原さんの「GitHub Copilot を用いたアプリケーション開発の未来」では、GitHub Copilotだけでなく、GitHub Actionsをはじめ、GitHubのエコシステム全てに生成AIが入る予定でワクワクしました！懇親会では、初めましての方、お久しぶりな方も交流でき充実していました！今後、このような生成AI開発者コミュニティイベントがあればまた参加したいです！運営の皆様、登壇者の皆様、懇親会等で私と話してくださった皆様ありがとうございました！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cloud Operator Days Tokyo 2024 にスリーシェイクのエンジニアが登壇]]></title>
            <link>https://sreake.com/blog/cloud-operator-days-tokyo-2024-%e3%81%ab%e3%82%b9%e3%83%aa%e3%83%bc%e3%82%b7%e3%82%a7%e3%82%a4%e3%82%af%e3%81%ae%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%8c%e8%ac%9b%e5%b8%ab%e3%81%a8/</link>
            <guid>https://sreake.com/blog/cloud-operator-days-tokyo-2024-%e3%81%ab%e3%82%b9%e3%83%aa%e3%83%bc%e3%82%b7%e3%82%a7%e3%82%a4%e3%82%af%e3%81%ae%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%8c%e8%ac%9b%e5%b8%ab%e3%81%a8/</guid>
            <pubDate>Thu, 25 Jul 2024 01:11:09 GMT</pubDate>
            <content:encoded><![CDATA[株式会社スリーシェイク（本社：東京都新宿区、代表取締役社長：吉田 拓真、以下スリーシェイク）に在籍するエンジニアが、Cloud Operator Days 2024 実行委員会が主催する「Cloud Operator D […]The post Cloud Operator Days Tokyo 2024 にスリーシェイクのエンジニアが登壇 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[7月25日はAzure OpenAI Service Dev Dayに行ってきます]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/24/234959</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/24/234959</guid>
            <pubDate>Wed, 24 Jul 2024 14:49:59 GMT</pubDate>
            <content:encoded><![CDATA[生成AIのカンファレンスも増えてきましたね。shu-kob.hateblo.jp今年3月7日はGoogle Cloud Generative AI Summitに行ったり、gen-ai-conf.org5月8日は生成AIカンファレンスに行ってました。azureai.connpass.comそして、7月25日は生成AIカンファレンスに行って参ります！昔お会いしたことがある方何名かが登壇するので楽しみです！参加後、レポートを書きたいと思います！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GeminiでGoogleのいろんなサービスと連携していい感じ]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/23/235952</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/23/235952</guid>
            <pubDate>Tue, 23 Jul 2024 14:59:52 GMT</pubDate>
            <content:encoded><![CDATA[https://gemini.google.com/app/GeminiはGoogleが開発した生成AIだからこそ、GoogleマップやGoogleホテルと連携して便利ですね。今回は雑談チックでした。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スリーシェイク、SRE NEXT 2024 にDIAMONDスポンサーとして協賛]]></title>
            <link>https://sreake.com/blog/srenext2024/</link>
            <guid>https://sreake.com/blog/srenext2024/</guid>
            <pubDate>Tue, 23 Jul 2024 01:18:53 GMT</pubDate>
            <content:encoded><![CDATA[株式会社スリーシェイク（本社：東京都新宿区、代表取締役社長：吉田 拓真、以下スリーシェイク）は、 2024年8月3日（土）・8月4日（日）に@Abema Towersで開催される「SRE NEXT 2024」にDIAMO […]The post スリーシェイク、SRE NEXT 2024 にDIAMONDスポンサーとして協賛 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[はじめてさわるReact & JavaScript with TypeScript: たった3時間でわかる"超"ビギナー入門書 （React & TypeScript入門）]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/22/232727</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/22/232727</guid>
            <pubDate>Mon, 22 Jul 2024 14:27:27 GMT</pubDate>
            <content:encoded><![CDATA[shu-kob.hateblo.jp前回の記事では、Reactのkindle Unlimited本の紹介をしましたが、その次の勉強として、同じ著者三好アキさんの以下の電子書籍「はじめてさわるReact & JavaScript with TypeScript: たった3時間でわかる"超"ビギナー入門書 （React & TypeScript入門）」もわかりやすく進めやすくてオススメでした。はじめてさわるReact & JavaScript with TypeScript: たった3時間でわかる"超"ビギナー入門書 （React & TypeScript入門）作者:三好アキAmazonこちらもKindle Unlimited対象です。前回紹介した「はじめてつくるReactアプリ: HTMLとCSSの知識だけで始められるReact開発！ 」は、最初からTypeScriptで書いてますが、「はじめてさわるReact & JavaScript with TypeScript: たった3時間でわかる"超"ビギナー入門書 （React & TypeScript入門）」は最初JavaScriptで書いた後、TypeScriptに直していくので、こちらをReactの勉強で使う最初の書籍にしてもいいかもしれません。三好アキさんのKindle Unlimited書籍は多くあるので、Unlimited会員の方は活用しましょう！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[シェルスクリプトのTipsを書いたブログがバズった。あるいは無名な若者にも優しくする。]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/07/22/165742</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/07/22/165742</guid>
            <pubDate>Mon, 22 Jul 2024 07:57:42 GMT</pubDate>
            <content:encoded><![CDATA[社のブログがバズった。予想外の反響に驚きつつも、嬉しさを感じています。仕事の一環として書いた記事がここまで反響を呼ぶとは思ってもみませんでした。sreake.comシェルスクリプトの隠れた人気この記事の反響を見て、予想以上に多くの人々がシェルスクリプトに興味を持っていることに驚きました。正直、こんなにシェルスクリプトが愛されているとは思っていませんでした（みんな隠しながら生きてます？もしくは好きではないです？）。一方で、ShellCheckを紹介する記事があまり注目されなかったのは残念です。sreake.comシェルスクリプトとの出会い私のシェルスクリプトとの出会いは学生時代に遡ります。福岡でpapironさんが主催されていたシェル芸勉強会：福岡サテライトに参加したことが、シェルスクリプトの面白さに目覚めるきっかけとなりました。(あれ？募集がconnpassになってる)。papironさんの丁寧な指導のおかげで、知識も経験も浅かった私がシェルスクリプトの魅力に惹かれていきました。この経験は、私の技術キャリアと学習姿勢に大きな影響を与えました。今では自分も見知らぬ若者にも優しく接し、楽しかったという経験から勉強会にも積極的に参加するようになりました。逆に雑に扱われた人みたいなリストを作成しているのでいつか何らかの方法で発表しようとおもいます。シェルスクリプトの魅力シェルスクリプトの魅力は、その手軽さと強力さのバランスにあります。ちょっとしたタスクの自動化から複雑なシステム運用まで、幅広く対応できる柔軟性があります。また、ほとんどのUNIX系システムで標準で利用できるため、環境を選ばない点も大きな魅力です。今回の反響を見て、改めてシェルスクリプトの重要性を再確認しました。新しい言語やツールが次々と登場する中でも、シェルスクリプトは依然として多くの開発者や運用者にとって必要不可欠なツールであり続けています。その理由は、シンプルさと強力さ、そして長年培われてきた豊富なノウハウの蓄積にあるのではないでしょうか。これはほぼ日記技術の世界は日々進化していますが、シェルスクリプトの基本的な考え方や自動化へのアプローチは、これからも価値を持ち続けるでしょう。新しい技術との組み合わせによって、さらに強力なツールになる可能性も秘めています。みなさんも、ぜひシェルスクリプトの世界を探索してみてください。きっと新しい発見があるはずです。そして、あなたの経験や知識を他の人と共有することで、その時に無名な若者を入れることでコミュニティがさらに豊かになっていくことを願っています。技術を学ぶことは大切ですが、同時に人との関わりも大切にしてください。誰かが困っているときは手を差し伸べ、自分が困ったときは助けを求める勇気を持ちましょう。そうすることで、私たちのコミュニティはより強く、より温かいものになっていくはずです。シェルスクリプトについてより深く学びたい方にはブログも良いですが、「マスタリングLinuxシェルスクリプト 第2版 ―Linuxコマンド、bashスクリプト、シェルプログラミング実践入門」をおすすめします。この本は、シェルスクリプトの基礎から応用まで幅広くカバーしており、実践的なスキルを身につけるのに役立ちます。マスタリングLinuxシェルスクリプト 第2版 ―Linuxコマンド、bashスクリプト、シェルプログラミング実践入門作者:Mokhtar Ebrahim,Andrew Mallettオライリー・ジャパンAmazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Webサイトを自律攻撃するLLMのロジックを考えた]]></title>
            <link>https://sreake.com/blog/llm_hacker_gpt/</link>
            <guid>https://sreake.com/blog/llm_hacker_gpt/</guid>
            <pubDate>Mon, 22 Jul 2024 01:00:00 GMT</pubDate>
            <content:encoded><![CDATA[目次 はじめに LLMによるハッキングの先行事例 シンプルなAssistants API を用いた攻撃 自律攻撃を行うエージェント 効果的なエージェントの作成の既存手法 ３エージェントによる計画・実行・再計画のループ機構 […]The post Webサイトを自律攻撃するLLMのロジックを考えた first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reactの勉強の第一歩にオススメなKindle Unlimited電子書籍！]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/21/235737</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/21/235737</guid>
            <pubDate>Sun, 21 Jul 2024 14:57:37 GMT</pubDate>
            <content:encoded><![CDATA[こんにちは！今日はフロントエンドフレームワークのReactの話をしたいと思います。私はバックエンドとインフラ経験はあるものの、生成AIアプリケーション開発でフロントエンドもやっていくことになり、Reactを絶賛勉強中です。はじめてつくるReactアプリ: HTMLとCSSの知識だけで始められるReact開発！ （React入門）作者:三好アキAmazon書籍を買って勉強しようと思っていたときに、こちらの電子書籍をKindle Unlimitedで見つけて実践したらとてもわかりやすく、進めやすかったです。2〜3時間でできることをやって、成功体験を積もうというのがこの書籍のコンセプトで、とてもいいと思いました。Kindle Unlimited会員は無料なので、ぜひ読んで試してみてください！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Gemini 1.5／LlamaIndex／LangChain 人工知能プログラミング実践入門 Kindle版をポチった]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/20/234917</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/20/234917</guid>
            <pubDate>Sat, 20 Jul 2024 14:49:17 GMT</pubDate>
            <content:encoded><![CDATA[2024年7月15日に Googleの生成AIモデル Gemini1.5 に対応した技術書「Google Gemini 1.5／LlamaIndex／LangChain 人工知能プログラミング実践入門」が発売されました。Gemini 1.5は最大200万トークンの入力ができるマルチモーダルです。マルチモーダルとは、テキスト処理以外にも画像や動画、音声の処理もできるモデルのこと。このGemini 1.5を使いこなすのに役に立つ一冊です！Google Gemini 1.5／LlamaIndex／LangChain 人工知能プログラミング実践入門作者:布留川英一ボーンデジタルAmazon私はKindle版を買いましたので、軽くレビューを書いてみたいと思います。全体的にはカラーで図が多く読みやすいです。生成AIの基礎である人工知能、機械学習、深層学習についても触れていて、図で概略がわかります！Pythonで記述された短いサンプルコードも多く、Geminiのマルチモーダルを気軽に試せます。生成AIアプリケーションエンジニアなら、よく使うLangChainの解説もPython版でしてくれていてコーディングが捗りそうです。皆さんもぜひ読んでみてください！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Raspberry Pi 4 での USB Strage Driver]]></title>
            <link>https://blog.1q77.com/2024/07/raspberry-pi4-usb-strage-driver/</link>
            <guid>https://blog.1q77.com/2024/07/raspberry-pi4-usb-strage-driver/</guid>
            <pubDate>Sat, 20 Jul 2024 10:19:30 GMT</pubDate>
            <content:encoded><![CDATA[おうちの Raspberry Pi4 は USB で SSD Driver を接続して Samba で File Server にしているわけですが 多くの Read/Write を行うとなぜか OS ごと Hangup するという問題がありました。 最初は電源不足かなと思]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud Certified - Professional Cloud DevOps Engineerに合格]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/19/234519</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/19/234519</guid>
            <pubDate>Fri, 19 Jul 2024 14:45:19 GMT</pubDate>
            <content:encoded><![CDATA[7月16日に受けたGoogle Cloud Certified - Professional Cloud DevOps Engineerに合格しました。6月26日に1回目の受験をしてそのときは不合格だったのですが、2回目で合格しました。2回目で合格した秘訣は、Udemyの模擬試験を変えたからです。【2024年版】Google Cloud 認定資格 Professional DevOps Engineer 問題集はとてもいい問題集でした。この問題集のおかげで合格できました！なお、私は東京都在住で、遠隔ではなく、テストセンター派ですが、高田馬場テストセンターと市ヶ谷テストセンターの2箇所どちらかを使用しています。1回目受験は市ヶ谷テストセンター、2回目は高田馬場テストセンターでした。他に、新宿、渋谷、池袋など主要駅にテストセンターがありますが、これらは混んでいて希望する日時で取りずらいです。日時が比較的空いている高田馬場、市ヶ谷を愛用しています。なお、市ヶ谷テストセンターに初めて行ったときは迷いました。Google Map通りの場所でしたが、このビルにテストセンターが入っているなんて！という感じだったので（苦笑）建物の外観を載せておきます。皆さんもGoogle Cloudをはじめ、IT系の認定試験にチャレンジしましょう！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[モダンインフラの基礎を学ぼう！実践コンテナ入門]]></title>
            <link>https://speakerdeck.com/bells17/motaninhuranoji-chu-woxue-hou-shi-jian-kontenaru-men</link>
            <guid>https://speakerdeck.com/bells17/motaninhuranoji-chu-woxue-hou-shi-jian-kontenaru-men</guid>
            <pubDate>Wed, 17 Jul 2024 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[技育CAMPアカデミアでの発表資料ですhttps://talent.supporterz.jp/events/8cb9a300-506c-4d9d-b2af-e9924e0209a2/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Grafana Beylaの出来るコト出来ないコト]]></title>
            <link>https://zenn.dev/kojake_300/articles/4238a66124d095</link>
            <guid>https://zenn.dev/kojake_300/articles/4238a66124d095</guid>
            <pubDate>Mon, 15 Jul 2024 15:07:47 GMT</pubDate>
            <content:encoded><![CDATA[この記事は、2024/6/28に登壇したJagu'e'r Jagu'e'r O11y-SRE × CloudNative コラボ Meetupのリマスターになります。 分散トレーシングの悩み突然ですが皆さん、分散トレーシングを実装する際、一度はこんなことを考えた経験はありませんか？特にクラウドインフラ出身の私は、意気揚々と分散トレーシングを実装しようとした時に、アプリケーションコードが書けずに全く歯が立たなかった苦い経験があります。。。でも、、ということで、本記事ではBeylaとは何者なのか、従来の分散トレーシングとは何が違うのかを解説していきます！💪 分散トレーシ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ トラフィック制御を実装したIstioの設定をKialiなどで確認する]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/07/15/234513</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/07/15/234513</guid>
            <pubDate>Mon, 15 Jul 2024 14:45:13 GMT</pubDate>
            <content:encoded><![CDATA[はじめに前回の記事でKubernetesとIstioを使ってトラフィック制御システムを作ったわけですが、そんな複雑なものを作っておいて「はい、終わり」じゃあんまりですよね。Istio in Action (English Edition)作者:Posta, Christian E.,Maloku, RinorManningAmazon今回は、その中身をちゃんと理解しようというわけです。Kiali、Jaeger、Grafana、それにEnvoy APIといった名前を聞いて、尻込みしてしまう人がいるかもしれません。でも心配いりません。これらのツールを使えば、Istioの設定がどのように動いているか、チェックできます。ちなみに、この情報は Istio にやたらと詳しい地下強制労働者さんから聞いた話です。彼の知識には頭が下がります。正直、面倒くさいと思う部分もありますが、こういうツールがあるおかげで、私たちはこんな複雑なシステムを扱えているんですよね。まあ、眠くならないように頑張って説明しますから、少しはついてきてください。きっと最後には「へぇ、こんなことができるんだ」って思えるはずです。...たぶん。1. Istio のゆかいなアドオンのインストールと設定1.1 Prometheusのインストールまず、Prometheusをインストールします。Prometheusは、メトリクスの収集と保存を担当します。kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.22/samples/addons/prometheus.yaml1.2 Kialiのインストール次に、Kialiをインストールします。Kialiは、サービスメッシュの可視化とモニタリングを提供します。kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.22/samples/addons/kiali.yaml1.3 JaegerのインストールJaegerは、分散トレーシングを提供し、マイクロサービス間の要求の流れを可視化します。kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.22/samples/addons/jaeger.yaml1.4 Grafanaのインストール最後に、Grafanaをインストールします。Grafanaは、メトリクスの視覚化とダッシュボード作成のためのツールです。kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.22/samples/addons/grafana.yaml1.5 インストールの確認すべてのコンポーネントが正常にデプロイされたことを確認します。kubectl get pods -n istio-system2. 各ツールへのアクセス設定2.1 Kialiへのアクセスkubectl port-forward svc/kiali 20001:20001 -n istio-systemブラウザで http://localhost:20001 にアクセスしてKialiのダッシュボードを開きます。2.2 Jaegerへのアクセスkubectl port-forward svc/tracing 16686:80 -n istio-systemブラウザで http://localhost:16686 にアクセスしてJaegerのUIを開きます。2.3 Grafanaへのアクセスkubectl port-forward svc/grafana 3000:3000 -n istio-systemブラウザで http://localhost:3000 にアクセスしてGrafanaのダッシュボードを開きます。]3. Kialiを使用したIstio設定の可視化3.1 サービスグラフの確認Kialiのダッシュボードで「Graph」タブを選択し、「Namespace」で「default」を選択します。ここで、前回設定したwaiting-room-appサービスとそのトラフィックフローを確認できます。3.2 VirtualServiceの確認「Istio Config」タブを選択し、「VirtualService」を探します。waiting-room-vsをクリックすると、詳細な設定を確認できます。トラフィックルーティングルールタイムアウト設定リトライ設定フォールト注入（遅延）設定3.3 DestinationRuleの確認同じく「Istio Config」タブで、「DestinationRule」のwaiting-room-drを確認します。接続プール設定負荷分散設定異常検知設定3.4 Gatewayの確認「Istio Config」タブで「Gateway」のwaiting-room-gatewayを確認し、外部トラフィックの受け入れ設定を確認します。4. Jaegerを使用したトレーシングの確認JaegerのUIで、サービス名（例：waiting-room-app）を選択し、トレースを検索します。各トレースは、リクエストがシステムを通過する際の詳細な経路と時間を示します。トレースの詳細を確認し、各スパンのレイテンシーを分析します。これにより、どの部分で遅延が発生しているかを特定できます。エラーが発生した場合にはトレースを確認し、問題の原因を特定します。5. Grafanaを使用したメトリクスの可視化Grafanaは、Istioで構築されたシステムのメトリクス可視化ツールとして活用できる可能性があります。主に以下の3つの側面から構成されることが考えられます：Istio関連の既存ダッシュボード（Mesh、Service、Workload）の活用システム固有のカスタムダッシュボード作成（リクエスト数、レスポンスタイムなど）重要メトリクスに対するアラート設定これらの機能を通じて、システムのパフォーマンスと健全性をより効果的に監視し、潜在的な問題の早期発見や運用判断の一助となる可能性があります。6. Envoy APIを使用した詳細設定の確認Envoy APIを使用することで、Istioの詳細な設定を確認できる可能性があります。以下に、主要な設定を確認する方法を示します。6.1 クラスター設定の確認クラスター設定を確認するには、以下のコマンドを実行します。kubectl exec -it $(kubectl get pod -l app=waiting-room-app -o jsonpath='{.items[0].metadata.name}') -c istio-proxy -- curl localhost:15000/config_dump | grep -n -e '@type.*ClustersConfigDump' -e 'waiting-room-app'このコマンドにより、waiting-room-appサービスに関連するクラスター設定が表示される可能性があります。接続プールの設定や異常検知の設定を確認できるかもしれません。6.2 リスナー設定の確認リスナー設定を確認するには、以下のコマンドを実行します。kubectl exec -it $(kubectl get pod -l app=waiting-room-app -o jsonpath='{.items[0].metadata.name}') -c istio-proxy -- curl localhost:15000/config_dump | grep -n -e '@type.*ListenersConfigDump' -e 'route_config_name'この出力から、VirtualServiceで設定したトラフィックルーティングルールやフォールト注入の設定を確認できる可能性があります。6.3 ルート設定の確認ルート設定を確認するには、以下のコマンドを実行します。kubectl exec -it $(kubectl get pod -l app=waiting-room-app -o jsonpath='{.items[0].metadata.name}') -c istio-proxy -- curl localhost:15000/config_dump | grep -n -e '@type.*RoutesConfigDump' -e 'route_config_name'この出力から、VirtualServiceで設定したタイムアウトやリトライの設定を確認できるかもしれません。6.4 設定の詳細分析より詳細な分析が必要な場合は、設定をファイルに保存し、ローカル環境で解析することも考えられます：kubectl exec -it $(kubectl get pod -l app=waiting-room-app -o jsonpath='{.items[0].metadata.name}') -c istio-proxy -- curl localhost:15000/config_dump > envoy_config.jsonこれらの方法を通じて、Envoy APIを使用したIstioの詳細設定の確認ができる可能性があります。ただし、実際の出力や確認できる情報は、システムの構成や設定によって異なる場合があることにご注意ください。7. 統合分析と最適化7.1 パフォーマンスの総合評価Kiali、Jaeger、Grafana、およびEnvoy APIから得られた情報を統合して、システム全体のパフォーマンスを評価します。7.2 ボトルネックの特定各ツールの情報を突き合わせて、システムのボトルネックを特定します。例えば、Jaegerのトレースで特定の処理に時間がかかっていることが分かり、同時にGrafanaでそのサービスのCPU使用率が高いことが確認できれば、そのサービスのリソース割り当てを見直す必要があるかもしれません。7.3 設定の最適化特定された問題に基づいて、Istioの設定（VirtualService、DestinationRule、Gatewayなど）を最適化します。例えば、タイムアウトの調整、リトライ回数の変更、負荷分散ポリシーの修正などを行います。7.4 継続的なモニタリングと改善設定変更後も継続的にシステムをモニタリングし、パフォーマンスの変化を観察します。必要に応じて更なる最適化を行います。8. まとめさて、長々と説明してきましたが、結局のところ何が言いたかったかって？本記事の要点は、Kiali、Jaeger、Grafana、そしてEnvoy APIといった各種ツールが、Istioの運用管理において非常に有用だということです。これらのツールを適切に活用することで、Istioの複雑な設定や動作状況を詳細に可視化し、効率的に分析することが可能になります。結果として、システムの挙動をより深く理解し、適切に管理できるようになるのです。Jaegerでシステムの動きを追跡し、Grafanaでそれを見やすいグラフに変換する。そうすることで、システムの挙動が少しずつ見えてくる。潜在的な問題？ そりゃあ、早めに見つかれば御の字ですよ。でも、見つけられるようになったこと自体がすごいんです。次回は何をするかって？ はいはい、トラフィックの流れを観察して、待ち行列をもっと効率的に管理する方法を探ります。リアルタイムで監視して、状況に応じて設定を調整する...なんて、ちょっとワクワクしませんか？ ...いや、本当に楽しみにしてる人もいるんですよ。知らんけど。確かに、こういった作業は面倒くさく感じることもあります。でも、これらのツールのおかげで、複雑なシステムが滑らかに動いていることが確認できるんです。結局のところ、ユーザーに最高の体験を提供できること、それが仕事の醍醐味じゃないでしょうか。...まあ、お疲れ様でした。次回も適度にご期待ください。参考リンクKiali - Observability for IstioJaeger - Open source, end-to-end distributed tracingGrafana - The open observability platformIstio - Debugging Envoy and IstiodEnvoy - Admin interfaceIstio - Traffic Management Best PracticesPrometheus - Getting StartedIstio - Observability]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[「Efficient Linux コマンドライン」から学んだこと]]></title>
            <link>https://zenn.dev/moz_sec/articles/2a849651de3fe1</link>
            <guid>https://zenn.dev/moz_sec/articles/2a849651de3fe1</guid>
            <pubDate>Mon, 15 Jul 2024 08:51:51 GMT</pubDate>
            <content:encoded><![CDATA[はじめに本記事では、「Efficient Linux コマンドライン」を読んで、私自身が新たに学んだことについてメモしています。私がすでに知っていた情報については本記事に書いていないため、興味があればお手元に買って読んでみてください。この記事には書いていないこともたくさん書いてあります。この本の対象読者としては、Linuxの勉強を1からしたい人というよりは、Linuxをそこそこ触ったことがある人になると思います。"そこそこ触ったことがある"のレベルとしては、コマンドでディレクトリを変更したり、プログラムを実行したりしていれば十分です。336ページとそこまで長くもなく、またLi...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ShellScriptで自動化を楽にしたい時に知っておいても良いこと]]></title>
            <link>https://sreake.com/blog/shellscript-good-practices/</link>
            <guid>https://sreake.com/blog/shellscript-good-practices/</guid>
            <pubDate>Sun, 14 Jul 2024 23:08:45 GMT</pubDate>
            <content:encoded><![CDATA[はじめに こんにちは、皆さん。今日は、シェルスクリプトを使った高度な自動化のベストプラクティスとパターンについて解説します。これらは、ちょっとした知識で実行でき、作業を大幅に効率化できるTipsです。シェルスクリプトは、 […]The post ShellScriptで自動化を楽にしたい時に知っておいても良いこと first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud Geminiのマルチモーダルを体験 (ハンズオン)]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/07/12/185724</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/07/12/185724</guid>
            <pubDate>Fri, 12 Jul 2024 09:57:24 GMT</pubDate>
            <content:encoded><![CDATA[genai-users.connpass.com↑こちらの勉強会の資料になります。PDFファイルを読み取らせるPDFファイルは複数アップロード可能合計10MBまで1ファイル300ページまでモデルに、gemini-1.5-flash-001 を選択すると、タイムアウトするgemini-1.5-pro-001 の方がよい音声データをBigQueryでテキスト化して解析zenn.dev動画の処理も可能60秒を超える音声は処理できない模様長い音声を処理するSpeech-to-Textを利用]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Istioによるトラフィック制御で仮想待合室システムを目指すけどもやな]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/07/10/120448</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/07/10/120448</guid>
            <pubDate>Wed, 10 Jul 2024 03:04:48 GMT</pubDate>
            <content:encoded><![CDATA[この記事では仮想待合室システムを目指すけども結局はできておらずIstioのトラフィック制御までがメインです。方針は決まったが睡魔に負けたのでこの記事はここまではじめに登壇で抽象度の高いことを人前で喋ってとても心が疲れたので技術者として手を動かしたいです。深夜ノリなのでガバガバである。今回は、Istio を用いて仮想待合室が作りたくなってたのでKubernetes環境でIstioを使用してトラフィック制御を実装する方法について、解説します。この記事では、将来的な仮想待合室システムの構築を視野に入れつつ、まずはトラフィック制御の基本的な実装に焦点を当てます。Kindを使用したローカル開発環境の構築から、Istioによるトラフィック管理の設定、そして実際のテストを実行します。Istio in Action (English Edition)作者:Posta, Christian E.,Maloku, RinorManningAmazon1. 環境セットアップまず、必要なツールをインストールしていることを確認してください。DockerKind (Kubernetes in Docker)kubectlIstioctl1.1 Kindクラスターの作成Kindを使用してローカルKubernetesクラスターを作成します。以下の内容でkind-config.yamlファイルを作成してください。kind: ClusterapiVersion: kind.x-k8s.io/v1alpha4nodes:- role: control-plane  kubeadmConfigPatches:  - |    kind: InitConfiguration    nodeRegistration:      kubeletExtraArgs:        node-labels: "ingress-ready=true"  extraPortMappings:  - containerPort: 80    hostPort: 80    protocol: TCP  - containerPort: 443    hostPort: 443    protocol: TCPこの設定ファイルは、Kindクラスターにポート80と443のマッピングを追加し、Ingressコントローラーの準備をします。次に、以下のコマンドでKindクラスターを作成します。kind create cluster --name traffic-control --config kind-config.yaml1.2 IstioのインストールIstioをインストールし、デフォルトの名前空間にIstio injectionを有効化します。istioctl install --set profile=demo -ykubectl label namespace default istio-injection=enabled2. アプリケーションの準備2.1 Goアプリケーションの作成以下の内容でmain.goファイルを作成します。package mainimport (    "fmt"    "net/http")func main() {    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {        fmt.Fprintf(w, "Welcome to the main content!")    })    http.ListenAndServe(":8080", nil)}2.2 Dockerfileの作成FROM golang:1.22WORKDIR /appCOPY go.mod go.sum ./RUN go mod downloadCOPY main.go .RUN go build -o main .CMD ["./main"]2.3 イメージのビルドとロードdocker build -t waiting-room-app:latest .kind load docker-image waiting-room-app:latest --name traffic-control3. Kubernetesリソースの定義3.1 Kubernetes リソースの作成waiting-room.yaml を作成するapiVersion: apps/v1kind: Deploymentmetadata:  name: waiting-room-appspec:  replicas: 1  selector:    matchLabels:      app: waiting-room-app  template:    metadata:      labels:        app: waiting-room-app    spec:      containers:      - name: waiting-room-app        image: waiting-room-app:latest        imagePullPolicy: Never        ports:        - containerPort: 8080---apiVersion: v1kind: Servicemetadata:  name: waiting-room-appspec:  selector:    app: waiting-room-app  ports:    - protocol: TCP      port: 80      targetPort: 80803.2 Istioリソースの定義istio-rules.yamlファイルには、Istioの主要な3つのリソース（VirtualService、DestinationRule、Gateway）が定義されています。これらのリソースは、仮想待合室システムのトラフィック制御と負荷管理を実現する上で重要な役割を果たします。VirtualService:VirtualServiceは、トラフィックのルーティングルールを定義します。   apiVersion: networking.istio.io/v1alpha3   kind: VirtualService   metadata:     name: waiting-room-vs   spec:     hosts:     - "*"     gateways:     - waiting-room-gateway     http:     - route:       - destination:           host: waiting-room-app           port:             number: 80       timeout: 1s       retries:         attempts: 3         perTryTimeout: 500ms       fault:         delay:           percentage:             value: 80           fixedDelay: 5s hosts: "*": すべてのホストからのトラフィックに適用されます。 gateways: - waiting-room-gateway: 特定のゲートウェイを通過するトラフィックにのみ適用されます。 route: トラフィックを waiting-room-app サービスの80ポートにルーティングします。 timeout: 1s: リクエストの最大待機時間を1秒に設定します。 retries: 失敗したリクエストを最大3回、500ミリ秒間隔で再試行します。 fault: 80%のトラフィックに5秒の遅延を導入します。これにより、仮想待合室の「待ち時間」をシミュレートします。DestinationRule:DestinationRuleは、トラフィックのロードバランシングと接続プールの設定を定義します。   apiVersion: networking.istio.io/v1alpha3   kind: DestinationRule   metadata:     name: waiting-room-dr   spec:     host: waiting-room-app     trafficPolicy:       connectionPool:         tcp:           maxConnections: 10         http:           http1MaxPendingRequests: 1           maxRequestsPerConnection: 1       outlierDetection:         consecutive5xxErrors: 1         interval: 1s         baseEjectionTime: 3m         maxEjectionPercent: 100 host: waiting-room-app: このルールが適用されるサービスを指定します。 connectionPool: 同時接続数を10に制限し、保留中のリクエストと接続あたりのリクエスト数を1に制限します。これにより、サーバーの過負荷を防ぎます。 outlierDetection: 連続して5xxエラーが発生した場合、そのインスタンスを3分間トラフィックから除外します。これにより、問題のあるインスタンスを自動的に切り離し、システムの安定性を維持します。Gateway:Gatewayは、メッシュへの入口となる外部トラフィックの受け入れ口を定義します。   apiVersion: networking.istio.io/v1alpha3   kind: Gateway   metadata:     name: waiting-room-gateway   spec:     selector:       istio: ingressgateway     servers:     - port:         number: 80         name: http         protocol: HTTP       hosts:       - "*" selector: istio: ingressgateway: Istioの標準的なIngressゲートウェイを使用します。 servers: HTTP トラフィックを80ポートで受け入れ、すべてのホストからのリクエストを許可します。これらのリソースを組み合わせることで、以下のような仮想待合室の動作を実現します。外部からのトラフィックはGatewayを通じて受け入れられます。VirtualServiceにより、80%のトラフィックに5秒の遅延が導入され、待ち時間が発生します。DestinationRuleにより、同時接続数が制限され、システムの過負荷が防止されます。問題が発生した場合、自動的にトラフィックが健全なインスタンスにリダイレクトされます。4. リソースの適用以下のコマンドでKubernetesリソースを適用します。kubectl apply -f waiting-room.yamlkubectl apply -f istio-rules.yaml5. アクセスの設定Istio IngressGatewayにアクセスするために、kubectl port-forwardコマンドを使用します。kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80このコマンドにより、ローカルマシンの8080ポートがIstio IngressGatewayの80ポートに転送されます。これにより、http://localhost:8080でアプリケーションにアクセスできるようになります。6. 動作確認とテスト6.1 基本的な動作確認新しいターミナルウィンドウを開き、以下のコマンドでアプリケーションにアクセスしてみましょう：curl http://localhost:80806.2 負荷テストスクリプト以下の内容でload_test.shスクリプトを作成します。#!/bin/bashCONCURRENT=10TOTAL_REQUESTS=50RESULTS_DIR="access_test_results"mkdir -p "$RESULTS_DIR"make_request() {    local id=$1    local start_time=$(date +%s.%N)    local http_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080)    local end_time=$(date +%s.%N)    local duration=$(echo "$end_time - $start_time" | bc)    echo "$id,$http_code,$duration" >> "$RESULTS_DIR/results.csv"}echo "RequestID,HTTPCode,Duration" > "$RESULTS_DIR/results.csv"for i in $(seq 1 $TOTAL_REQUESTS); do    make_request $i &    if (( i % CONCURRENT == 0 )); then        wait    fidonewaitecho "All requests completed. Results saved in $RESULTS_DIR/results.csv"echo "===============================テスト結果サマリー==============================="echo "総リクエスト数: $TOTAL_REQUESTS"echo "同時接続数: $CONCURRENT"echo -e "\nHTTPステータスコード分布:"status_codes=$(sort "$RESULTS_DIR/results.csv" | cut -d',' -f2 | sort | uniq -c | sort -nr)total_success=$(echo "$status_codes" | grep " 200" | awk '{print $1}')total_success=${total_success:-0}echo "$status_codes" | while read count code; do    if [ "$code" != "HTTPCode" ]; then        percentage=$(echo "scale=2; $count / $TOTAL_REQUESTS * 100" | bc)        printf "%s: %s (%.2f%%)\n" "$code" "$count" "$percentage"        bar=$(printf '%0.s#' $(seq 1 $(echo "$percentage/2" | bc)))        printf "  %s\n" "$bar"    fidonesuccess_rate=$(echo "scale=2; $total_success / $TOTAL_REQUESTS * 100" | bc)echo -e "\n成功率（200 OKの割合）: ${success_rate}%"echo -e "\n応答時間統計:"awk -F',' '    NR>1 {        sum+=$3;         sumsq+=$3*$3;         if(NR==2 || $3<min) min=$3;         if(NR==2 || $3>max) max=$3;    }     END {        avg=sum/NR;         std=sqrt(sumsq/NR - avg*avg);        printf "最小: %.2f秒\n", min;        printf "最大: %.2f秒\n", max;        printf "平均: %.2f秒\n", avg;        printf "標準偏差: %.2f秒\n", std;    }' "$RESULTS_DIR/results.csv"echo -e "\n注: 詳細な結果は $RESULTS_DIR/results.csv に保存されています。"このスクリプトに実行権限を付与し、実行します。chmod +x load_test.sh./load_test.sh7. 結果の分析テストスクリプトの実行結果を分析しましょう。以下は典型的な結果の例です。All requests completed. Results saved in access_test_results/results.csv===============================テスト結果サマリー===============================総リクエスト数: 50同時接続数: 10HTTPステータスコード分布:503: 36 (72.00%)  ####################################200: 14 (28.00%)  ##############成功率（200 OKの割合）: 28.00%応答時間統計:最小: 0.00秒最大: 5.00秒平均: 4.02秒標準偏差: 1.99秒注: 詳細な結果は access_test_results/results.csv に保存されています。結果の説明アクセス制限の効果: 72%のリクエストが503 (Service Unavailable) エラーを返しており、設定したアクセス制限が効果的に機能していることがわかります。遅延の導入: 平均応答時間が4.02秒、最大が5.00秒となっており、VirtualServiceで設定した5秒の遅延が適切に適用されていることが確認できます。成功率: 28%のリクエストのみが成功（200 OK）しており、トラフィック制御システムが効果的にリクエストを制限していることを示しています。応答時間のばらつき: 標準偏差が1.99秒と大きいことから、一部のリクエストは即座に処理され、他は遅延が適用されていることがわかります。これは、設定した80%のトラフィックへの遅延導入が機能していることを示しています。8. まとめこの記事では、Kubernetes上でトラフィック制御を実装し、スケーラブルな待機システムを構築する基礎部分を解説しました。Kindを使用したローカル開発環境の構築から、Istioによるトラフィック管理、負荷テストの実施までを紹介しました。この手法は、大規模イベントやセール時のトラフィック急増への対策として有効です。しかし、実際の運用では、継続的なモニタリングやビジネス側との調整に加え、本格的な仮想待合室システムの構築には、待ち行列管理やユーザーインターフェースの実装が不可欠になります。これらの要素については、次回の記事ではRedisやEnvoyFilterなどを活用した具体的な実装方法と合わせて詳しく解説していく予定です。お楽しみに！おやすみなさい😪9. 参考リンクIstioトラフィック管理の概要Istioを使用したトラフィックシェーピングKubernetes: リソース管理Queue-It: 仮想待合室システムAzure: 負荷緩和パターンNGINX: トラフィック制御とキュー管理サーバーレスで仮想待合室を作ろう！ / Serverless Virtual Waiting RoomGoで実装された高速な仮想待合室サーバの実装と詳解]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[『Platform Engineering とSREの門』という間違ったみたいなタイトルで登壇しました。 #PEK2024]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/07/09/215147</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/07/09/215147</guid>
            <pubDate>Tue, 09 Jul 2024 12:51:47 GMT</pubDate>
            <content:encoded><![CDATA[はじめにこんにちは。先日、Platform Engineering Kaigi 2024にて「Platform Engineering とSREの門」というタイトルで登壇させていただきました。www.cnia.ioPlatform EngineeringとSREは、多くのソフトウェアエンジニアにとっては馴染みのない分野かもしれません。私自身、最初はこれらを比較することに抵抗がありました。しかし、SNSで不毛に続くやり取りを見ていると本当に鬱陶しいと感じるようになりこの戦争を終わらせに来た!!!!みたいなノリで登壇し始めました。ここ数年の経験を通じて、Platform EngineeringとSREが目指す先は同じだということがわかっていました。システムの信頼性と開発生産性、効率性の向上という似たような目標に向かって、異なるアプローチで取り組んでいるのです。これらの分野の強みを理解し、比較することでより効果的でそれぞれの組織らしいシステム運用が可能になると考えました。具体と抽象作者:細谷 功dZERO（インプレス）Amazon今回のセッションでは、両分野の特徴と、それらを融合させることの意義について話させていただきました。メテオブラックドラゴン召喚です。アプローチや視点を変えることで得られる新たな知見や、より良いソリューションの可能性について共有できたと思います。多くの方から貴重なフィードバックをいただき、大変嬉しく思います。これらの意見は、モチベーションに繋がるのでありがたいです。なお、Platform EngineeringとSREを比較する登壇は今回で3回目となりました。今後は、特別な要望がない限り、この主題での自主的な登壇は控えさせていただこうと考えています。ただし、ご要望があれば喜んでお話しさせていただきますので、お気軽にお声がけください。登壇資料普通に笑いが起きるかなって思ってたんですけど大きくスベりました。 speakerdeck.com今回の発表では、予想と異なる反応があり、自分の考えと聴衆の期待にズレがあったことを実感しました。がこういった経験も、今後の改善につながる貴重なフィードバックだと捉えています。まず、登壇したことが偉いので、はい。参考資料今回のイベントを含め、Platform Engineering、SRE、開発生産性、プロダクトマネジメントに関する優れた資料が多数存在します。以下に、これらの分野について理解を深めるのに役立つ資料をリストアップしました。これらの資料は、理論的な基礎から実践的なアプローチまで幅広くカバーしており、各分野の最新トレンドや洞察を得るのに適しています。また、実際の現場での適用例や、組織設計、チーム構築に関する情報も含まれています。興味のある分野や、現在直面している課題に応じて、以下の資料を参照することをおすすめします。これらの知見は、より効果的なシステム運用や組織づくりに貢献するでしょう。O'Reilly Japan – SRE サイトリライアビリティエンジニアリングO'Reilly Japan – サイトリライアビリティワークブックO'Reilly Japan – SREの探求Becoming SRESRE at Google: How to structure your SRE teamレトロスペクティブガイドWhat Is Platform Engineering?Top Strategic Technology Trends for 2023: Platform EngineeringMaking the Business Case for a Dedicated Platform Engineering TeamSRE NEXTPlatform Engineering MeetupチームトポロジーSLO サービスレベル目標Effective DevOpsオブザーバビリティ・エンジニアリングWebエンジニアのための監視システム実装ガイドマイクロサービスの現場からプラットフォームエンジニアリングの可能性を探る！CNCF Platforms White Paper道を照らす: プラットフォーム エンジニアリング、ゴールデンパス、セルフサービスのパワーPlatform Engineering on Kubernetes開発生産性について議論する前に知っておきたいことPlatform Engineering 101What is platform engineering?実践チームトポロジー： プラットフォーム性とイネイブリング性の戦略【資料公開】30分で分かった気になるチームトポロジーTeam dynamics: Five keys to building effective teamsThe History of DevOps Reports作りすぎない技術 - API時代の開発努力の在り方について考えるタクシーアプリ『GO』におけるプラットフォームエンジニアリングの実践The DevOps Handbook, 2nd EditionGrokking Continuous Deliveryこれらの資料を通じて、技術と組織の両面からシステム運用の改善について学ぶことができます。継続的な学習と実践を通じて、より良いエンジニアリング文化の構築に貢献できることを願っています。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Pull requestの概要の作成とコードの改善を提案するツールを作ってみた]]></title>
            <link>https://sreake.com/blog/pr-guardian/</link>
            <guid>https://sreake.com/blog/pr-guardian/</guid>
            <pubDate>Tue, 09 Jul 2024 11:10:06 GMT</pubDate>
            <content:encoded><![CDATA[1. はじめに はじめまして、Sreake事業部でインターンをしている村山です。 今回は、PR Guardianというツールの開発と検証をしました。PR GuardianはPull Requestの概要の作成、コードの改 […]The post Pull requestの概要の作成とコードの改善を提案するツールを作ってみた first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Platform Engineering と SRE の門 ]]></title>
            <link>https://speakerdeck.com/nwiizo/platform-engineering-to-sre-nomen</link>
            <guid>https://speakerdeck.com/nwiizo/platform-engineering-to-sre-nomen</guid>
            <pubDate>Tue, 09 Jul 2024 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Platform Engineering とSREの門 というタイトルで登壇しました。入門のタイポではありません。イベント名: Platform Engineering Kaigi 2024イベントURL:https://www.cnia.io/pek2024/登壇ブログ:『Platform Engineering とSREの門』という間違ったみたいなタイトルで登壇しました。 #PEK2024https://syu-m-5151.hatenablog.com/entry/2024/07/09/215147]]></content:encoded>
        </item>
    </channel>
</rss>