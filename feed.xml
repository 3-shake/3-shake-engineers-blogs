<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Tue, 20 May 2025 11:34:49 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[Pod Resource動的リサイズの検証]]></title>
            <link>https://sreake.com/blog/kubernetes-pod-resource-dynamic-resize/</link>
            <guid>https://sreake.com/blog/kubernetes-pod-resource-dynamic-resize/</guid>
            <pubDate>Tue, 20 May 2025 08:38:25 GMT</pubDate>
            <content:encoded><![CDATA[Kubernetesでは、アプリケーションの可用性や運用効率を高めるため、リソース変更時のダウンタイムを極力抑える取り組みが進んでいます。従来、CPU やメモリのリソースを変更する際には、Pod の再作成やコンテナ再起動 […]The post Pod Resource動的リサイズの検証 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gonum Plotを使ってGoでプロットを作ってみる]]></title>
            <link>https://zenn.dev/akasan/articles/7ef47bf9cd599b</link>
            <guid>https://zenn.dev/akasan/articles/7ef47bf9cd599b</guid>
            <pubDate>Mon, 19 May 2025 14:25:47 GMT</pubDate>
            <content:encoded><![CDATA[今回はGoでプロットグラフを作れるGonum Plotを使ってみようと思います。 Gonum Plotとは？Gonum Plotはcode.google.com/p/plotinumの新しい公式フォークとのことです。Goを利用してプロットのビルド・描画ができるAPIを提供しており、現時点ではまだ変動しており仕様が変更される可能性があるとのことです。詳しくは以下の公式ドキュメントを参照ください。https://pkg.go.dev/gonum.org/v1/plot#section-readme 実際に使ってみる インストールまず検証環境を作成します。今回はmiseを使っ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ブログ記事評価プロンプト (0.0-5.0)を作成しました。]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/05/19/100659</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/05/19/100659</guid>
            <pubDate>Mon, 19 May 2025 01:06:59 GMT</pubDate>
            <content:encoded><![CDATA[はじめにある日のこと、私はブログを書いていました。ブログをレビューしたり、修正したり。そんな日々の中で、ふと思ったのです。「あれ？自分が書いたブログ記事、本当に役に立っているのかな？」と。皆さんも一度は感じたことがあるのではないでしょうか。せっかく時間をかけて書いた記事が、実は的外れだったかもしれない、という不安。「もっとこうすればよかった」という後悔。あるいは「この記事、本当に価値があるのか」という疑問。そんな思いを抱えながら、私はあることに気づきました。ブログ記事を評価する明確な基準がないということに。プログラミングにはコードレビューがあり、デザインにはクリティークがあります。でも、技術ブログには？そこで考えました。もしブログ記事を客観的に評価できるプロンプトがあれば、多少なり自分の記事をより良くするヒントになるのではないか、と。単なる「良い/悪い」ではなく、複数の観点から数値化して評価できれば、改善点が明確になります。Writing for Developers: Blogs that get read (English Edition)作者:Sarna, Piotr,Dunlop, CynthiaManningAmazon本日は、そんな「ブログ記事評価プロンプト」の作り方と使い方についてご紹介します。このプロンプトは、私が以前書いた「3年目までに身につけたい技術ブログの書き方」と「防御力の高い技術ブログを書こう」の内容をベースに、記事の質を多角的に評価できるよう設計しています。このブログが良ければ読者になったり、nwiizoをフォロワーしてくれると嬉しいです。では、早速はじめていきます。はじめになぜブログ記事を評価する必要があるのかフィードバックの少なさという現実自己評価の盲点継続的な改善のために5つの評価観点とその意味防御力：批判に耐える文章の力思考整理力：混沌から秩序を生む力実践応用性：読んですぐ行動できる情報構成と読みやすさ：情報の消化しやすさコミュニケーション力：人間味のある伝え方ブログ記事評価プロンプトの使い方評価の手順自己評価として使う場合成長の記録として使う場合評価プロンプトを評価するバランスの取れた総合力読者を中心に据えた視点進化し続ける生き物としてのブログブログ記事評価プロンプト全文ブログ評価プロンプトの限界と注意点AIによる評価の限界評価基準のカスタマイズ評価を絶対視しないおわりになぜブログ記事を評価する必要があるのかフィードバックの少なさという現実技術ブログを書いていて感じるのは、直接的なフィードバックの少なさです。コードならPRレビューで指摘を受けますが、ブログはほとんどの場合、反応がないまま時間が経ちます。実際、私の経験では1000人に読まれた記事でも、コメントをくれるのはせいぜい数人。「参考になりました」と言ってくれる人がわずかにいて、大多数は何も言わず、たまに批判的なコメントが来る程度です。こういった状況では、自分の記事が本当に役立っているのか、どう改善すべきなのか判断するのが難しくなります。自己評価の盲点自分で書いた記事を自分で評価するのは、想像以上に難しいものです。「こんなにわかりやすく書いたのに、なぜ伝わらないんだろう」と思うことはありませんか？それは私たちが自分の知識や前提条件を無意識に読者にも期待してしまうからです。「これくらい知っているだろう」「これは説明不要だろう」という判断が、実は大きな誤解を生んでいることも少なくありません。継続的な改善のためにブログを書き続けるモチベーションを維持するには、自分の成長を実感することが重要です。評価基準があれば、「前回より良くなった」と客観的に感じられるようになります。数値化された評価は、「前回は実践応用性が3.2だったけど、今回は4.0に上がった！」といった具体的な進歩を認識させてくれます。これは小さな達成感を生み、次の記事への原動力になるのです。5つの評価観点とその意味ブログ記事を評価する際、単一の基準ではなく複数の視点から見ることが重要です。以下の5つの観点は、私が過去の記事で大切だと感じてきた要素を反映しています。これらをバランスよく考慮することで、より立体的に記事の質を捉えることができます。防御力：批判に耐える文章の力防御力とは、批判や反論に対してどれだけ耐性のある記事になっているかを評価する観点です。前回の「防御力の高い技術ブログを書こう」でも詳しく解説しましたが、特に重要なのは次の要素です：主観的表現と限定的な主張：「これが正しい方法だ」ではなく「私の経験では〜」と限定することコンテキストと限界の明示：「この方法はXXの環境で、YYの制約がある場合に有効です」と条件を明確にすること実体験と具体例の活用：抽象的な主張ではなく具体的な体験を共有すること根拠と出典の明示：主張の裏付けとなる情報源を示すこと誠実さの表現：自分の不確かさや知識の限界を率直に認め、「まだ完全には理解していない」「今後調査が必要」といった点を隠さないこと防御力が高い記事は「これは間違っている！」という批判を受けにくくなり、建設的な対話を生み出しやすくなります。特に誠実さを示すことで、読者は筆者を信頼し、共に学び合う関係を築けるのです。syu-m-5151.hatenablog.com思考整理力：混沌から秩序を生む力思考整理力とは、複雑な概念や情報をどれだけ論理的に整理して伝えられているかという観点です。優れた技術ブログは、単なる情報の羅列ではありません。著者の試行錯誤の過程、思考の変遷を透明に示すことで、読者は表面的な結論だけでなく、その背景にある考え方まで学ぶことができます。具体的には以下のような要素が重要です：問題提起→コンテキスト→探求の旅→発見と学び→次のステップという明確な流れ「最初は〜と考えたが、〜という課題に直面し、最終的に〜という結論に至った」という思考プロセスの共有失敗したアプローチも含めた試行錯誤の過程の可視化思考整理力が高い記事は、読者に「なるほど、こういう考え方をすればいいのか」という気づきを与えます。実践応用性：読んですぐ行動できる情報実践応用性とは、記事の情報が読者の実際の行動や実践にどれだけ役立つかという観点です。「なるほど、理解できた」と「よし、これで自分でもできる」は大きく異なります。実践応用性の高い記事は、読者が具体的な行動に移せる情報が豊富に含まれています。以前紹介した技術ブログの種類でいえば、「学習ログ」「バグハント記事」「環境構築ガイド」「学んだ教訓記事」などは特に実践応用性を重視したものです。実践応用性を高める要素としては：具体的な手順やステップバイステップの指示つまずきやすいポイントへの対応策失敗例とその解決策読者が自分の状況に応用できる情報の提供実践応用性が高い記事は、読者のお気に入りブックマークやメモに残りやすくなります。構成と読みやすさ：情報の消化しやすさ構成と読みやすさとは、記事の構造、文体、視覚的要素が読者の理解をどれだけ促進するかという観点です。いくら良い内容でも、長い文章の塊では読者は疲れてしまいます。適切な構成と視覚的な工夫は、読者の理解と集中力を大きく助けます。具体的には：冒頭の3行で読者の興味を引く導入適切な見出し階層による内容の整理短い段落(3-5行程度)、箇条書き、強調表示の効果的な使用図や視覚的要素による複雑な概念の明確化具体例と全体像の交互の提示読者に余韻と思考の広がりを残す結び構成と読みやすさが高い記事は、読者がストレスなく最後まで読み切れる記事になります。コミュニケーション力：人間味のある伝え方コミュニケーション力とは、記事が読者と共感的につながり、技術情報を人間味を持って伝えているかという観点です。技術情報は往々にして無機質で冷たい印象を与えがちですが、その背後には常に人間の試行錯誤や感情があります。それらを含めて伝えることで、読者との距離が縮まります。コミュニケーション力を高める要素としては：読み手の感情を大切にする表現個人の経験として共有する姿勢主観的な表現を心がける好きなものを中心に語るポジティブさ批判を柔らかく伝える工夫読者の立場に立った情報提供コミュニケーション力が高い記事は、読者に「この人の次の記事も読みたい」と思わせる力を持ちます。ブログ記事評価プロンプトの使い方では、実際にこのプロンプトを使って記事を評価する方法を見ていきましょう。評価の手順記事全体を通読する：まずは全体を通して読み、初期印象を得ます。各基準で評点をつける：5つの観点それぞれに0.0～5.0の範囲で評点をつけます（小数点第一位まで、例: 4.3）。具体的な所見を記述する：各基準について良い点と改善点の両方を含めた所見を記述します。総合評価を計算する：5つの観点の平均値を算出して総合評価とします。総評と改善提案をまとめる：記事全体についての総評と、優先的に改善すべき点を具体的に提案します。自己評価として使う場合自分の記事を客観的に見直すツールとしても有効です：記事を書き終えた後、少し時間を置いてから（できれば1日以上）再度読み返します。各評価基準を念頭に置きながら、自分の記事を評価します。特に低い評点がついた観点について、改善方法を考えます。成長の記録として使う場合時間をかけて記事を書き続けると、確実に上達していきます。その成長を可視化するツールとしても使えます：過去に書いた記事と最近書いた記事を同じプロンプトで評価します。各観点の点数の変化を比較し、自分がどの領域で成長したかを確認します。まだ点数が低い観点を次回の記事で意識的に改善します。評価プロンプトを評価するこのプロンプトを作成する過程で、改めて「良いブログとは何か」を考えさせられました。5つの観点から見えてくる良いブログの特徴をまとめてみましょう。syu-m-5151.hatenablog.comバランスの取れた総合力興味深いのは、5つの観点がお互いに補完し合う関係にあることです。例えば：防御力を高めるためには、コンテキストと限界を明示する必要がありますが、これは思考整理力にも関わります。実践応用性を高めるには、読者が実行しやすいよう構成と読みやすさが重要です。コミュニケーション力を高めるには、著者自身の思考整理力が前提となります。つまり、真に優れた記事とは、どれか一つの観点だけが突出しているものではなく、全ての観点でバランス良く高い評価を得られるものだと言えるでしょう。読者を中心に据えた視点5つの観点に共通するのは、常に読者の立場から考えるという姿勢です。防御力は「読者の多様な立場や状況を尊重する」こと思考整理力は「読者が著者の考えを追体験できる」こと実践応用性は「読者が実際に行動に移せる」こと構成と読みやすさは「読者の理解と集中力を助ける」ことコミュニケーション力は「読者と共感的につながる」ことこれは、良いブログが「自分のための記録」と「他者のための情報」の絶妙なバランスの上に成り立っていることを示しています。進化し続ける生き物としてのブログ評価プロンプトは「完璧な記事」を目指すためのものではなく、記事の強みと弱みを知り、継続的に改善していくための道具です。前回の記事でも書いたように、「完璧な文章なんてものは、空を飛ぶ象と同じくらい見つけるのが難しい」のです。評価の目的は完璧を目指すことではなく、80%の完成度で公開しながらも、次はもう少し良くするための指針を得ることにあります。ブログ記事評価プロンプト全文以下が、実際に使用できるブログ記事評価プロンプトの全文です。コピーして自由にお使いください。こちらでも、公開しておきます。blog_evaluation_prompt_5criteria.md · GitHub# ブログ記事評価プロンプト (0.0-5.0)あなたはブログ記事を評価する専門家です。以下の5つの観点から記事を0.0～5.0の範囲で評価し、詳細なフィードバックを提供してください。## 評価基準### 防御力 (0.0-5.0)記事が批判や反論に対してどれだけ耐性を持っているかを評価します。**5.0**: 完璧な防御力。主観的表現と限定的な主張を適切に用い、コンテキストと限界を明示し、実体験と具体例が豊富で根拠と出典が明確。批判を先取りする構成で異なる立場への配慮が行き届いている。見出しと結論が余地を残す形で表現されており、事実と解釈の違いを明確に認識している。自分の不確かさや知識の限界を誠実に認め、読者との信頼関係を構築している。**4.0**: 高い防御力。主観的表現を用い、コンテキストを示し、具体例と根拠を提示している。批判への一定の対応と異なる視点への配慮がある。自分のバイアスをある程度認識し、誠実さを示す表現が見られる。**3.0**: 標準的な防御力。部分的に主観や限界を示しているが、一部に断言的な表現や根拠不足がある。批判への対応が限定的で、特定の立場からの視点に偏る傾向がある。誠実さの表現が限られている。**2.0**: 弱い防御力。断言的な表現が多く、コンテキストや限界の明示が不足。具体例や根拠が少なく、批判への対応がほとんどない。一方的な視点で書かれ、自分の不確かさを認める表現がほとんどない。**1.0**: 非常に弱い防御力。断言と一般化が目立ち、コンテキストや根拠がほぼない。批判や異なる視点への考慮がなく、バイアスを認識していない。誠実さに欠け、権威的な印象を与える。**0.0**: 防御力がない。完全に断言的で一般化された主張のみ。コンテキスト、根拠、実例がなく、批判への対応策がまったくない。不誠実な印象を与える表現が含まれている。### 思考整理力 (0.0-5.0)記事が著者の思考プロセスを整理し、知識を構造化して伝えているかを評価します。**5.0**: 卓越した思考整理力。複雑な概念が「問題提起→コンテキスト→探求の旅→発見と学び→次のステップ」という明確な流れで整理されている。著者の試行錯誤のプロセスが透明に示され、「最初は〜と考えたが、〜という課題に直面し、最終的に〜という結論に至った」という思考の変遷が丁寧に記述されている。**4.0**: 優れた思考整理力。概念が論理的に整理され、思考プロセスの大部分が示されている。問題から解決策までの道筋が明確で、読者は著者の思考をたどることができる。**3.0**: 標準的な思考整理力。基本的な論理構造はあるが、思考プロセスの一部が省略されている。結論は示されているが、そこに至る過程の説明が不十分な箇所がある。**2.0**: 弱い思考整理力。論理の飛躍が多く、思考プロセスがほとんど示されていない。結論だけが述べられ、そこに至る思考の道筋が不明瞭。**1.0**: 非常に弱い思考整理力。断片的な考えが並べられているだけで、論理的なつながりがほとんどない。著者の思考プロセスが見えない。**0.0**: 思考整理力がない。無関係な情報の羅列に近く、何を伝えようとしているのか把握できない。### 実践応用性 (0.0-5.0)記事の情報が読者の実際の行動や実践にどれだけ役立つかを評価します。**5.0**: 非常に高い実践応用性。「学習ログ」「バグハント記事」「環境構築ガイド」「学んだ教訓記事」などの要素を含み、具体的な手順、失敗例とその解決策、つまずきやすいポイントへの対応策を提供している。読者はこの記事だけで実際に行動を起こせる十分な情報と具体的ステップを得られる。**4.0**: 高い実践応用性。具体的な例や実践的なアドバイスが豊富で、読者が自分の状況に応用できる情報が含まれている。行動のきっかけとなる要素が明確に示されている。**3.0**: 標準的な実践応用性。基本的な実践情報は提供されているが、具体例やステップバイステップの指示が限定的。読者は追加情報を探す必要がある。**2.0**: 低い実践応用性。情報は含まれているが抽象的で、実際の場面での応用方法が示されていない。「何をすべきか」は書かれているが「どうすべきか」の説明が不足。**1.0**: 非常に低い実践応用性。情報が断片的で実践に結びつけるのが困難。具体的な行動指針がほぼない。**0.0**: 実践応用性がない。読者が実際に行動に移せる情報がまったくない、または誤った実践指針が含まれている。### 構成と読みやすさ (0.0-5.0)記事の構造、文体、視覚的要素が読者の理解と共感をどれだけ促進するかを評価します。**5.0**: 卓越した構成と読みやすさ。冒頭の3行で読者の興味を引き、適切な見出し階層で内容が整理されている。短い段落(3-5行程度)、箇条書き、強調表示が効果的に使われ、長いコードブロックには適切な説明が付随している。図や視覚的要素が複雑な概念を明確化し、具体例と全体像が交互に示されている。結びは読者に余韻と思考の広がりを残している。**4.0**: 優れた構成と読みやすさ。明確な構造があり、視覚的要素も効果的に使用されている。段落が適切に分割され、重要ポイントが強調されている。読者が内容を容易に把握できる。**3.0**: 標準的な構成と読みやすさ。基本的な構造はあるが、一部に長い段落や複雑な説明がある。視覚的要素の活用が限定的で、読みやすさを向上させる工夫が不足している。**2.0**: 弱い構成と読みやすさ。構造が不明確で、長い段落や複雑な文が多い。視覚的要素がほとんどなく、読者がついていくのが困難。**1.0**: 非常に弱い構成と読みやすさ。一貫した構造がなく、文章が冗長で複雑。視覚的サポートがなく、読者は内容を理解するのに大きな労力を要する。**0.0**: 構成と読みやすさがない。無秩序な情報の羅列で、読者が内容を把握するのがほぼ不可能。### コミュニケーション力 (0.0-5.0)記事が読者と共感的につながり、技術情報を人間味を持って伝えているかを評価します。**5.0**: 優れたコミュニケーション力。読み手の感情を大切にし、個人の経験として共有し、主観的な表現を心がけている。好きなものを中心に語り、ポジティブな内容を強調し、批判を柔らかく伝える工夫がある。読者の立場に立った情報提供と、共感を呼ぶ語り口で、技術情報に人間味を加えている。**4.0**: 良好なコミュニケーション力。読者への配慮が見られ、個人的な経験や感想が適切に織り込まれている。技術情報が親しみやすい形で提示され、読者との対話を意識した書き方がされている。**3.0**: 標準的なコミュニケーション力。基本的な情報は伝わるが、読者との共感的なつながりが限定的。技術情報が淡々と伝えられ、人間味のある表現が少ない。**2.0**: 弱いコミュニケーション力。読者への配慮が不足し、一方的な情報提供に終始している。技術的には正確でも、読者の感情や状況への理解が欠けている。**1.0**: 非常に弱いコミュニケーション力。読者の存在をほとんど意識していない書き方で、共感や対話の要素がない。単なる情報の羅列に近い。**0.0**: コミュニケーション力がない。読者を無視した、または読者に対して無配慮な内容。技術情報が冷淡で機械的に提示されている。## 評価手順1. 記事全体を通読し、各評価基準における初期印象を得る2. 各基準について0.0～5.0の範囲で評点をつける（小数点第一位まで、例: 4.3）3. 各基準についての具体的な所見を述べる（良い点と改善点の両方を含める）4. 総合評価として、各基準の評点の平均値を計算する5. 記事全体についての総評と主な改善提案をまとめる## 評価レポート形式# [記事タイトル] 評価レポート## 総合評価: [平均点]/5.0### 防御力: [点数]/5.0[具体的な所見と例]### 思考整理力: [点数]/5.0[具体的な所見と例]### 実践応用性: [点数]/5.0[具体的な所見と例]### 構成と読みやすさ: [点数]/5.0[具体的な所見と例]### コミュニケーション力: [点数]/5.0[具体的な所見と例]## 総評[全体的な感想と主な強み]## 改善提案[優先的に改善すべき点とその具体的な方法]## 評価の姿勢* 批判ではなく建設的なフィードバックを心がける* 著者の経験レベルや記事の目的を考慮して評価する* 良い点を明確に指摘し、改善点は具体的な提案と共に述べる* 「防御力の高い」コミュニケーションを実践する（批判的す```ぎず、個人の経験としての意見を述べる）* 記事の「学び続ける姿勢」や「思考の過程」としての価値も評価する* 「完璧な文章なんてものは、空を飛ぶ象と同じくらい見つけるのが難しい」という謙虚さを持ち、80%の完成度でも価値があることを認識するブログ評価プロンプトの限界と注意点この評価プロンプトは便利なツールですが、もちろん限界もあります。使用する際は以下の点に注意しましょう。AIによる評価の限界AIモデルは文章を「理解」しているわけではなく、ある種の基準に基づいて評価しています。そのため：専門的な正確さを完全に判断できない場合があります記事の文化的・社会的コンテキストを十分に考慮できないこともAIの学習データによるバイアスが評価に影響する可能性があります特に技術的な正確性については、専門家によるレビューに勝るものはありません。評価基準のカスタマイズこの評価プロンプトは技術ブログを念頭に作成していますが、あなたの書く記事のタイプや目的に合わせてカスタマイズすることをお勧めします。例えば：チュートリアル記事なら「正確性」や「再現性」の観点を追加哲学的な考察記事なら「思考の深さ」や「問いの質」の観点を追加製品レビュー記事なら「公平性」や「比較の妥当性」の観点を追加評価を絶対視しないどんなに優れた評価基準でも、それはあくまで参考にすべきものであり、絶対的な判断基準ではありません。前回の記事でも触れたように、「過剰な期待が否定の感情を生み出します」。評価が低かったからといって落ち込むのではなく、「どうすれば次はもっと良くなるか」という前向きな視点で捉えることが大切です。おわりに「ブログ記事評価プロンプト」を作成してみて、改めて感じたのは、「良い記事を書く」ということの多面性です。防御力、思考整理力、実践応用性、読みやすさ、コミュニケーション力—これらや他の要素のバランスを取りながら、読者にとって価値ある情報を提供することの難しさと奥深さを実感しました。そして同時に、完璧を目指すことの罠も見えてきました。全ての観点で5.0を取るような記事を書こうとすると、おそらく公開に至る前に挫折してしまうでしょう。しかも絶対的に「良い記事」なんてものはないんですよね。誰かにとって素晴らしい記事でも、別の誰かにとっては「何言ってるかわからない」記事かもしれません。というか別に誰からも見られない記事かもしれません。大切なのは、80%の完成度で公開する勇気と、次はもう少し良くしようという向上心と予定調和からどこかはみ出そうとするバランスです。このプロンプトは完璧を求めるためのものではなく、自分の強みと弱みを知り、少しずつ成長していくための道具として使ってください。なので、修正して使ってもらって問題ないです。書き続けることこそが、最高の学びです。一つひとつの記事が完璧でなくても、書き続けることで確実に上達していきます。このプロンプトが、あなたのブログ執筆の旅の、小さくても役立つ道しるべとなれば幸いです。このプロンプトはあくまで私の考える評価基準であり、個人や会社によって必要な評価観点は当然変わってきます。技術系スタートアップならば「技術的正確性」をより重視するかもしれませんし、マーケティング部門では「読者の行動喚起力」が重要になるでしょう。個人ブログなら「自分らしさ」や「個性の表現」という観点も加えたいかもしれません。ぜひ皆さんの状況や目的に合わせて、このプロンプトを修正・拡張・カスタマイズしてください。「うちの組織では、この観点の方が重要だ」「この基準は自分の文脈では意味がない」といった具合に、それぞれのニーズに合わせた評価プロンプトに育てていってください。最後に、このプロンプトは誰でも使ってくれという気持ちで公開しています。使ってみて改善点があれば、ぜひ教えてください。あなたの視点で改良を加え、さらに良いツールに育てていただければと思います。「誰かのために書く」のではなく、「自分のために書き始め、結果として誰かの役に立つ」—それがブログの本当の姿だと私は思っています。このプロンプトが、あなたの書く喜びと成長の一助となることを願っています。余談ですが「LLMのプロンプトエンジニアリング ―GitHub Copilotを生んだ開発者が教える生成AIアプリケーション開発」はとても参考になる良い本だったのでオススメです。LLMのプロンプトエンジニアリング ―GitHub Copilotを生んだ開発者が教える生成AIアプリケーション開発作者:John Berryman,Albert Ziegler,服部 佑樹（翻訳）,佐藤 直生（翻訳）オーム社Amazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[miseを使い始めた]]></title>
            <link>https://zenn.dev/akasan/articles/2aa8031a03871c</link>
            <guid>https://zenn.dev/akasan/articles/2aa8031a03871c</guid>
            <pubDate>Sun, 18 May 2025 02:41:55 GMT</pubDate>
            <content:encoded><![CDATA[今回はmiseを使い始めたので、インストール方法など自分の備忘録を兼ねてまとめてみようと思います。 miseとは？まず、miseとは何かというと、公式GitHubから拝借するとasdfのように、nodeやPython、cmakeやterraform、その他数百もの開発ツールを管理するdirenvのように、異なったプロジェクトディレクトリに関して環境変数を管理できるmakeのように、ビルドやプロジェクトのテストのためにタスクを管理できる要は開発環境を整えるツールなんだなという認識をしてます。最近ではPythonではuvなどが利用されていますが、そのような形でツールを簡単に...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud 認定資格奮闘記 ~Professional Data Engineer編~]]></title>
            <link>https://zenn.dev/akasan/articles/e2416e40a90499</link>
            <guid>https://zenn.dev/akasan/articles/e2416e40a90499</guid>
            <pubDate>Sat, 17 May 2025 06:01:17 GMT</pubDate>
            <content:encoded><![CDATA[この記事の続編になります。https://zenn.dev/akasan/articles/4d7972b7c5f84c Professional Data EngineerについてProfessional Data Engineer（以下、PDE）は、公式では以下のように説明されています。Professional Data Engineer は、データを収集、変換、公開することで、データを有効で価値のあるものにします。ビジネス要件と規制要件を満たすために、プロダクトやサービスを評価し、選択します。Professional Data Engineer は、堅牢なデータ処理シス...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Tokyo LT大会「ストリームの実装」]]></title>
            <link>https://speakerdeck.com/shukob/react-tokyo-ltda-hui-sutorimunoshi-zhuang</link>
            <guid>https://speakerdeck.com/shukob/react-tokyo-ltda-hui-sutorimunoshi-zhuang</guid>
            <pubDate>Sat, 17 May 2025 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2025年5月17日React Tokyo LT大会にて、生成AIアプリケーションなどでよく使う「ストリーム実装」について話しました。https://react-tokyo.connpass.com/event/350715/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LangflowとNotion連携について　〜コンテンツ生成編〜]]></title>
            <link>https://zenn.dev/akasan/articles/9acb1ed5fa3dc0</link>
            <guid>https://zenn.dev/akasan/articles/9acb1ed5fa3dc0</guid>
            <pubDate>Fri, 16 May 2025 13:30:15 GMT</pubDate>
            <content:encoded><![CDATA[今回は、Langflowを利用して、Notionのページ内にコンテンツを生成させる方法についてまとめてみようと思います。Langflowの使い方については以前以下の記事で解説していますので併せてご覧ください。https://zenn.dev/akasan/articles/6357f1dd2b52ac 早速使ってみる 環境の立ち上げ今回も以前と同様に、公式が提供しているdockerを利用します。簡単な起動方法は以下になります。公式GitHubのレポジトリをcloneするdocker_exampleフォルダに移動するdocker compose upを実行する...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google CloudのAI Agent関連のサービス紹介]]></title>
            <link>https://speakerdeck.com/shukob/google-cloudnoai-agentguan-lian-nosabisushao-jie</link>
            <guid>https://speakerdeck.com/shukob/google-cloudnoai-agentguan-lian-nosabisushao-jie</guid>
            <pubDate>Fri, 16 May 2025 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[https://3-shake.connpass.com/event/351861/3-shake SRE Tech Talk #12 にて、Google CloudのAI Agent関連のサービス紹介を行いました・Vertex AI Agent Builder・Agent Garden・Agent Engine・Vertex AI Search・Agentspaceなど]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RustのWebアプリケーションにオブザーバビリティを実装するインフラエンジニアのための入門ガイド]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/05/15/230818</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/05/15/230818</guid>
            <pubDate>Thu, 15 May 2025 14:08:18 GMT</pubDate>
            <content:encoded><![CDATA[はじめに「新規プロジェクトに参画したら、アプリケーションがRustで書かれていた...」このような経験をされた方も多いのではないでしょうか。もしくは今後あるかもしれません。特に、オブザーバビリティの実装を担当することになったインフラエンジニアにとって、Rustは馴染みの薄い言語かもしれません。このガイドは、インフラエンジニアとしての経験は豊富だが、Rustの経験が少ないインフラエンジニアのために書かれています。既存のRustアプリケーションにログ、メトリクス、トレーシングを実装する方法を、Rustの前提知識を必要とせずに理解できるよう解説します。前提知識が不要なだけで都度学習はしてもらいます。想定読者オブザーバビリティの実装経験があるPython、Java、Goなどでの実装経験はあるRustは初めて触れる、もしくは経験が浅い既存のRustアプリケーションにオブザーバビリティを実装する必要があるこのガイドで得られることRustアプリケーションの基本的な構造の理解オブザーバビリティ実装に必要なRustの最小限の知識実装手順とコード例トラブルシューティングのポイントまず、典型的なRustのWebアプリケーションの構造を見ていきましょう。Rustの基本的な概念アトリビュート（#[...]）Rustでは#[...]という記法をアトリビュート（属性）と呼びます。これはコードに対して追加の情報や機能を付与する特別な構文です。アトリビュートを使用することで、コンパイラへの指示や機能の自動実装が可能になります。これは他の言語では以下のように表現されるものに相当します。Java: アノテーション（@SomeAnnotation）Python: デコレータ（@decorator）TypeScript: デコレータ（@decorator）参考: The Rust Reference - Attributes主なアトリビュートの例：// 自動的に特定の機能を実装する#[derive(Debug)]  // println!("{:?}", obj)でデバッグ出力を可能にする                  // 例: println!("{:?}", user); // User { id: 1, name: "John" }#[derive(Clone)]  // オブジェクトのクローン（複製）を可能にする                  // 例: let user2 = user.clone();#[derive(Serialize, Deserialize)]  // JSONとの相互変換を可能にする                  // 例: let json = serde_json::to_string(&user)?;                  // let user: User = serde_json::from_str(&json)?;// 関数やモジュールの属性を指定する#[test]  // テスト関数であることを示す         // 例: cargo testでテストとして実行される#[actix_web::main]  // actix-webのメイン関数であることを示す                    // 非同期ランタイムの設定を自動的に行うアトリビュートが実際に何をしているのかを具体例で見てみます。// #[derive(Debug)]がない場合struct User {    id: u32,    name: String,}let user = User { id: 1, name: "John".to_string() };println!("{:?}", user);  // コンパイルエラー！// #[derive(Debug)]がある場合#[derive(Debug)]struct User {    id: u32,    name: String,}let user = User { id: 1, name: "John".to_string() };println!("{:?}", user);  // User { id: 1, name: "John" } と出力されるアトリビュートを使用することで、以下のようなメリットが得られます。ボイラープレートコードの削減標準的な機能の自動実装コンパイル時の動作制御フレームワークとの統合Rust By Example - AttributesRust Derive マクロのドキュメント構造体（struct）とパターンマッチング（match）Rustの構造体は、他の言語のクラスに相当します。また、パターンマッチングは他言語のswitch文に似ていますが、より強力です。// match式の例match result {    Some(value) => println!("値が存在します: {}", value),    None => println!("値が存在しません"),}参考: The Rust Programming Language - Pattern Matchingエンドポイントの戻り値型-> impl Responderこれは「Responderトレイトをimplementsする何らかの型」を返すことを意味します。雑に言うとJavaのインターフェースやTypeScriptの型に似た概念です。参考: Actix Web - Responder traitMutexを使用したデータの共有users: Mutex<HashMap<u32, User>>Mutexは「相互排除（Mutual Exclusion）」の略で、複数のスレッドから安全にデータにアクセスするための機構です。参考: Rust Standard Library - MutexPath引数の取得id: web::Path<u32>URLのパスパラメータを型安全に取得します。例：/users/123の123部分。参考: Actix Web - Path ExtractorWebアプリケーションの簡易な実装それでは、簡易なRustのWebアプリケーションの構造を見てみましょう。// src/main.rs - 既存のWebアプリケーションuse actix_web::{web, App, HttpResponse, HttpServer, Responder};use serde::{Deserialize, Serialize};use std::sync::Mutex;use std::collections::HashMap;// Rustでは構造体の定義に#[derive(...)]という形式で機能を追加します// SerializeとDeserializeは、JSONとの相互変換を可能にします#[derive(Serialize, Deserialize, Clone)]struct User {    id: u32,    name: String,    email: String,}// AppStateは、アプリケーション全体で共有する状態を定義します// Mutexは、複数のスレッドから安全にデータを変更するために使用しますstruct AppState {    users: Mutex<HashMap<u32, User>>,    user_counter: Mutex<u32>,}// エンドポイントの実装async fn create_user(    state: web::Data<AppState>,    user_data: web::Json<User>) -> impl Responder {    let mut user_counter = state.user_counter.lock().unwrap();    let mut users = state.users.lock().unwrap();        let new_user = User {        id: *user_counter,        name: user_data.name.clone(),        email: user_data.email.clone(),    };        users.insert(*user_counter, new_user.clone());    *user_counter += 1;        HttpResponse::Created().json(new_user)}async fn get_user(    state: web::Data<AppState>,    id: web::Path<u32>) -> impl Responder {    let users = state.users.lock().unwrap();        match users.get(&id.into_inner()) {        Some(user) => HttpResponse::Ok().json(user),        None => HttpResponse::NotFound().finish()    }}#[actix_web::main]async fn main() -> std::io::Result<()> {    // アプリケーションの状態を初期化    let app_state = web::Data::new(AppState {        users: Mutex::new(HashMap::new()),        user_counter: Mutex::new(0),    });    HttpServer::new(move || {        App::new()            .app_data(app_state.clone())            .route("/users", web::post().to(create_user))            .route("/users/{id}", web::get().to(get_user))    })    .bind("127.0.0.1:8080")?    .run()    .await}参考:Actix Web DocumentationSerde JSON DocumentationRust Standard Library - HashMapAPIの使用例# ヘルスチェックcurl http://localhost:8080/health# ユーザーの作成curl -X POST http://localhost:8080/users \  -H "Content-Type: application/json" \  -d '{"name": "John Doe", "email": "john@example.com"}'# ユーザーの取得curl http://localhost:8080/users/0この基本的な実装を理解することで、次のステップであるオブザーバビリティの実装がより理解しやすくなります。Rustの重要な概念（インフラエンジニアが知っておくべきこと）依存関係の管理RustではCargo.tomlファイルで依存関係を管理しますnpmのpackage.jsonやrequirements.txtに相当します[dependencies]name = "version"  # 基本的な依存name = { version = "version", features = ["feature1", "feature2"] }  # 機能を指定モジュールとパスuseキーワードでモジュールをインポートしますmodキーワードで新しいモジュールを定義します// src/logging.rs などの新しいファイルを作成した場合mod logging;  // main.rsでこのように宣言use crate::logging::setup_logger;  // 関数を使用する際はこのように指定エラーハンドリングRustではResult<T, E>型でエラーハンドリングを行います?演算子でエラーを上位に伝播させます// エラーハンドリングの例fn function() -> Result<(), Box<dyn Error>> {    let result = something_that_might_fail()?;  // エラーが発生したら即座にReturnします    Ok(())}オブザーバビリティの実装この辺はぜひもう一度読んでほしいです。syu-m-5151.hatenablog.com依存関係の追加まず、Cargo.tomlに必要な依存関係を追加します。[dependencies]# 既存の依存関係actix-web = "4.4"serde = { version = "1.0", features = ["derive"] }serde_json = "1.0"# オブザーバビリティ関連の依存関係を追加tracing = "0.1"tracing-subscriber = { version = "0.3", features = ["env-filter"] }tracing-actix-web = "0.7"prometheus = "0.13"lazy_static = "1.4"opentelemetry = { version = "0.21", features = ["rt-tokio"] }opentelemetry-otlp = "0.14"tracing-opentelemetry = "0.22"モジュール構造の作成オブザーバビリティ関連のコードを整理するために、以下のような構造を作成します。// src/observability/mod.rsmod logging;mod metrics;mod tracing;pub use logging::setup_logging;pub use metrics::setup_metrics;pub use tracing::setup_tracing;ログの実装今度、別でRust のロギングのライブラリの比較をしたいです⋯。moriyoshi.hatenablog.comwww.forcia.comライブラリが云々よりも実際にちゃんと設計するのも大切ですよね。qiita.com// src/observability/logging.rsuse tracing::{info, warn, error, Level};use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};pub fn setup_logging() {    tracing_subscriber::registry()        .with(            tracing_subscriber::EnvFilter::try_from_default_env()                .unwrap_or_else(|_| format!("{}=info", env!("CARGO_PKG_NAME")).into()),        )        .with(tracing_subscriber::fmt::layer())        .init();}// ログマクロの使用例// info!("メッセージ");// error!("エラー: {}", err);メトリクスの実装// src/observability/metrics.rsuse prometheus::{Registry, Counter, IntCounter, opts};use lazy_static::lazy_static;// メトリクスの定義lazy_static! {    pub static ref REGISTRY: Registry = Registry::new();    pub static ref HTTP_REQUESTS_TOTAL: IntCounter = IntCounter::new(        "http_requests_total",        "Total number of HTTP requests"    ).unwrap();    pub static ref USER_OPERATIONS_TOTAL: IntCounter = IntCounter::with_opts(        opts!("user_operations_total", "Total number of user operations")            .const_label("service", "user-api")    ).unwrap();}pub fn setup_metrics() -> Result<(), Box<dyn std::error::Error>> {    // メトリクスの登録    REGISTRY.register(Box::new(HTTP_REQUESTS_TOTAL.clone()))?;    REGISTRY.register(Box::new(USER_OPERATIONS_TOTAL.clone()))?;    Ok(())}// Prometheusメトリクスエンドポイント用のハンドラpub async fn metrics_handler() -> impl Responder {    let mut buffer = vec![];    let encoder = prometheus::TextEncoder::new();    encoder.encode(&REGISTRY.gather(), &mut buffer).unwrap();        HttpResponse::Ok()        .content_type("text/plain")        .body(buffer)}トレーシングの実装気になればこちらも読んでもらいたいです。syu-m-5151.hatenablog.com// src/observability/tracing.rsuse opentelemetry::sdk::Resource;use opentelemetry::KeyValue;use opentelemetry_otlp::WithExportConfig;pub fn setup_tracing() -> Result<(), Box<dyn std::error::Error>> {    let tracer = opentelemetry_otlp::new_pipeline()        .tracing()        .with_exporter(            opentelemetry_otlp::new_exporter()                .tonic()                .with_endpoint(                    std::env::var("OTLP_ENDPOINT")                        .unwrap_or_else(|_| "http://localhost:4317".to_string())                ),        )        .with_trace_config(            opentelemetry::sdk::trace::config()                .with_resource(Resource::new(vec![                    KeyValue::new("service.name", "user-api"),                ]))        )        .install_batch(opentelemetry::runtime::Tokio)?;    // トレーシングの初期化    opentelemetry::global::set_tracer_provider(tracer);        Ok(())}既存のエンドポイントへの統合// 修正後のcreate_user関数#[tracing::instrument(name = "create_user", skip(state, user_data))]async fn create_user(    state: web::Data<AppState>,    user_data: web::Json<User>) -> impl Responder {    // メトリクスのインクリメント    HTTP_REQUESTS_TOTAL.inc();    USER_OPERATIONS_TOTAL.inc();    // ログの出力    info!(        user_name = %user_data.name,        user_email = %user_data.email,        "Creating new user"    );    let mut user_counter = state.user_counter.lock().unwrap();    let mut users = state.users.lock().unwrap();        let new_user = User {        id: *user_counter,        name: user_data.name.clone(),        email: user_data.email.clone(),    };        users.insert(*user_counter, new_user.clone());    *user_counter += 1;    info!(user_id = new_user.id, "User created successfully");        HttpResponse::Created().json(new_user)}メインアプリケーションの更新#[actix_web::main]async fn main() -> std::io::Result<()> {    // オブザーバビリティの初期化    setup_logging();    setup_metrics().expect("Failed to setup metrics");    setup_tracing().expect("Failed to setup tracing");    let app_state = web::Data::new(AppState {        users: Mutex::new(HashMap::new()),        user_counter: Mutex::new(0),    });    info!("Starting server at http://localhost:8080");    HttpServer::new(move || {        App::new()            .wrap(tracing_actix_web::TracingLogger::default())            .app_data(app_state.clone())            .route("/metrics", web::get().to(metrics_handler))            .route("/users", web::post().to(create_user))            .route("/users/{id}", web::get().to(get_user))    })    .bind("127.0.0.1:8080")?    .run()    .await}3. 動作確認アプリケーションの起動# 開発モードで実行cargo run# 本番モードで実行（最適化あり）cargo run --releaseAPIのテスト# ユーザーの作成curl -X POST http://localhost:8080/users \  -H "Content-Type: application/json" \  -d '{"name": "John Doe", "email": "john@example.com"}'# ユーザーの取得curl http://localhost:8080/users/0# メトリクスの確認curl http://localhost:8080/metricsログの確認# 環境変数でログレベルを設定RUST_LOG=debug cargo run4. トラブルシューティング一般的な問題と解決方法コンパイルエラー依存関係のバージョンの不一致cargo update  # 依存関係を更新ランタイムエラーOpenTelemetryエンドポイントに接続できない# エンドポイントの確認OTLP_ENDPOINT=http://localhost:4317 cargo runメトリクスが表示されないPrometheusレジストリの確認// メトリクスが正しく登録されているか確認println!("Registered metrics: {:?}", REGISTRY.gather());5. 本番環境への展開環境変数の設定# 必要な環境変数export RUST_LOG=infoexport OTLP_ENDPOINT=http://otel-collector:4317export SERVICE_NAME=user-apiDockerファイルの例FROM rust:1.70 as builderWORKDIR /usr/src/appCOPY . .RUN cargo build --releaseFROM debian:buster-slimCOPY --from=builder /usr/src/app/target/release/my-app /usr/local/bin/CMD ["my-app"]6.Rustオブザーバビリティ実装の最終成果物ディレクトリ構造my-rust-api/├── Cargo.toml├── Dockerfile├── .env└── src/    ├── main.rs    └── observability/        ├── mod.rs        ├── logging.rs        ├── metrics.rs        └── tracing.rs各ファイルの実装Cargo.toml[package]name = "my-rust-api"version = "0.1.0"edition = "2021"[dependencies]actix-web = "4.4"serde = { version = "1.0", features = ["derive"] }serde_json = "1.0"tokio = { version = "1.0", features = ["full"] }tracing = "0.1"tracing-subscriber = { version = "0.3", features = ["env-filter"] }tracing-actix-web = "0.7"prometheus = "0.13"lazy_static = "1.4"opentelemetry = { version = "0.21", features = ["rt-tokio"] }opentelemetry-otlp = "0.14"tracing-opentelemetry = "0.22"src/main.rsuse actix_web::{web, App, HttpResponse, HttpServer, Responder};use serde::{Deserialize, Serialize};use std::sync::Mutex;use std::collections::HashMap;use tracing::info;mod observability;use observability::{setup_logging, setup_metrics, setup_tracing, metrics_handler};#[derive(Serialize, Deserialize, Clone)]struct User {    id: u32,    name: String,    email: String,}struct AppState {    users: Mutex<HashMap<u32, User>>,    user_counter: Mutex<u32>,}#[tracing::instrument(name = "create_user", skip(state, user_data))]async fn create_user(    state: web::Data<AppState>,    user_data: web::Json<User>) -> impl Responder {    use crate::observability::metrics::HTTP_REQUESTS_TOTAL;    use crate::observability::metrics::USER_OPERATIONS_TOTAL;    HTTP_REQUESTS_TOTAL.inc();    USER_OPERATIONS_TOTAL.inc();    info!(        user_name = %user_data.name,        user_email = %user_data.email,        "Creating new user"    );    let mut user_counter = state.user_counter.lock().unwrap();    let mut users = state.users.lock().unwrap();        let new_user = User {        id: *user_counter,        name: user_data.name.clone(),        email: user_data.email.clone(),    };        users.insert(*user_counter, new_user.clone());    *user_counter += 1;    info!(user_id = new_user.id, "User created successfully");    HttpResponse::Created().json(new_user)}#[tracing::instrument(name = "get_user", skip(state))]async fn get_user(    state: web::Data<AppState>,    id: web::Path<u32>) -> impl Responder {    use crate::observability::metrics::HTTP_REQUESTS_TOTAL;    HTTP_REQUESTS_TOTAL.inc();    let users = state.users.lock().unwrap();        match users.get(&id.into_inner()) {        Some(user) => {            info!(user_id = user.id, "User found");            HttpResponse::Ok().json(user)        },        None => {            info!(user_id = %id, "User not found");            HttpResponse::NotFound().finish()        }    }}#[actix_web::main]async fn main() -> std::io::Result<()> {    // オブザーバビリティの初期化    setup_logging();    setup_metrics().expect("Failed to setup metrics");    setup_tracing().expect("Failed to setup tracing");    let app_state = web::Data::new(AppState {        users: Mutex::new(HashMap::new()),        user_counter: Mutex::new(0),    });    info!("Starting server at http://localhost:8080");    HttpServer::new(move || {        App::new()            .wrap(tracing_actix_web::TracingLogger::default())            .app_data(app_state.clone())            .route("/metrics", web::get().to(metrics_handler))            .route("/users", web::post().to(create_user))            .route("/users/{id}", web::get().to(get_user))    })    .bind("127.0.0.1:8080")?    .run()    .await}src/observability/mod.rsmod logging;mod metrics;mod tracing;pub use logging::setup_logging;pub use metrics::{setup_metrics, metrics_handler};pub use tracing::setup_tracing;pub(crate) use metrics::HTTP_REQUESTS_TOTAL;pub(crate) use metrics::USER_OPERATIONS_TOTAL;4. src/observability/logging.rsuse tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};pub fn setup_logging() {    tracing_subscriber::registry()        .with(            tracing_subscriber::EnvFilter::try_from_default_env()                .unwrap_or_else(|_| format!("{}=info", env!("CARGO_PKG_NAME")).into()),        )        .with(tracing_subscriber::fmt::layer())        .init();}src/observability/metrics.rsuse actix_web::{HttpResponse, Responder};use prometheus::{Registry, IntCounter, opts};use lazy_static::lazy_static;lazy_static! {    pub static ref REGISTRY: Registry = Registry::new();        pub static ref HTTP_REQUESTS_TOTAL: IntCounter = IntCounter::new(        "http_requests_total",        "Total number of HTTP requests"    ).unwrap();        pub static ref USER_OPERATIONS_TOTAL: IntCounter = IntCounter::with_opts(        opts!("user_operations_total", "Total number of user operations")            .const_label("service", "user-api")    ).unwrap();}pub fn setup_metrics() -> Result<(), Box<dyn std::error::Error>> {    REGISTRY.register(Box::new(HTTP_REQUESTS_TOTAL.clone()))?;    REGISTRY.register(Box::new(USER_OPERATIONS_TOTAL.clone()))?;    Ok(())}pub async fn metrics_handler() -> impl Responder {    let mut buffer = vec![];    let encoder = prometheus::TextEncoder::new();    encoder.encode(&REGISTRY.gather(), &mut buffer).unwrap();        HttpResponse::Ok()        .content_type("text/plain")        .body(buffer)}src/observability/tracing.rsuse opentelemetry::sdk::Resource;use opentelemetry::KeyValue;use opentelemetry_otlp::WithExportConfig;pub fn setup_tracing() -> Result<(), Box<dyn std::error::Error>> {    let tracer = opentelemetry_otlp::new_pipeline()        .tracing()        .with_exporter(            opentelemetry_otlp::new_exporter()                .tonic()                .with_endpoint(                    std::env::var("OTLP_ENDPOINT")                        .unwrap_or_else(|_| "http://localhost:4317".to_string())                ),        )        .with_trace_config(            opentelemetry::sdk::trace::config()                .with_resource(Resource::new(vec![                    KeyValue::new("service.name", "user-api"),                ]))        )        .install_batch(opentelemetry::runtime::Tokio)?;    opentelemetry::global::set_tracer_provider(tracer);        Ok(())}.envRUST_LOG=infoOTLP_ENDPOINT=http://localhost:4317SERVICE_NAME=user-apiDockerfileFROM rust:1.70 as builderWORKDIR /usr/src/appCOPY . .RUN cargo build --releaseFROM debian:buster-slimCOPY --from=builder /usr/src/app/target/release/my-rust-api /usr/local/bin/COPY .env /usr/local/bin/WORKDIR /usr/local/binCMD ["my-rust-api"]動作確認方法アプリケーションの起動:cargo runAPIのテスト:# ユーザーの作成curl -X POST http://localhost:8080/users \  -H "Content-Type: application/json" \  -d '{"name": "John Doe", "email": "john@example.com"}'# ユーザーの取得curl http://localhost:8080/users/0# メトリクスの確認curl http://localhost:8080/metricsこの実装により、以下のオブザーバビリティ機能が利用可能になります。ログ出力：構造化ログが標準出力に出力されますメトリクス：/metricsエンドポイントでPrometheus形式のメトリクスが取得可能トレーシング：OpenTelemetryを通じて分散トレーシングが可能各機能は環境変数を通じて設定可能で、本番環境での運用に対応しています。7. 参考リンクRust公式ドキュメントActix-Web ガイドZero To Production In RustRust Web Programming - Third EditionOpenTelemetry RustPrometheus Rust Clienttracing クレートRustを使った社内用Webアプリの開発・運用を持続させるために、素材メーカーが学んだことまとめこのガイドでは、Rustの経験が浅いインフラエンジニアを対象に、既存のRustアプリケーションにオブザーバビリティを実装する方法を解説しました。アトリビュートやトレイトといったRustの基本的な概念から始め、オブザーバビリティ実装に必要な最小限の知識を説明しました。Cargoを使用した依存関係の管理方法や、モジュール構造の基本についても触れることで、Rustの開発環境への理解を深めることができたと思います。実装面では、ログ出力にtracing、メトリクスにprometheus、分散トレーシングにOpenTelemetryを採用し、それぞれを個別のモジュールとして整理された形で実装する方法を示しました。これにより、構造化ログによる効率的なログ管理や、Prometheusと互換性のあるメトリクスエンドポイント、そしてOpenTelemetryによる分散トレーシングといった実用的な機能を実現することができました。このガイドを通じて、Rustの詳細な知識がなくても、実用的なオブザーバビリティ機能を実装できることを示すことができました。Cargoのパッケージは複雑怪奇なので注意してほしいです。オブザーバビリティの実装は、アプリケーションの健全性監視と問題解決に不可欠です。このガイドが、Rustでのオブザーバビリティ実装に取り組むインフラエンジニアの一助となれば幸いです。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[clickを使ってPythonのコマンドライン引数をきれいにしよう！]]></title>
            <link>https://zenn.dev/akasan/articles/034598cbd096e2</link>
            <guid>https://zenn.dev/akasan/articles/034598cbd096e2</guid>
            <pubDate>Thu, 15 May 2025 13:08:26 GMT</pubDate>
            <content:encoded><![CDATA[今回は、Pythonできれいなコマンドラインインターフェースを実装できるclickについて紹介してみようと思います。 clickとは？clickとはPythonできれいなコマンドラインインターフェースを実装するためのライブラリです。その名前はCommand Line Interface Creation Kitの頭文字をとったようです。レポジトリは以下になります。https://github.com/pallets/clickclickはコマンドラインツールを素早く実装できることに注力しており、従来のsysやargparseを利用したものと比べて格段に実装難易度が下がっていると...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[転職したらMCPサーバーだった件]]></title>
            <link>https://speakerdeck.com/nwiizo/zhuan-zhi-sitaramcpsabadatutajian</link>
            <guid>https://speakerdeck.com/nwiizo/zhuan-zhi-sitaramcpsabadatutajian</guid>
            <pubDate>Thu, 15 May 2025 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[本日、Forkwell さんに悪ふざけに付き合ってもらってイベントやりました。ありがとうございます。「転職したらMCPサーバーだった件」 🎵🧭 というタイトルで登壇しました！🔍 イベント詳細:- イベント名: 転職したらMCPサーバーだった件- 公式URL: https://forkwell.connpass.com/event/354289/- ハッシュタグ: https://x.com/search?q=%23Forkwell_MCP&f=live- 参考資料①: https://speakerdeck.com/nwiizo/kokohamcpnoye-ming-kemae- 参考資料②: https://syu-m-5151.hatenablog.com/entry/2025/03/09/020057- 参考資料③: https://speakerdeck.com/superbrothers/that-time-i-changed-jobs-as-a-kubernetes]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[論文紹介『長文コンテキストLLMとRAGの連携：RAGにおける長文入力の課題克服』]]></title>
            <link>https://sreake.com/blog/introduction-long-context-llms-meet-rag/</link>
            <guid>https://sreake.com/blog/introduction-long-context-llms-meet-rag/</guid>
            <pubDate>Thu, 15 May 2025 01:01:02 GMT</pubDate>
            <content:encoded><![CDATA[RAG（Retrieval Augmented Generation）は、LLM（Large Language Model：大規模言語モデル）が知らない情報を外部から与えてあげることで、LLMの知識を拡張する手法です。R […]The post 論文紹介『長文コンテキストLLMとRAGの連携：RAGにおける長文入力の課題克服』 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apache Guacamoleとはなんなのか？]]></title>
            <link>https://zenn.dev/akasan/articles/6af98c0cd8fcff</link>
            <guid>https://zenn.dev/akasan/articles/6af98c0cd8fcff</guid>
            <pubDate>Wed, 14 May 2025 10:50:43 GMT</pubDate>
            <content:encoded><![CDATA[今回は、Apache Guacamoleとは何かについて調べてみました。今回も以下のツールを使って対象プロジェクトを決めました！https://zenn.dev/akasan/articles/7e30ad266c02c4※ 本企画に関する記事の目的は、それぞれのプロジェクトを本格的に深ぼるのではなく、プロジェクト名⇆どんな内容かをパッと思い出せるようにすることを目指します！※ とはいえ深ぼってみたいプロジェクトがあればどんどん複数連載になると思います。 Apache Guacamoleとは？公式サイトを見ると、Apache Guacamole is a clientle...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[curl使い方についてまとめてみた]]></title>
            <link>https://zenn.dev/akasan/articles/4248554eb4797b</link>
            <guid>https://zenn.dev/akasan/articles/4248554eb4797b</guid>
            <pubDate>Tue, 13 May 2025 11:37:37 GMT</pubDate>
            <content:encoded><![CDATA[今回はcurlの使い方について調べてみました。今までAPIのアクセステストとかに使っていましたが、ちゃんと調べたことなかったので、この際調べてみようということで記事にしました。 curlとは？ドキュメントから拝借すると、curl is used in command lines or scripts to transfer data. curl is also libcurl, used in cars, television sets, routers, printers, audio equipment, mobile phones, tablets, medical de...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fishに引っ越したい人のためのZsh履歴活用術]]></title>
            <link>https://blog.atusy.net/2025/05/13/inherit-zsh-history-in-fish/</link>
            <guid>https://blog.atusy.net/2025/05/13/inherit-zsh-history-in-fish/</guid>
            <pubDate>Tue, 13 May 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[シェルを移行する歳、設定だけでなくコマンド履歴も引き継ぎたいものです。Fishは設定が小さくすみやすい上に情報も多いので、今回はFishからZshのコマンド履歴を活用する方法を紹介します。fzfを使っているので、検索効率もいいですよ。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Neovim最先端のextuiでフローティングウィンドウ化したメッセージをいつでも非表示にする方法]]></title>
            <link>https://blog.atusy.net/2025/05/13/nvim-extui-msgbox-closer/</link>
            <guid>https://blog.atusy.net/2025/05/13/nvim-extui-msgbox-closer/</guid>
            <pubDate>Tue, 13 May 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Neovimのextuiで表示されたメッセージボックスは、所定の時間が経過すると自動で閉じます。<C-L>で非表示にする方法を紹介します。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ランレングス符号化をPythonで実装してみた]]></title>
            <link>https://zenn.dev/akasan/articles/9430f41e6cff7a</link>
            <guid>https://zenn.dev/akasan/articles/9430f41e6cff7a</guid>
            <pubDate>Mon, 12 May 2025 14:35:35 GMT</pubDate>
            <content:encoded><![CDATA[今回は、ランレングス符号化をPythonで実装してみたので、その解説をしてみようと思いまs。 ランレングス符号化とは？ランレングス符号化とはデータ圧縮方式の一つで、連続する同じデータをまとめて扱うことで圧縮をするというものです。たとえばAABBBCCCCというテキストがあった場合に、各文字とそれがいくつ連続しているかという情報に変換してみます。するとA2B3C4のように変換でき、元のテキストの長さ9文字と比較して6文字に収めることができます。ただし、ランレングス符号化では必ず圧縮後のデータ量が小さくなる保証はありません。たとえばABCDEF....XYZのようにアルファベットが...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSHの基本を理解したい(シーケンス図付き)]]></title>
            <link>https://zenn.dev/meziron/articles/a42cef62e06a68</link>
            <guid>https://zenn.dev/meziron/articles/a42cef62e06a68</guid>
            <pubDate>Mon, 12 May 2025 00:00:05 GMT</pubDate>
            <content:encoded><![CDATA[1. 初回 SSH 接続時の流れ (秘密鍵のパスフレーズ入力あり)このシナリオでは、ユーザーが初めて特定のサーバーに SSH 接続を試みるか、あるいは SSH エージェントにまだ該当の秘密鍵がロードされていない状況を想定します。秘密鍵はパスフレーズで保護されているものとします。 登場人物User: 操作を行うユーザーSSH_Client: ユーザーが操作する SSH クライアント（例: sshコマンド）SSH_Agent: SSH エージェントプロセス（秘密鍵をメモリに保持）SSH_Server: 接続先の SSH サーバー 初回接続時の流れのポイント...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Python 3.13の新機能について調べてみた]]></title>
            <link>https://zenn.dev/akasan/articles/423451d2bb8249</link>
            <guid>https://zenn.dev/akasan/articles/423451d2bb8249</guid>
            <pubDate>Sun, 11 May 2025 14:23:08 GMT</pubDate>
            <content:encoded><![CDATA[今回は、Python3.13で導入される新機能についてまとめてみました。私自身、普段は3.11または3.12を使うことが多く、3.13についてはどのような機能が追加されるか認識していなかったので調べてみました。 追加される新機能まず、Python3.13で導入される新機能はこちらにまとまっていますので、詳しくは参照ください。https://docs.python.org/3/whatsnew/3.13.html#other-language-changes よりよいインタラクティブインタプリタPyPyプロジェクトのコードをベースとした新しいインタラクティブシェルをデフォルト...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apache Compress Ant Libraryとはなんなのか？]]></title>
            <link>https://zenn.dev/akasan/articles/ba9cf85b99b68f</link>
            <guid>https://zenn.dev/akasan/articles/ba9cf85b99b68f</guid>
            <pubDate>Sat, 10 May 2025 14:08:12 GMT</pubDate>
            <content:encoded><![CDATA[今回は、Apache Compress Ant Libraryとは何かについて調べてみました。なぜ調べてみようかと思ったかというと、こちらで作成したツールを使う第一号をやってみたかったからです。https://zenn.dev/akasan/articles/7e30ad266c02c4※ 本企画に関する記事の目的は、それぞれのプロジェクトを本格的に深ぼるのではなく、プロジェクト名⇆どんな内容かをパッと思い出せるようにすることを目指します！※ とはいえ深ぼってみたいプロジェクトがあればどんどん複数連載になると思います。 Apache Compress Ant Libraryとは...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[中学17年生]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/05/10/205353</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/05/10/205353</guid>
            <pubDate>Sat, 10 May 2025 11:53:53 GMT</pubDate>
            <content:encoded><![CDATA[はじめに気づけば「中学17年生」だ。肩書きは立派な「ソフトウェアエンジニア」「登壇者」「翻訳者」「執筆者」だが、心の奥底では未だに教室の隅っこでふざけあう中学生のような気持ちでいる。会社のIDカードをぶら下げて歩いていると、「これ、誰かの忘れ物かな？」と思うことがある。大人のコスプレが上手くなっただけで、中身はまだあの頃のまま。表向きは30歳のエンジニアでありながら、内側には未だに中学生の感性を宿している。年齢と肩書きだけが大人の証ではなく、混沌とした感情や未熟さを受け入れる勇気こそが、本当の成長の証かもしれない。教室の窓から外を眺め、「早く大人になりたい」と思っていた頃の自分に、「実はなれてないよ。でも大丈夫、みんな同じさ」と教えてあげたい。幸せな時間はあっという間に過ぎていく。「これもいつか終わるんだろうな」と考えながら楽しいひとときを過ごすのは、30歳を前にした私のような人間の性かもしれない。常に砂時計の砂が落ちていくのを見続けているような感覚だ。過去の自分を否定せず、かといって執着もせず、ただ前を向いて歩き続ける。大人になれば全てが分かると思っていたのに、実際は「分からないことが分かる」だけだった。誰かに言われて落ち込むというより、自分で自分にハードルを上げすぎて、それを超えられなかったときの静かな絶望感の方がはるかに大きい。完璧を目指すあまり、一歩も前に進めなくなるという皮肉。そして「身の程」を知るようになった。自分の能力や限界への理解が深まるほど、逆に自信を持って胸を張れるようになった。ライブラリを全部理解していなくても、「今は分からないけど調べれば理解できる」という余裕が生まれた。自分の限界を知ることは、弱さではなく強さだと気づいた。雨の日に窓辺で立ち尽くし、「早く大人になりたいな」と呟いていた中学生に言ってあげたい。「大丈夫、大人になっても同じように窓の外を眺めているよ。でも、傘を持って外に出る勇気だけは身についたかな」と。年齢は小さな枠組みで「ただの数字」だ。「30歳のエンジニアはこうあるべき」という固定観念に縛られず、自分らしいスタイルで前進していく。いくつになっても成長できると思えるようになったのは、30歳を前にした最大の収穫かもしれない。この中学17年生、すなわち30歳になろうとしているエンジニアは、まだまだ未熟だけれど、その未熟さも含めて自分自身なのだと受け入れる勇気を持ち始めている。今日も窓の外を眺めながら、雨が降っていても傘を持って一歩踏み出す。そんな日々を、中学生のような好奇心と、大人としての覚悟を持って生きていきたい。初めてこの文章を読んでくださる方も、いつも読んでくださっている方も、お時間をいただきありがとうございます。こちらはB面シングルである。A面は「20代最後の一週間を生きるエンジニア、あるいは30歳の扉の前でうろたえる男の独白」をぜひ読んでみてください。口太郎の焦燥「あなたは口から生まれた口太郎」母親からそう言われたことがある。幼稚園では隅っこで本を読む子だったが、小学生から急に喋り始め、人前で話すのが得意になった。母子家庭で暗い空気を変えたかったのかもしれない。もしくは治安の悪い小学校で生き抜く術だったのかもしれません。朝、パーカーを着て、オフィスに向かう。「おはようございます」と言いながら不思議な感覚に襲われる。「なんで俺、ここにいるんだろう？」スタンディングデスクに向かい、MacBookを開く髭面の男。パーマヘアとサングラスの下には、実は中学生の心を隠している。会議室で専門的な議論をする最中にも「これ、本当に俺が言ってるの？」と感じることがある。あの日、教室で絶えず喋っていた少年が、突然30代の身体に転送されたような感覚。「では○○さんはどう思いますか？」と振られた瞬間、内心は複雑だ。話す内容に本当に価値があるのか？単なる思いつきではないのか？表面上は堂々としていても、内心では「これは個人的な経験の押し付けではないか」という自問が絶えない。N=1の経験で語ることへの後ろめたさ。もっと多くの事例、体系的な知識、裏付けのある情報に基づいて話したい。この葛藤は一時期、本当に深刻だった。登壇前夜は「俺の話に価値があるのか」と不安で眠れない。「お前の知識は浅すぎる。もっと文献を読め。もっと体系的に理解しろ」という内なる声。深夜、PCに向かい論文や技術書を読み漁る。この知識が自分の存在証明になるような気がしていた。しかしある日気づいた。なぜこれほど「体系的な知識」にこだわるのか？それは単なる自己防衛ではないのか？そしてまた気づいた。自分のN=1経験を否定することは、誰にでも言える一般論だけを語ることになる。N=1がなければ、本当の「血の通った知識」にはならない。文献から得た知識も、自分の経験を通して初めて命を吹き込まれる。「N=1だから価値がない」のではなく、「N=1だからこそ伝えられる真実がある」のだ。アウトプットへの執着が、質の高いインプットを求める原動力になっていた。登壇準備では「これは他の人でも再現できるのか？」「普遍的な教訓か？」と自問自答する。そして気づいたのは、価値あるアウトプットをするためには質の高いインプットが不可欠だということ。表面的な理解だけでなく、深く掘り下げ、多角的に検証し、時に自分の考えを否定することも辞さない。N=1の限界を認識しつつも、その価値を大切にする。自分の経験こそがリアリティを生み、他者の共感を呼ぶ。一方で、N=1を超えるため、文献を読み、他者の事例を学び、様々な理論を比較検討する。この個人的体験と普遍的知識のバランスを取りながら、インプットとアウトプットのサイクルを回し続けることで、少しずつ自信がついてきた。「これは単なる個人的な意見です」と後ろめたく断るのではなく、「この考えは自分の経験と、こういう体系に基づいています」と胸を張って言えるようになった。完璧ではなくても、N=1の経験者だからこそ語れる真実があると信じ、現時点での最善を尽くすことの大切さを学んだ。それでも言葉が伝わらない日もある。説明すればするほど相手の表情が曇り、終わった後の虚無感。そんな日は電車の窓に映る自分を見て「お前、何様のつもりだ」と責める。その窓に映る自分は、かつての父親に重なる。見た目は大人になったが、中身は「テスト返却、やばい...」と思う少年のまま。それでも今日も本を開き、情報を集める。自分のN=1を大切にしながら、それを超える知識を求め続ける。それが、口太郎としての責任の果たし方なのだ。ふーん、ムッチじゃん三十路の入り口に立って思うのは、自分の知識はまだほんの入り口だということ。10代の頃は「自分はほとんど全てを知っている」と思い、20代で「自分は何も知らない」と気づき、30手前で「何も知らないことすら完全には理解していない」という事実に辿り着いた。でも、これは悪いことじゃない。この「無知の知」こそが学びの始まりだ。30歳という節目を前に、不思議な安心感がある。以前は「知らない」と認めることが弱みを晒すように感じていた。しかし今では、知らないことを素直に認め、学び続ける姿勢こそが強さだと気づいた。成長とは、わからないことが増えていく過程でもあるのだ。人生の解像度が上がってきた。初めて眼鏡をかけたような感覚だ。以前は見えなかった細部、気づかなかった背景、関連性が鮮明に浮かび上がる。かつての私は「この不具合はこのコードが原因だ」と表層的な事実に振り回され、問題を「解決すること」だけに価値を見出していた。機能するコードを書けば満足していた。しかし30歳に近づくにつれ、「なぜこのバグが発生したのか」「どんな思考プロセスがこの決断を導いたのか」という問いに関心が移ってきたのだ。解像度が上がると自分の限界も他者の弱さも鮮明に見えてくる。できると思っていたことができない自分、理解していると思っていたことが理解できない自分に直面する。同僚のコードレビューで見落としがあれば自己嫌悪に陥り、技術書を読んでも理解できない箇所があれば絶望する。同時に、かつては完璧だと思っていた上司にも弱さがあることに気づく。「みんな同じなんだ」という気づきは、時に励みになり、時に孤独を感じさせる。誰もが不安や焦り、コンプレックスを抱えているのだ。人の言動にも多角的な視点を持つようになった。同僚の一言に腹を立てる代わりに、なぜその言葉が出てきたのか、どんな背景があるのかを考えるようになった。そんな自分を周囲は「考えすぎだよ」と笑うこともある。確かに物事を複雑に考えすぎる一方で、新しい技術に出会うと少年のように純粋に熱中する自分もいる。最新ライブラリを発見して「うおおこれヤバい！」と一人テンションが上がる姿は、中学生と何も変わらない。この相反する二面性を、どちらも大切にしていきたいと思う。時々、深い孤独に襲われる。技術的な話をしていても「この人、本当はわかってないな」と感じたり、逆に「自分こそが理解できていないのでは」と不安になったりする。言葉は伝わっているようで、本当は伝わっていない。そんな夜は、パソコンの前で一人、沈黙の中に沈む。人生の解像度が上がるとは、世界をより鮮明に、立体的に、繊細に感じられるようになること。複雑さを恐れず、その豊かさを楽しめるようになること。シンプルさの中にある深い真理を見抜けるようになること。この視点の成熟こそが、30歳を前にした最大の収穫だと思う。この好奇心と探求心は、ずっと失わないでいたい。努力の質を高める戦略的サボり方のススメ子供の頃や20代前半は何事もがむしゃらにやってきた。とにかく時間をかけて、労力をかけて、血反吐を吐くほど頑張ることが美徳だと信じていた。しかし30歳を前にして、ようやく「サボり方」の本質を理解した。やるべきことの絶対的な量を減らすのではなくて、得意なことをより頑張るためにそうじゃないことをやらないことである。振り返れば、私が過剰に努力してきた背景には経験不足へのコンプレックスがあった。「努力で他の人に負けたくない」という思いが、自分を追い込む原動力だった。通勤電車でも技術記事を読み、休日も勉強会に参加し、寝る前もコードを書く。そんな日々が当たり前になっていた。以前の私は、プロジェクトの全てに関わろうとしていた。本来の開発業務だけでなく、新卒採用活動、社内勉強会の企画・運営、技術ドキュメント整備、翻訳、執筆、登壇準備まで次々と引き受けた。結果、Todo リストは膨れ上がり、何から手をつければいいのか分からなくなった。抱え込みすぎて身動きが取れなくなり、どの成果物も中途半端になり、最終的には時間も質も犠牲になった。ある日の内省で気づいたのは、「開発以外の仕事もすべて引き受ける」という強迫観念は美徳ではなく、生産性を下げる要因だということ。今は違う。「これは他の人に任せよう」「この会議は本当に私が出席すべきか」と常に問いかける。自分にとって本質的でないことを手放すことで、核心的な部分により深く集中できるようになった。これが「サボり」という名の知恵の正体だ。「推論能力が高い人は、生まれつきの才能だ」と思っていた時期もあった。しかし現実は異なる。人が「思考力」と呼ぶものの正体は、過去に勉強したり経験したりして蓄積した膨大な記憶の集合体だ。「才能だけで勝負できたらいいのに」という願望は、「努力せずに結果を出したい」という甘えに過ぎない。若かった頃は「努力の量=成果」という単純な方程式を信じていた。しかし実際は、あるポイントを超えると努力の量は結果に結びつかず、むしろパフォーマンスを低下させる。24時間コードを書き続けても、24時間分の価値は生まれない。8時間集中して働き、残りの時間は休息や刺激を得る方が生産性は高まる。今は「直線的な成果」より「累積的な成果」を重視する。一度の努力が何度も実を結ぶシステムを作ることの価値を知った。「楽をするのは悪いことだ」という思い込みを捨て、「どうやったらもっと楽になるか？」を常に考えるようになった。これはずるくなったのではなく、より賢く生きるための知恵だ。今でも時々、深夜まで技術書を読む自分がいる。違いは、それが強迫観念からではなく、純粋な好奇心から生まれていることと、「今日はここまで」と自分で線引きできるようになったこと。経験不足へのコンプレックスを糧にして前に進む方法を見つけた。適切にサボりながらマルチタスクは避け、深い思考力を養いつつ、累積的な成果を上げる方法を模索することが何より大切だと気づいた。これが30歳を前にした私が見つけた、努力の質を高める戦略だ。大人の責任と子供の好奇心のバランス年齢を重ねるごとに、肩に背負うものは確実に増えていく。責任という名の荷物は年々重くなる一方だ。給料は責任に支払われる。プロジェクトの成否、周りの成長、自分のキャリア——すべてが自分の決断にかかっている。「昨日の自分の選択が今日の現実を作っている」と痛感する日々。もはや「環境のせい」という言い訳は通用しない。そんな中で気づいたのは、「責任ある大人」と「好奇心旺盛な子供」という二つの側面を持ち続けることが、私の心のバランスを保っていることだ。これは矛盾ではなく、むしろ相互補完的な関係なのだと分かってきた。重みばかりを背負えば疲弊し、軽やかさだけを求めれば空虚になる。しかし、この二面性はコンプレックスによってさらに複雑になる。「もっとできるはずなのに」という自己期待と「周りと比べて足りない」という不安が交錯する。リリース前日の緊張感、大規模なリファクタリングの決断、若手への指導…。「間違ったらどうしよう」という恐怖と同時に、「自分にできるのか」という疑念が常につきまとう。責任を果たそうとすればするほど、コンプレックスが膨らんでいく皮肉。20代前半は「エンジニアとしてこうあるべき」という理想に縛られていた。流行りのフレームワークを追いかけ、GitHubの草を生やすことに躍起になっていた。SNSでは皆が凄いプロジェクトを作っている。オープンソースに貢献し、技術書を書き、登壇する。そんな人たちと比べて、自分は何もできていない——そんな劣等感に苛まれていた。技術の話で分からないことがあっても、怖かったのだ、無知を晒すことが。しかし30歳に近づく今、そんな見栄や焦りが少しずつ剥がれ落ちてきた。世界最高のプログラマーになる必要はない。自分にしかできないことを見つけ、それを磨いていけばいい。「これが今の自分のベストだ」と受け入れられるようになった。時に内なる声が聞こえてくる。「お前みたいに登壇ばかりしているのは、結局技術から逃げているだけだ」と。それは自分の中の「技術至上主義者」の声だ。すると別の声が反論する。「技術ブログも書いているし、普通にコードも書いている技術顧問として仕事もしているし、OSSも公開している。なぜ自分を否定するんだ」と。この内なる対話は終わりがない。表面上は微笑みながらも、心の中では「10年後、お前はどんな場所にいるだろう」という問いを抱え続けている。コンプレックスを抱えながらも、それを力に変えていく。好奇心は新しい技術への情熱として、責任感は仕事への真摯な姿勢として。この二つが時に矛盾し、時に補完し合いながら、私というエンジニアを形作っている。完璧主義のコンプレックスは、時に自分を追い詰めるが、それが高い基準を保つ原動力にもなる。大切なのは、それに押しつぶされないことだ。経験を重ねるにつれ、未熟な自分の使い方が分かってきた。自分の得意不得意を理解し、ほどよく力の抜けた自分なりのリズムを見つけられるようになった。以前のような「完璧なコード」への執着から解放され、「適切に機能するコード」「メンテナンスしやすいコード」という現実的な価値観へとシフトした。20歳の頃は周りの「すごい人たち」に圧倒されていた。それと比べて30歳を前にした今は、不思議と清々しい気持ちでいる。「完璧なエンジニア」を目指すのではなく、「自分らしいエンジニア」として歩んでいこうという気持ちが強くなった。大人の責任感と子供の好奇心、そして自分特有のコンプレックス。この複雑な混合物を抱えながらも、それを自分の個性として受け入れていく。これが私の見つけた、エンジニアとしてのバランスの取り方だ。いつかは終わるものをちゃんと楽しむ幸せな時間はあっという間に過ぎていく。楽しいプロジェクト、友人との語らい、恋の始まり——すべての良いことにはいつか終わりが来る。「これもいつか終わるんだろうな」と考えながら楽しいひとときを過ごすのは、30歳を前にした私のような人間の性かもしれない。常に砂時計の砂が落ちていくのを見続けているような感覚だ。時間の流れは誰にも平等だ。しかし、その時間をどう感じるかは人それぞれ。『これもいつか終わるんだろうな』と思いながらも、今この瞬間を大切にする。過去の自分を否定せず、かといって執着もせず、ただ前を向いて歩き続ける。砂時計を眺めながらも、その砂で自分だけの城を築いていく。それが生きることの楽しさなのかもしれない。自分の期待に応えられなかった記憶が心に残る。自分で自分にハードルを上げすぎて、それを超えられなかった日々。プロジェクトでの小さなミス、チームでの意見の違い——これらの記憶はなかなか消えない。20代の頃は自分で設定した完璧な基準に届かないことが全てを台無しにするように思えた。しかし今では、それらも人生のグラデーションとして受け入れられるようになった。理想と現実の間にある溝を認め、それでも前に進む勇気が身についた。完璧主義との戦いは今も続いている。コードを書いていて「もっと美しく書けるはず」と何度も書き直す。技術記事を書いたり、読んで「全部理解していないからと次に進めない」と足踏みする。誰からも期待されていないのに、自分だけが自分に無理な期待をかける。この自分との対話は、時に建設的で、時に破壊的だ。他人に期待しすぎない術は身についたが、自分に期待しすぎない術はまだ修行中だ。かつては「なぜ自分はもっとできないのか」と悩んでいた。しかし徐々に、人間には限界があり、すべてを完璧にこなすことは不可能だと受け入れられるようになってきた。自分への期待を下げるのではなく、不完全な自分を認めることで、むしろ心は軽くなった。そして「身の程」を知るようになった。自分の能力や限界への理解が深まるほど、逆に自信を持って胸を張れるようになった。ライブラリを全部理解していなくても、「今は分からないけど調べれば理解できる」という余裕が生まれた。「これはできない」と正直に認めることで、逆に「これならできる」という自信も育つ。自分の限界を知ることは、弱さではなく強さだと気づいた。特に痛感したのは、技術書の「全て」を理解しようとしていた自分の滑稽さだ。分からないページがあると先に進めず、一冊を完璧にマスターしようとして、結局最後まで読めずに挫折することの繰り返し。今なら分かる、必要なところだけを取り入れ、分からないところはいったん保留にして前に進む勇気の大切さを。完璧を目指すあまり、一歩も前に進めなくなるという皮肉。それでも、あの頃の完璧主義が今の技術力の土台を作ったことも確かだ。一つの概念を深く掘り下げ、原理から理解しようとする姿勢。簡単に諦めず、分からないところに何度も立ち返る粘り強さ。非効率だったかもしれないが、その過程で築いた基礎知識と思考の筋力は、今でも私の強みになっている。効率だけを求めていたら、得られなかった深い理解がある。今の「適切なバランス」は、あの頃の遠回りがあったからこそ見つけられたのだ。「大人げない」と言われるのは大人だけだ。だからこそ、時には子供のように新しい技術に夢中になり、全力でコードを書くことも恥ずかしくない。新しいフレームワークを発見して「うおおこれヤバい！」と興奮することも、バグを解決して「よっしゃー！」と雄叫びを上げることも、大切な感情表現だ。感情を抑え込むことが「大人」ではなく、感情と向き合いながらも行動を選択できることが本当の意味での「大人」なのだと分かった。年齢は「小さな枠組み」で「ただの数字」だ。「30歳のエンジニアはこうあるべき」という固定観念に縛られず、自分らしいスタイルで前進していく。若手にもベテランにも学び、「経験が少ない」とも「古い考え方だ」とも思われることを恐れない。いくつになっても成長できると思えるようになったのは、30歳を前にした最大の収穫かもしれない。最も大切なのは、完璧を目指しながらも今この瞬間を楽しむこと。自分で自分を追い詰めるのではなく、時には立ち止まって今日までの道のりを振り返る。砂時計の砂は確実に落ちていくが、だからこそ今この瞬間が尊い。田舎者が見上げる東京の空九州の片田舎から都会へ—その落差は今でも時々現実感を失わせる。自分が歩む道が本当に現実なのか、何かの間違いなのか分からなくなることがある。高校卒業まで過ごした街では、夜になると街灯も少なく、「あそこの交差点では夜一人で歩くな」という暗黙のルールがあった。コンビニまで自転車で20分、映画館は隣の市まで行かねばならない。そんな場所から、突然、光り輝く迷路のような大都会へ放り出された感覚。最初の数ヶ月は毎日が観光気分だった。今では高層ビルのエレベーターで何十階も上がり、窓の外に街を一望できる。駅から会社までの道には世界中の料理が楽しめる店が軒を連ね、夜遅くなっても電車は頻繁に走る。この便利さに未だに慣れない自分がいる。「俺みたいな田舎者がなぜここにいるんだろう」—そう思うことがある。祖父からの電話で「都会は怖くないかい？」と聞かれると、半分笑いながら「うん、まだちょっと怖いよ」と答えてしまう。歩く人の目の冷たさ、文化や人の違い、もしくは自分がおじさんになってこの世の全員が冷たくなったのかもしれない。時々、自分が自分ではないような感覚に襲われる。駅のホームで電車を待っていたり、エレベーターの鏡に映る自分を見たりした時に、「この人は誰だろう？」と思う瞬間がある。それでも最近は変わってきた。かつては圧倒されるばかりだった都会の風景を、自分の可能性として捉えられるようになった。高層ビル群を見上げて「ここまで伸びる可能性が自分にもある」と思えるようになった。多様な価値観や文化に触れ、視野も広がった。おわりに中学17年生である自分。まだまだ成長の余地だらけの自分。それを恥じるのではなく、誇らしく思えるようになった。30歳という節目を迎え振り返ると、「まだ何も始まっていない」という気もする。これからが本番だとも思う。中学17年生としての感性と、30歳のエンジニアとしての経験。矛盾するこの二つの側面が、私という人間を形作っている。大人の顔を持つ中学生も、子供心を忘れない大人も、どちらも本当の私自身だ。複雑で矛盾に満ちた自分をそのまま受け入れ、それを誇りに思える。それこそが、いつまでも成長し続けるための原動力になる。大人になって自分のできないことを目の当たりにして歯がゆさを感じる。「もっと早くこれを知っていれば」と悔やむこともある。でも見方を変えれば、それだけ伸びしろがあるということだ。何でも知っていて、何でもできる人間なんて、それはそれで退屈な人生だろう。常に新しい課題に挑戦し、失敗し、学び続けることこそが、人生を豊かにする。砂時計の砂は上から下に確実に落ちていく。だからこそ、「これもいつか終わるんだろうな」と考えながらも、今この瞬間を大切にしたい。過去の自分を否定せず、執着もせず、前を向いて歩き続ける。「身の程」を知りながらも、少しずつ自分の領域を広げていく。完璧を目指すあまり一歩も前に進めなくなるのではなく、時には「これで十分」と自分を許せる強さも身につけたい。この文章を書いている今も、不安でいっぱいだ。「こんなことを書いて、見られたら恥ずかしい」「こんな風に悩む自分は、弱すぎるんじゃないか」「30歳になっても中学生みたいな考え方をする自分は、ダメなんじゃないか」。そんな声が頭の中でぐるぐる回っている。けれど、そんな弱さも含めて自分なのだと認められるようになってきた。自分との対話も、少しずつ優しいものに変えていきたい。誰かの役に立とうと頑張りすぎて、自分を見失うことも多かった。「良いエンジニア」「良いサラリーマン」であろうとして、本当の気持ちを押し殺してきた。これからは、もう少し素直に、もう少し自分に優しく生きていきたい。「今は分からないけど調べれば理解できる」という余裕を持ちながら、自分のペースで技術を深めていきたい。年齢は「小さな枠組み」で「ただの数字」だ。「30歳のエンジニアはこうあるべき」という固定観念に縛られず、自分らしいスタイルで前進していく。大人のコスプレが上手くなっただけの中学生。それは決して恥ずべきことではない。むしろ、その感覚を大切にしたい。中学生の頃に見上げた空と、今見上げる空は同じなのだから。感情を抑え込むことが「大人」ではなく、感情と向き合いながらも行動を選択できることが本当の意味での「大人」だと分かった。まだまだ成長の余地だらけの自分が晴れやかに歩いていく。ときにはつまずき、立ち止まることもあるだろう。それでも前を向いて、自分らしく生きていく。それが私の「大人になる」ということだ。どんなに時間が経っても、「早く大人になりたいな」と呟いていた中学生の気持ちを忘れないでいたい。ただし今は、「傘を持って外に出る勇気」も持っている。どしゃ降りの雨の中でも、自分の道を歩いていこう。B面なのでwww.amazon.jp他の記事も読んでいただけると嬉しいです。読者になってくれたり、Xをフォローしてくれたりすると、中学生の心がとても喜びます。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Neovim最先端のextuiのcool & smartなcmdlineに特別なカラースキームをあててもっとcoolにしよう]]></title>
            <link>https://blog.atusy.net/2025/05/10/nvim-extui-cmdline-styiling/</link>
            <guid>https://blog.atusy.net/2025/05/10/nvim-extui-cmdline-styiling/</guid>
            <pubDate>Sat, 10 May 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[コマンドラインやメッセージをフローティングウィンドウ化するextuiはcool & smartです。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apache Projects様を引用してブログネタを決めるためのツールを作成しました]]></title>
            <link>https://zenn.dev/akasan/articles/7e30ad266c02c4</link>
            <guid>https://zenn.dev/akasan/articles/7e30ad266c02c4</guid>
            <pubDate>Fri, 09 May 2025 13:35:49 GMT</pubDate>
            <content:encoded><![CDATA[今回は、私が今しているセルフエンドレスアドベントカレンダーのネタを決めるためのツールを作成しましたので紹介します。 対象とするものは？今回はApacheのプロジェクト一覧からランダムに抽出されたプロジェクトを対象とするようにしました。なお、これはネタが思い浮かばなかったり、思い浮かんでるけどなんか違うものがいいなと思った時に実行するようにします。https://projects.apache.org/projects.html 作成したツールについて今回はPythonを使ってツールを作成しました。まずは先ほどのApache Projectsの一覧からアイテムをテキストファ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[よく使うディレクトリ+αへの移動を便利にするzoxideとghqの組み合わせ]]></title>
            <link>https://blog.atusy.net/2025/05/09/zoxide-with-ghq/</link>
            <guid>https://blog.atusy.net/2025/05/09/zoxide-with-ghq/</guid>
            <pubDate>Fri, 09 May 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[zoxideはディレクトリの移動頻度を学習して、検索・移動を楽にするツールです。検索候補にまだ移動したことないけど、今後よく使いそうなディレクトリを追加するともっと便利にできます。この記事では[ghq]で管理しているGitリポジトリを移動先候補に追加する方法を紹介します。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[pyarmorを使ってPythonコードを難読化してみた]]></title>
            <link>https://zenn.dev/akasan/articles/bd61954c87d4ea</link>
            <guid>https://zenn.dev/akasan/articles/bd61954c87d4ea</guid>
            <pubDate>Thu, 08 May 2025 11:15:03 GMT</pubDate>
            <content:encoded><![CDATA[今回は、pyarmorを利用してPythonのコードを難読化してみようと思います。 pyarmorとは？pyarmorとはPythonコードの難読化をするためのツールとなります。コマンドラインツールであり、難読化を初めコードの利用期限の設定などもできるものとなっております。主な特徴としてはいかがあるようです。難読化されたコードもPythonファイルであり、オリジナルのコードと置換するだけでシームレスに置き換えできますセキュリティとパフォーマンスのバランスが取れるように複数の難読化手法を提供関数名やクラス、変数などがリネームされ、復元できない難読化が実行されるいくつかのPy...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitHub Actionsから踏み台経由でプライベートCloud SQLに接続 (OS Login + WIF + SSHトンネル編)]]></title>
            <link>https://zenn.dev/meziron/articles/369504c9d84eba</link>
            <guid>https://zenn.dev/meziron/articles/369504c9d84eba</guid>
            <pubDate>Thu, 08 May 2025 08:55:26 GMT</pubDate>
            <content:encoded><![CDATA[GitHub Actionsから踏み台サーバー経由でプライベートCloud SQLに接続する実践ガイド (OS Login + WIF + SSHトンネル編)CI/CDパイプライン、特にGitHub Actionsから、VPCのプライベートネットワーク内に配置されたCloud SQLデータベースへ安全かつ自動的に接続したい、というニーズは多いのではないでしょうか？この記事では、Workload Identity Federation (WIF), OS Login そして gcloud compute ssh (beta) を組み合わせた、管理しやすい接続方法を解説します。 1...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[クラウドネイティブ環境の脅威モデリング]]></title>
            <link>https://speakerdeck.com/kyohmizu/kuraudoneiteibuhuan-jing-noxie-wei-moderingu</link>
            <guid>https://speakerdeck.com/kyohmizu/kuraudoneiteibuhuan-jing-noxie-wei-moderingu</guid>
            <pubDate>Thu, 08 May 2025 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[イベント登壇資料です。2025/05/08 #TMCTokyohttps://lu.ma/tmc-tokyo-meetup-2025-05]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[FastAPIのエラーハンドリングの基本と、ハンドリング漏れ対策]]></title>
            <link>https://sreake.com/blog/fastapi-error-handling-basics/</link>
            <guid>https://sreake.com/blog/fastapi-error-handling-basics/</guid>
            <pubDate>Thu, 08 May 2025 03:03:29 GMT</pubDate>
            <content:encoded><![CDATA[こんにちは。Sreake事業部の安本篤史（atusy）です。 APIサーバーの実装では、プログラムエラーをハンドリングして、クライアントエラーやサーバーエラーを適切にレスポンスすることが求められます。 同時に、エラーに関 […]The post FastAPIのエラーハンドリングの基本と、ハンドリング漏れ対策 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[入社エントリ：スリーシェイクに入社して5ヶ月目に突入！！]]></title>
            <link>https://zenn.dev/akasan/articles/c9152e75975b51</link>
            <guid>https://zenn.dev/akasan/articles/c9152e75975b51</guid>
            <pubDate>Wed, 07 May 2025 13:42:12 GMT</pubDate>
            <content:encoded><![CDATA[私の経歴まずは簡単に私の経歴についてまとめてみます某技術系の学校にて電気電子系を専攻新卒でロボットやAIの重荷受託開発企業に入社最初はロボットの制御ソフトウェアとかを結構作ってましたが、コロナ禍になってからは完全にソフトウェアにシフト入社後から主に画像処理や業務効率化ソフトウェアの開発に従事2021年11月に2社目となる会社に転職その会社ではがっつりAI開発系の会社で、動画像を対象とした異常検知モデルを主に開発後半からはそのモデルを動かすためのWebアプリケーションのフロントエンド以外（バックエンド実装、CI/CD実装など）全般を担当2025年1月から...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Argo CDのセットアップ方法を解説してみる]]></title>
            <link>https://zenn.dev/kamos/articles/0e1e6af0700f14</link>
            <guid>https://zenn.dev/kamos/articles/0e1e6af0700f14</guid>
            <pubDate>Wed, 07 May 2025 02:18:03 GMT</pubDate>
            <content:encoded><![CDATA[はじめにArgo CDとは、Kubernetesのための継続的デリバリー（CD）ツールです。GitOpsの原則に従い、Gitリポジトリの状態をKubernetesクラスターに同期させることができます。これにより、アプリケーションのデプロイメントや管理が容易になります。Kubernetes環境では広く利用されているArgo CDですが、Argo CD自体のセットアップ方法はいくつかの方法があります。ここでは、Argo CDの初期セットアップについて解説します。 Argo CDの初期セットアップArgo CDを利用可能にするには、以下の手順が必要になります。Argo CD ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Neovim 0.11でシンタックスハイライトがちらつく問題の回避策]]></title>
            <link>https://blog.atusy.net/2025/05/07/workaround-nvim-async-ts-fliker/</link>
            <guid>https://blog.atusy.net/2025/05/07/workaround-nvim-async-ts-fliker/</guid>
            <pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Neovim 0.11から導入された非同期処理の影響で、同一バッファを複数ウィンドウで開くとシンタックスハイライトがちらつくことがあります。0.11.2で修正予定とのことですが、不便なので状況に合わせて非同期・同期を切り替える方法を紹介します。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[自分が課金しているサービス挙げてみた]]></title>
            <link>https://zenn.dev/akasan/articles/f46eda0ba43958</link>
            <guid>https://zenn.dev/akasan/articles/f46eda0ba43958</guid>
            <pubDate>Tue, 06 May 2025 11:06:13 GMT</pubDate>
            <content:encoded><![CDATA[今回は、自分がエンジニアリングに関して課金しているツールを挙げてみました。この記事の作成意図としては、「私これだけ課金して普段やってるんだぜ」という自慢ではなく、「こういうサービスを使って生産性あげたり情報収集してるんだ」ということを共有したいだけです。なお、課金してるけど全然使えてないツールもあるので、ちゃんと整理しないといけないなというのもあり、この記事を書いている部分もあります。 SlackSlackでは私個人として使っているものがあり、過去のメッセージも全て残したいのでproプランを使っています。記事作成時点では月払いにしていて¥1,050/月の支払いとなっています。使い...]]></content:encoded>
        </item>
    </channel>
</rss>