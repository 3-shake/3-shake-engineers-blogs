<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Wed, 19 Feb 2025 22:32:49 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[コードを読んで理解するko build]]></title>
            <link>https://speakerdeck.com/bells17/kotowodu-nteli-jie-suruko-build</link>
            <guid>https://speakerdeck.com/bells17/kotowodu-nteli-jie-suruko-build</guid>
            <pubDate>Wed, 19 Feb 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Jagu'e'r Cloud Native #17 ハイブリッド Meetup ~ 推しの CNCF プロジェクトを紹介するぜ LT ~ の登壇資料です。https://jaguer-cloud-native.connpass.com/event/342024/参考リンク・画像など引用元一覧https://ko.build/ https://github.com/ko-build/ko https://github.com/google/go-containerregistry https://github.com/sigstore/cosign https://github.com/opencontainers/image-spec https://github.com/cncf/sandbox/issues/17 https://github.com/ko-build/ko/issues/791 https://github.com/cncf/sandbox/issues/163 https://github.com/cncf/artwork/blob/main/projects/ko/stacked/color/ko-stacked-color.png https://github.com/cncf/artwork/blob/main/projects/ko/icon/color/ko-icon-color.png]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CNCFの公式ブログ「Japan’s CNCF DevStats 2024」にて、スリーシェイク所属のエンジニア2名がCNCFプロジェクトでの貢献者TOP10にランクイン]]></title>
            <link>https://sreake.com/blog/rank-among-top-contributors-to-cncf-projects-in-japan/</link>
            <guid>https://sreake.com/blog/rank-among-top-contributors-to-cncf-projects-in-japan/</guid>
            <pubDate>Tue, 18 Feb 2025 01:00:00 GMT</pubDate>
            <content:encoded><![CDATA[株式会社スリーシェイク（本社：東京都新宿区、代表取締役社長：吉田 拓真、以下スリーシェイク）は、 CNCF（Cloud Native Computing Foundation）の公式ブログ「Japan’s CNCF DevStats 2024」にて、スリーシェイク所属のエンジニア 早川大貴・長澤翼（以下早川・長澤）がCNCFプロジェクトでの貢献者TOP10にランクインしたことをお知らせします。The post CNCFの公式ブログ「Japan’s CNCF DevStats 2024」にて、スリーシェイク所属のエンジニア2名がCNCFプロジェクトでの貢献者TOP10にランクイン first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS SAM と GitHub Actions で爆速でサーバーレス API をデプロイする]]></title>
            <link>https://sreake.com/blog/aws-sam-quick-deploy-with-github-actions/</link>
            <guid>https://sreake.com/blog/aws-sam-quick-deploy-with-github-actions/</guid>
            <pubDate>Sun, 16 Feb 2025 23:00:00 GMT</pubDate>
            <content:encoded><![CDATA[こんにちは。スリーシェイクの小林です。 本日は AWS Serverless Application Model（以下、AWS SAM）と GitHub Actions を用いて サーバーレス API の作成からデプロイ […]The post AWS SAM と GitHub Actions で爆速でサーバーレス API をデプロイする first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[自分ばっかり大変と思ってるときは気をつけたほうがいい]]></title>
            <link>https://nnaka2992.hatenablog.com/entry/2025/02/16/140946</link>
            <guid>https://nnaka2992.hatenablog.com/entry/2025/02/16/140946</guid>
            <pubDate>Sun, 16 Feb 2025 05:09:46 GMT</pubDate>
            <content:encoded><![CDATA[仕事をしていて数年ほどたつと自分はこんなに頑張ってるのに評価が低いと思うタイミングが来る。これは後々そんなことはなかったと気がつくものの、そのタイミングにいる間は不適当な評価を受けていると思いがちで、自尊心が肥大しがちである。自分ばっかり頑張っていると感じたときは、自分の仕事が本当に価値を生んでいるのかという観点に立ち返ったほうがいい。やらなくてもいい仕事に忙殺されていないか？ 楽してると思ってる人は本質的な仕事に集中しているのではないか？これはイシューからはじめよでいうところの犬の道に陥っている状態である。自分だけ大変と思っているときは、実際には価値を生み出していないにも限らず、仕事量によ達成感を成果と勘違いしていることが多い。自分ばっかり大変だ、となっているときは価値の低いことに時間を投入していないか見つめ直そうという自戒。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[runwasi の cgroup に関する Issue 調査]]></title>
            <link>https://zenn.dev/z63d/articles/48eb53ca4e8467</link>
            <guid>https://zenn.dev/z63d/articles/48eb53ca4e8467</guid>
            <pubDate>Fri, 14 Feb 2025 13:44:01 GMT</pubDate>
            <content:encoded><![CDATA[概要runwasi で cgroup に関する Issue があり、それについての調査の記録です。忘れないように。OCI Runtime ~ コンテナプロセス周りのデバッグのコツを少しつかめた。cgroup に関しても学ぶことが多かった。 runwasirunwasi は Kubernetes で Ｗasm を動かすための shim をつくるライブラリ & いくつかの Wasm runtime 用の shim です。runwasi については以前 Kubernetes Meetup Tokyo #68 KubeCon NA 2024 Recap で話した時の資料と...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[nwiizo はなぜ同じPlatform Engineeringを語るのに、2つの異なる資料を作ったのか #devsumi #PFEM]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127</guid>
            <pubDate>Thu, 13 Feb 2025 22:11:27 GMT</pubDate>
            <content:encoded><![CDATA[はじめにこんにちは、nwiizoです。2025年2月13日に2つのイベントで登壇する機会をいただきました。これは私が翻訳に関わった「Kubernetesで実践するPlatform Engineering」の発売を記念した販促登壇でしたが、原著者さんが書籍の内容自体について話をされると知っていたので、私はPlatform Engineeringという分野に関する自分なりの考えや経験を共有させていただく内容にしました。Kubernetesで実践する Platform Engineering作者:Mauricio Salatino翔泳社Amazon2つの異なるイベントでの発表同日に性質の異なる2つのイベントで話をさせていただきました。Developers Summitでは「インフラをつくるとはどういうことなのか、あるいはPlatform Engineeringについて」というタイトルで、幅広い技術者の方々に向けてPlatform Engineeringの基本的な考え方から実践的なアプローチまでをお話ししました。 speakerdeck.com一方、PFEM特別回では「Platform Engineeringは自由のめまい - 技術の選択における不確実性と向き合う」というテーマで、より専門的な視点からPlatform Engineeringの課題や可能性について話をしました。ただ、この回は資料作りや登壇などの疲れもピークに達していて、本来伝えたかったことと違う説明をしてしまった部分もあったように思います。 speakerdeck.com翻訳作業から得た気づき今回の発表の背景には、「Kubernetesで実践するPlatform Engineering」の翻訳作業があります。2025年2月19日に翔泳社から発売されるこの本は、"Platform Engineering on Kubernetes"の日本語翻訳版で、3-shake の同僚と一緒に取り組んだプロジェクトです。翻訳作業を通じて、Platform Engineeringの課題や可能性について考える機会を多く得ることができました。原著者のsalaboyさんのハンズオンや過去の発表資料、記事を読む中で、Platform Engineeringに対する彼の考え方を学ばせていただきました。実際に一緒に登壇する機会もいただき、私の拙い英会話力にも関わらず温かく接していただいたことも貴重な経験でした。登壇から学んだこと今回の登壇準備と実践を通じて、技術共有における重要な気づきがありました。最も重要だと感じたのは、聴衆のバックグラウンドに合わせて内容を適切に調整することです。Developers SummitとPFEM特別回では、参加者層が大きく異なりました。Developers Summitでは、DevOpsやPlatform Engineeringに詳しくない参加者が多く、日常的な開発における具体的な問題点から入り、それをPlatform Engineeringの文脈で捉え直すことで基礎的な理解を促しました。一方、PFEM特別回では参加者との間に共通認識があったため、より実践的な課題や技術的解決策について深く掘り下げることができました。この違いは技術資料の作成にも影響しました。資料作成では、「知的な発見」と「理解するためのコスト」のバランスが重要です。知的な発見とは「なるほど、そういう考え方があったのか」という新しい視点を得られる瞬間ですが、その発見に至るまでの説明が複雑すぎると理解へのコストが大きくなりすぎてしまいます。多くの技術プレゼンテーションでは既知の問題とその解決策を列挙することに終始しがちですが、それだけでは予想外の学びには至りません。予想外の学びこそが、聴衆の心に残る知的な発見として認知されやすいのです。ここで重要なのは、単に「よくある課題とその解決策」を並べるだけでなく、「明確には意識していなかったけれど、言われてみれば確かにそうだった」という新たな気づきを提供することです。例えば、日々の開発で感じている不便さを Platform Engineering の文脈で捉え直すことで、それが個人の問題ではなく構造的な課題だったと気づく瞬間を作り出せます。かといって基礎的な前提ばかりでは、聴衆にとって新しい気づきが得られません。Developers Summitでは基礎と新知見のバランスを重視し、PFEM特別回では基礎的な説明を最小限に抑え、より深い技術的な議論に時間を割きました。それ以外の「イライラ」「焦り」「困惑」といった感情は、むしろ読者の集中力を削ぎ、本質的な学びを妨げてしまう。技術資料は、共感と発見のポジティブな体験に徹するべきなのだ。確かに、高度な実装や複雑な概念を詰め込んだ資料を作ることは可能だ。しかし、そのような難解な内容は、読者の理解を遠ざけ、結果として伝えたい本質が埋もれてしまう。読者の多くがこのような否定的な感情を抱く資料は、作成者の自己満足に過ぎないと言えるでしょう。2025年ならではの発見として、Xのアルゴリズム変更により画像が優先表示されるようになった現在、印象に残るスライドを含めることが効果的です。複雑な概念を一枚の図で表現することで、SNS上での共有や議論が促進され、発表後もコミュニティでの対話が継続する可能性が高まります。また、Platform Engineeringという新しい分野では、技術コミュニティにおける「共通言語」の重要性も実感しました。Developers Summitではキーとなる概念を具体例と共に丁寧に説明し、PFEM特別回では既存の共通言語を活用してより専門的な議論を展開しました。知識を一方的に伝えるのではなく、参加者との対話を通じて互いに学び合える場を作ることを心がけ、翻訳者兼登壇者としての過剰な発言は控えました。この経験を通じて、技術を伝えることは単なる知識の転送ではなく、聴衆のコンテキストに寄り添いながら対話を生み出すプロセスだと実感しました。イベントの性質や参加者層によって求められる内容や深さが異なることを学び、今後もこの気づきを活かしながら効果的な技術共有を目指していきます。おわりに2つのイベントでの発表資料は異なる切り口で作成しましたが、どちらも力を入れて準備させていただきました。より詳細な内容についてはぜひ資料をご覧いただければと思います。また、完全版については機会があればお話させていただきたいと考えていますので、ご興味がありましたらぜひご依頼ください。最後に、この経験を通じて得られた知見を今後の活動にも活かしていきたいと考えています。ご清聴いただいた皆様、そして貴重な機会を提供してくださった関係者の皆様に心より感謝申し上げます。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[インフラをつくるとはどういうことなのか、 あるいはPlatform Engineeringについて]]></title>
            <link>https://speakerdeck.com/nwiizo/inhurawotukurutohadouiukotonanoka-aruihaplatform-engineeringnituite</link>
            <guid>https://speakerdeck.com/nwiizo/inhurawotukurutohadouiukotonanoka-aruihaplatform-engineeringnituite</guid>
            <pubDate>Thu, 13 Feb 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2025年02月13日 Developers Summit 2025 13-E-4 にて「インフラをつくるとはどういうことなのか、 あるいはPlatform Engineeringについて - Platform Engineeringの効果的な基盤構築のアプローチ」というタイトルで登壇します。同日にPFEM特別回 でも登壇するのですが資料頑張って作ったのでそっちも読んでください。完全版は機会があればお話するので依頼してください。イベント名:  Developers Summit 2025公式URL: https://event.shoeisha.jp/devsumi/20250213セッションURL: https://event.shoeisha.jp/devsumi/20250213/session/5546登壇ブログ: https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Platform Engineeringは自由のめまい ]]></title>
            <link>https://speakerdeck.com/nwiizo/platform-engineeringhazi-you-nomemai</link>
            <guid>https://speakerdeck.com/nwiizo/platform-engineeringhazi-you-nomemai</guid>
            <pubDate>Wed, 12 Feb 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2025年02月13日 Kubernetesで実践するPlatform Engineering発売記念！ PFEM特別回にて「Platform Engineeringは自由のめまい - 技術の選択における不確実性と向き合う」というタイトルで登壇します。同日にDevelopers Summit 2025 でも登壇したのですが資料頑張って作ったのでそっちも読んでください。イベント名: Kubernetesで実践するPlatform Engineering発売記念！ PFEM特別回公式URL: https://platformengineering.connpass.com/event/342670/登壇ブログ: https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Neovimで始めるGitHub Copilot - copilot.lua による Language Server の設定方法]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/11/183337</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/11/183337</guid>
            <pubDate>Tue, 11 Feb 2025 09:33:37 GMT</pubDate>
            <content:encoded><![CDATA[github.blogこの設定は一時的なものであり、LSPのインストーラーが対応したらそちらで対応してください。github.comはじめに2025年2月10日、GitHubはCopilot Language Server SDKを公開しました。これは、エディタやIDEがLanguage Server Protocol（LSP）を通じてGitHub Copilotと連携できるものです。このリリースは、開発者がより柔軟にCopilotを利用できるようになる重要な一歩です。今までGitHub CopilotはVS Code、Visual Studio、JetBrains IDEs、Vim/Neovim、そして最近ではXcodeでも利用可能でしたが、これらのエディタすべてがCopilot Language Serverを使用して実装されていました。GitHubは開発者の選択肢を重視し、好みのエディタでCopilotを使用できるようにすることを目指しているみたいです。Copilotの進化NeovimでのCopilot利用は、以前はgithub/copilot.vimを通じて行われていました。このVimscriptベースのプラグインは、多くの開発者に利用されてきた公式の実装です。その後、Lua APIを活用したzbirenbaum/copilot.luaが登場しましたが、これも内部的にはcopilot.vimを通じてGitHub Copilotと通信を行っていました。このアーキテクチャでは、copilot.luaがNeovimのモダンなLua APIを活用した柔軟なインターフェースを提供し、バックエンドではcopilot.vimが実際のCopilotサービスとの通信を担当するという二層構造になっていました。そして今回のLanguage Server SDKの公開により、エディタとCopilotの連携方法が標準化され、直接Language Server Protocolを介してCopilotと通信できるようになりました。これにより、中間レイヤーが不要になり、より効率的で安定した実装が可能になりました。前提条件Neovim 0.8.0以上Node.js 18.x以上GitHubアカウント（Copilotのサブスクリプション）インストール手順1. Copilot Language Serverのインストールまず、Neovimの設定ディレクトリにCopilot用のディレクトリを作成し、Language Serverをインストールします。# Copilot用ディレクトリの作成mkdir -p ~/.config/nvim/copilot/# Language Serverのインストールnpm install @github/copilot-language-server -g --prefix ~/.config/nvim/copilot/# 実行権限の付与chmod +x ~/.config/nvim/copilot/bin/copilot-language-server2. Neovimプラグインのインストールlazy.nvimを使用している場合、以下の設定を~/.config/nvim/lua/plugins/copilot.luaに追加します。return {  "zbirenbaum/copilot.lua",  lazy = false,  priority = 1000,  config = function()    require("copilot").setup {      suggestion = { enabled = false },      panel = { enabled = false },      server_opts_overrides = {        trace = "verbose",        cmd = {          vim.fn.expand("~/.config/nvim/copilot/bin/copilot-language-server"),          "--stdio"        },        settings = {          advanced = {            listCount = 10,            inlineSuggestCount = 3,          },        },      },      filetypes = {        yaml = true,        markdown = true,        help = false,        gitcommit = true,        gitrebase = true,        hgcommit = false,        svn = false,        cvs = false,        ["."] = false,        ["*"] = true,      },    }  end,}3. 認証設定Neovimを起動後、以下のコマンドで認証を行います。:Copilot authブラウザが開き、GitHubアカウントでの認証が求められます。認証が完了すると、Copilotが使用可能になります。設定の説明設定の主要なポイントを解説します。この設定は私の設定ファイルなので自由に設定してください。suggestionとpanelenabled = false: デフォルトのサジェスト機能を無効化していますserver_opts_overridescmd: インストールしたLanguage Serverのパスと起動オプションを指定vim.fn.expand("~/.config/nvim/copilot/bin/copilot-language-server"): Language Serverの実行ファイルのパスを指定。vim.fn.expand()関数を使用して~をホームディレクトリに展開"--stdio": Language Serverが標準入出力（stdio）を使用してNeovimと通信することを指定するオプションsettings.advanced:   - settings.advanced:listCount: 候補の表示数（10個）inlineSuggestCount: インラインサジェストの数（3個）filetypes各ファイルタイプでのCopilotの有効/無効を設定["*"] = true: デフォルトですべてのファイルタイプで有効トラブルシューティングLanguage Serverが見つからない場合Error: Language server is not installed or not executableパスが正しいか確認実行権限が付与されているか確認chmod +xコマンドで実行権限を付与認証エラーの場合:Copilot authを再実行GitHubアカウントのサブスクリプション状態を確認まとめGitHub Copilot Language Server SDKの公開により、Neovimでより直接的にCopilotを利用できるようになりました。これまでのcopilot.vimを経由する方式から、直接Language Server Protocolを使用する方式への移行により、より効率的で保守性の高い実装が可能になりました。新しいSDKはnpmjs.comで公開されており、誰でも利用可能です。この変更により、エディタ開発者はより簡単にCopilotを統合でき、ユーザーはより安定した開発体験を得られるようになります。また、この方法は本来であれば不要でありlspconfigにコントリビューションすればよい()。github.com参考リンクGitHub Copilot Language Server SDK announcementCopilot.lua DocumentationLanguage Server Protocol SpecificationGitHub Copilot.vim]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[n週刊アトデ 2025-02-10]]></title>
            <link>https://blog.atusy.net/2025/02/10/atodeyomanakata/</link>
            <guid>https://blog.atusy.net/2025/02/10/atodeyomanakata/</guid>
            <pubDate>Mon, 10 Feb 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[アトデヨム、ウソジャナイ、ヨムノタノシー]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[kubeadmでk8sクラスタを構築する]]></title>
            <link>https://zenn.dev/moz_sec/articles/k8s-by-kubeadm</link>
            <guid>https://zenn.dev/moz_sec/articles/k8s-by-kubeadm</guid>
            <pubDate>Fri, 07 Feb 2025 02:00:09 GMT</pubDate>
            <content:encoded><![CDATA[KubernetesKubernetesとは、複数のコンピュータでコンテナをいい感じに動かしてくれるものです。Kubernetesの説明はいろんなサイトに書いてあるため、そちらを参照してください。公式サイトも参考になります。https://kubernetes.io/docs/concepts/overview/ kubeadmkubeadmは、Kubernetesクラスタを構築するためのツールの１つです。他にも、kopsやkubesprayなどがありますが、kubeadmは最小限の構成でクラスタを構築することができます。https://kubernetes.io/...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GKEのComputeClassに関する調査]]></title>
            <link>https://sreake.com/blog/gke-computeclass/</link>
            <guid>https://sreake.com/blog/gke-computeclass/</guid>
            <pubDate>Fri, 07 Feb 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[はじめに Sreake事業部で長期インターンをしている竜です。 本記事では、GKEのカスタムコンピューティングクラスについて調査を行いました。 カスタムコンピューティングクラスの概要 GKEのカスタムコンピューティングク […]The post GKEのComputeClassに関する調査 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes History Inspector(KHI)を触ってみた]]></title>
            <link>https://speakerdeck.com/bells17/kubernetes-history-inspector-khi-wohong-tutemita</link>
            <guid>https://speakerdeck.com/bells17/kubernetes-history-inspector-khi-wohong-tutemita</guid>
            <pubDate>Wed, 05 Feb 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[スライド内の参考リンク・画像など引用元一覧https://zenn.dev/bells17/scraps/67c852e99ad5a5 https://github.com/GoogleCloudPlatform/khi https://zenn.dev/google_cloud_jp/articles/9a7dc0df5e8906 https://blog.g-gen.co.jp/entry/kubernetes-history-inspector-introduction https://x.com/kyasbal_k/status/1884500133183905976 https://x.com/ryusa_eng/status/1886328704432996463 https://x.com/kkuchima/status/1884503826029228189 https://github.com/GoogleCloudPlatform/khi/blob/main/docs/en/images/gettingstarted-history.pnghttps://github.com/GoogleCloudPlatform/khi/blob/main/docs/en/images/gettingstarted-views.png https://k8s-novice-jp.connpass.com/event/343899/ https://jaguer-cloud-native.connpass.com/event/342024/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[mini.testでNeovimプラグインのテストに入門した]]></title>
            <link>https://blog.atusy.net/2025/02/05/mini-test-nvim/</link>
            <guid>https://blog.atusy.net/2025/02/05/mini-test-nvim/</guid>
            <pubDate>Wed, 05 Feb 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[以前書いた、Budouxを使ったWモーションをE/B/gEに対応させてプラグインにしようかなと思って、atusy/budouxify.nvimを作った。BudouxによりNeovimのWモーションを拡張し、日本語文章の区切りに移動させるhttps://blog.atusy.net/2024/12/27/nvim-budoux-motion/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[滅びゆく「なぜ？」と「どうして？」の学びをどう受け止めればよいのか？新人エンジニアの指導で感じる生成AI時代の指導の難しさ]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/04/203205</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/04/203205</guid>
            <pubDate>Tue, 04 Feb 2025 11:32:05 GMT</pubDate>
            <content:encoded><![CDATA[anond.hatelabo.jpこの記事を読み、その内容は学生だけでなく、ソフトウェアエンジニアの教育にも適用できると考えました。以下、ソフトウェアエンジニア（以降、技術者と表記）の教育について、私見を述べさせていただきます。はじめに新人エンジニアや学生のOJTやハンズオン研修を担当する中で日々実感することがあります。生成AIの台頭により従来の指導方法が大きく揺らいでいるという現実です。特に、表面的な成果物の質と実際の理解度の乖離が、技術者教育における新たな課題として浮き彫りになってきています。この変化は、技術教育に関わる私たち全員に、新たな挑戦と機会をもたらしています。生成AIは確かに技術教育の在り方を根本から問い直すきっかけとなりましたが、それは同時に、より本質的な技術力の育成について考え直す機会でもあります。技術の進化に伴う変化は不可避ですが、その中で私たちにできることは、この変化を前向きに捉え、新しい時代にふさわしい技術教育の形を模索していくことではないでしょうか。このような問題意識のもと、本稿では2025年に向けた技術者教育の新しいアプローチについて考察していきます。変化する学習の風景これまでの技術習得プロセスには、ある種の必然性がありました。ライブラリの使い方で躓き、設計パターンの意図を理解できず悩み、そしてそれらを一つずつ克服していく。この過程で、指導者は学習者の理解度を正確に把握し、適切なサポートを提供することができました。しかし、生成AIの登場により、この学習の構図が大きく変容しています。ある日の出来事が、この変化を象徴的に表していました。新人エンジニアに依頼した簡単なAPIの実装が、驚くほど短期間で、かつ高品質なコードとして提出されたのです。しかし、コードレビューの場での会話は、次のような展開となりました。「このミドルウェアの実装パターンを選択した理由は？」「はい...Copilotが提案したものをそのまま採用しました」「例外処理の設計思想については？」「申し訳ありません。その部分はAIの出力そのままで...」更に印象的だったのは、実装中のトラブルシューティングでの出来事でした。学生がハンズオン研修で詰まっていたため、私がエラーメッセージを確認して原因を特定し、問題のファイルを開こうとした瞬間、そのファイルは既にCopilotによって修正されました。本来であれば、エラーの原因を一緒に探り、解決策を考えることで、貴重な学びの機会となるはずでした。私たちはどう学んでいるのか　――創発から見る認知の変化 (ちくまプリマー新書)作者:鈴木宏昭筑摩書房Amazon理解を伴わない実装力技術者として、私自身も生成AIを積極的に活用しています。それは現代のソフトウェア開発において、もはや必須のスキルといえるでしょう。しかし、「理解を伴わない実装力」という新たな現象が、技術者教育に大きな課題を投げかけています。最近経験した出来事が、この課題を端的に表していました。新人エンジニアが実装したAPIは、一見すると申し分のない出来栄えでした。しかし、設計の意図を問うと「ChatGPTやCopilotの提案をそのまま採用した」という答えが返ってきます。エラーが発生した際も、その原因を一緒に探ろうとした矢先、Copilotが自動的に修正を施してしまう。こうした状況は、技術者としての本質的な成長機会を失わせる危険性をはらんでいます。具体的な例として、複雑なマイクロサービスアーキテクチャを構築できるのに、RESTful APIの基本原則が説明できない。網羅的なユニットテストを実装できるのに、テストピラミッドの考え方が理解できていない。Kubernetesのマニフェストが書けるのに、コンテナ化の利点を説明できない。このような状況が増えています。しかし、ここで注目すべきは「理解を伴わない実装力」にも異なるタイプが存在することです。生成AIに依存した実装を行うエンジニアと、知識はあるが実践との紐付けが発展途上のエンジニアです。前者は、高度なアーキテクチャのコードを書けるように見えても、その設計思想を説明できず、エラーが発生すると即座にAIに解決を委ねます。コードレビューでの「なぜ」という問いに対して、「AIが提案したから」や「はぁ？」という支離滅裂な回答に終始し、自身の実装に対する責任感や当事者意識が希薄です。一方後者は、デザインパターンやアーキテクチャの理論的理解はあるものの、それを実践に活かしきれていない段階にいます。しかし、レビューで指摘されると「あ、確かにそうですね」と納得し、エラーに直面しても自分なりの仮説を立てて解決を試みます。不完全でも自分の言葉で説明しようとする姿勢があり、試行錯誤を重ねながら、徐々に知識と実践を紐づけていっています。これまでの教育現場では、学習者の成長過程が自然と把握できていました。エラーメッセージと格闘し、設計パターンの意図を咀嚼し、少しずつ理解を深めていく。その過程で、「基礎概念は理解できている」「応用に課題がある」といった具合に、理解度の段階が明確だったのです。しかし今や、生成AIの支援により、理解度と実装力の相関が著しく弱まっています。特に前者のようなタイプの場合、表面的な成果物の品質だけでは、技術力を測ることが困難になっているのです。後者のような「知識はあるが実践が追いついていない」エンジニアの場合、時間とともに着実な成長が期待できますが、AIに依存した実装では、その成長機会自体が失われてしまう危険性があります。技術者教育の本質を見つめ直す私たちが目指すべきは、単なる「実装力」の向上ではありません。なぜその技術が必要とされるのか、どのような文脈で使用されるべきか、実装による影響をどう評価するか。そういった本質的な理解力を持つエンジニアの育成こそが重要です。「動くコード」を書けることは、技術者としての第一歩に過ぎません。技術力とは、技術選択の理由を説明できること、その技術がもたらす長期的な影響を予測できること、そしてプロジェクト全体における個々の実装の位置づけを理解できることです。これは単にコードを書けるということとは本質的に異なる能力です。syu-m-5151.hatenablog.comしかし、生成AIの存在は、この「理解のプロセス」を大きく変えつつあります。AIの出力を適切に編集することで「完成」にたどり着けてしまう現状は、技術習得における重要な学びの機会を奪っているかもしれません。エラーとの格闘、設計の試行錯誤、レビューでの指摘と修正—これらの経験は、表面的には非効率に見えても、実は技術者としての成長に不可欠なプロセスなのです。さらに重要なのは、技術の進化に対する適応力です。特定の実装パターンやツールの使い方を覚えることよりも、新しい技術が登場した際にその本質を理解し、適切に評価できる力を養うことが重要です。この適応力は、深い理解と経験に裏打ちされた「考える力」からしか生まれません。syu-m-5151.hatenablog.comこれからの技術者教育2025年に向けたエンジニア育成の新しいアプローチ1. 生成AIとの対話力を含めた包括的な技術教育カリキュラムの構築生成AIを効果的に活用するスキルそのものを技術教育の重要な要素として位置づける必要があります。AIへの適切なプロンプト作成能力はもはやエンジニアの基礎スキルとして不可欠です。しかし、ここで重要なのは単にAIに答えを求めることではありません。具体的には、AIに実装方針を提案させる際も、その根拠となる設計原則や参考文献を確認し、実装の背景にある理論や概念について理解を深めていく必要があります。さらに、特定の実装パターンのメリット・デメリットを比較検討させることで、技術選択の判断力を養うことができます。また、エラーが発生した際は、その原因と対処法についての理解を深めるための質問を重ねることで、問題解決力を育てていきます。つまり、AIを「答えを得るためのツール」ではなく、「理解を深めるための対話相手」として活用する姿勢が求められます。生成AIとの対話を通じて、技術の本質的な理解を深める習慣を身につけることが重要です。また、AIが出力したコードやドキュメントを適切に評価・検証する力も重要な要素となっています。プロンプトエンジニアリングの技術に加えて、AIと人間それぞれの得意分野を理解し、適切な役割分担ができる判断力が必要です。特に、AIの出力を鵜呑みにせず、常に批判的に検証し、その背景にある原理原則を理解しようとする姿勢を育むことが重要です。2. 実装スキルから設計思考力へのフォーカスシフトコーディングスキルの習得以上に、システム設計の原則や思想を理解することが重要になってきています。実装の詳細は生成AIに任せられる時代だからこそ、私たちはより本質的な設計思考力の育成に注力すべきです。システム設計において重要なのは、ビジネス要件を技術要件に適切に変換する力です。スケーラビリティ、可用性、保守性といった非機能要件をどのように満たすのか。開発効率と運用コストのバランスをどう取るのか。こうしたトレードオフを適切に判断し、プロジェクト全体の成功に導く力が、これからのエンジニアには求められます。個々の実装の詳細は生成AIにある程度任せられる一方で、システム全体を俯瞰する力は2025年においては人間にしか培えない能力なのです。この力を育むためには、実際のプロジェクトの中で判断が必要な場面に直面させ、その経験を積ませることが効果的です。例えば、新しい機能追加の要件を受けた際に、既存システムへの影響範囲を分析させたり、将来の拡張性を考慮した設計を検討させたりすることで、システム全体を見渡す視点を養うことができます。3. プロセスと思考を重視した評価方法への転換技術者の評価においても、成果物の完成度だけでなく、そこに至るまでの思考プロセスを重視する必要があります。なぜその設計を選択したのか、どのような代替案を検討したのか、想定されるリスクにどう対処するのか。こうした意思決定の過程とその根拠を、自分の言葉で説明できる力が極めて重要です。特に注目すべきは、長期的な視点での判断力です。目の前の実装だけでなく、その選択が将来的なシステムの保守性や拡張性にどのような影響を与えるのか。技術負債との向き合い方や、チーム全体での知識共有の方法など、持続可能な開発を実現するための視点も評価の重要な要素となります。この文脈で懸念されるのが、表面的な成果や「スムーズな進捗」を演出しようとする風潮です。これは特定の層に限った問題ではなく、現代の開発環境が生み出す構造的な課題といえます。重要なのは、そうした見せかけの生産性を求めない組織文化の醸成です。真摯な試行錯誤やチャレンジを認め、失敗から学ぶことを奨励する環境づくりこそが、本質的な技術力の向上につながります。結局のところ、私たちが目指すべきは、表面的な実装の速さや完成度ではなく、持続可能な開発を実現するための思考力と判断力を備えたエンジニアの育成なのです。そのためには、短期的な成果だけでなく、プロセスの質を重視する評価体系への転換が不可欠です。これは単なる評価方法の変更ではなく、組織全体で取り組むべき文化的な転換といえるでしょう。おわりに生成AI時代における技術者教育は、まさに過渡期にあります。単純な「できる/できない」の二元論では測れない、技術力をどう育成し、評価していくのか。これは私たち指導者自身にとっても、大きな学びの機会となっています。この課題に対する明確な解答は、業界全体としてもまだ模索段階にあります。しかし、技術教育の在り方を根本から見直し、新しい時代に適応した指導方法を確立していく必要性は明らかです。エンジニアの評価や育成に関する従来の常識は、生成AIの台頭により大きく揺らいでいます。多くの組織や教育機関が同様の課題に直面している中、重要なのは個々の取り組みや知見を共有し、業界全体として解決策を模索していく姿勢です。エンジニア育成は組織の壁を超えた共通の課題であり、オープンな対話と試行錯誤を通じてこそ、新しい時代にふさわしい技術教育の形が見えてくるのではないでしょうか。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Terraform使いがOpenTofuについて入門してみる]]></title>
            <link>https://blog.masasuzu.net/entry/2025/02/04/185305</link>
            <guid>https://blog.masasuzu.net/entry/2025/02/04/185305</guid>
            <pubDate>Tue, 04 Feb 2025 09:53:05 GMT</pubDate>
            <content:encoded><![CDATA[この記事はSRETT #11で発表されたものに加筆修正したものです。OpenTofuに関して調べたこととなります。3-shake SRE Tech Talk #11 オンサイト - connpass speakerdeck.com先日KubeCon + CloudNativeCon North America 2024に行ってきてました。その中で共同開催されていたOpenTofu Dayを見てOpenTofuに関して興味を持ちました。普段はTerraformを利用しており、あまりOpenTofuについては触ってきてないので、この機会に深堀りをしてみたいと思いました。参考: OpenTofu Dayまた、社内活動として技術検証を行っており、私の検証テーマとしてTerraformを中心としたIaC周りの技術調査を行ってるので、ちょうどいい機会だとも思いました。おことわりOpenTofuとはライセンス問題HashiCorp社の言い分コミュニティの懸念OpenTofuとTerraformの違いコマンドファイルRegistryremovedブロックState Encryptionbackendブロックの変数参照バージョン管理Security checkLinterCI/CDまとめ参考リンクライセンス変更フォークソースコード問題OpenTofuを使うためにHachiCorp買収おことわりこの記事はTerraformを知っている前提で書かれています。そのため細かい説明を省略している箇所があります。また筆者は普段はTerraformをメインで使用しており、OpenTofuを業務利用はしていません。OpenTofuとは2023年8月にTerraformを含めたHashiCorp製品のライセンスの変更を発表したことにより、これを懸念した企業やコミュニティによりOpenTFとしてフォークされます。その後OpenTFの名称はHashiCorp社の商標権への懸念からOpenTofuに改名されます。そのときの議論はissueを見るとたどることができます。参考: https://github.com/opentofu/opentofu/issues/2962023年9月にLinux Foundation傘下となります。参考: Linux Foundation Launches OpenTofu: A New Open Source Alternative to TerraformTerraformをフォークしたものなので基本的な使い勝手は同じです。コマンド名が terraform から  tofu に差し替えられています。ライセンス問題前項でさらっとライセンス変更と言いましたが、HashiCorp社は2023年8月に今後のリリースに関してライセンスを変更する旨を発表しました。これはオープンソースライセンスであるMozilla Public License（MPL） v2.0から商用サービスでの利用を制限するBusiness Source License（BUSLあるいはBSL） v1.1に変更するものです。参考: HashiCorp adopts Business Source Licenseこれに対して、利用企業およびコミュニティが懸念を示し、OpenTofuをフォークしたという流れになります。HashiCorp社の言い分従来BSLは本番使用(production use)が制限されます。ただし、ライセンスのParameterとして追加使用許可(Additional Use Grant)をすることによりTerraformと「競合製品」でなければ本番利用の制限はないとしてます。参考: https://github.com/hashicorp/terraform/blob/v1.11/LICENSE「競合製品」とは、有料サポート契約を含む第三者に販売される製品で、HashiCorp のライセンス対象製品の有料版の機能と大幅に重複する製品を指します。TerraformでいうところのHCP Terraform(Terraform Cloud)を想定しているのかと思います。また組織内でTerraformをホストして利用することは「競合製品」とはみなされなません。そのため利用者としては基本的には問題なく利用できるとしてます。参考: HashiCorp Licensing FAQ問題となるのはTerraformの機能を有償で提供しているSaaSと読み取れます。コミュニティの懸念HashiCorp社が説明したBSLと追加使用許可はあいまいであるとしてます。そのため、自身の行動が許諾範囲内か判断が困難である。「競合製品」の定義やライセンス自体が今後変更されるか不確実であると懸念を示してます。また、TerraformはOSSの恩恵を受けて成長してきてため、これからもオープンソースソフトウェアであるべきだと信じていると表明しています。参考: OpenTofu FAQOpenTofuのスポンサー企業としては以下のとおりです。HarnessGruntworkSpaceliftenv0ScalrHarnessはCI/CDまわりのSaaS製品、Gruntworksはterragruntの開発元、Specelift、env0、ScalrはTerraformをホストするSaaSサービスを運営しています。OpenTofuとTerraformの違いこの項ではそれぞれの違いについて説明していきます。OpenTofuはTerraform1.6-alphaからフォークされているのでそれまでに実装されていたものは互換があります。また、Terraform 1.6以降に追加された機能に関しても随時取り込まれています。そのため、1.5までの機能を使っているのであれば素直に移行できるかとは思います。バージョンごとに移行ガイドがあるので細かくはそれを参照すると良いです。参考: https://opentofu.org/docs/intro/migration/ただし、別のコードベースで開発がされているので、OpenTofuのみの独自実装もあります。ここではいくつか個人的に気になる違いについてあげていきます。コマンド基本的には terraform を tofuに置き換えていただければよいです。サブコマンドは一緒です。# Terraformterraform initterraform planterraform applyterraform destroy# OpenTofutofu inittofu plantofu applytofu destroyファイルterraform由来の .tf または .tofu の拡張子のファイルを設定ファイルとして認識します。json形式の .tf.json または .tofu.json の拡張子のファイルも同様です。同じディレクトリ内に.tf と .tofu の両方のファイルがあった場合、.tofu ファイルだけ認識して、.tf ファイルは無視されます。foo.tf  # <=== このファイルは無視されるfoo.tofuRegistryTerraform同様OpenTofuにもプロバイダーやモジュールのレジストリがあります。Terraform: https://registry.terraform.io/OpenTofu: https://registry.opentofu.orgOpenTofu Registryが登場したときに存在したTerraform Providerは反映されています。反映されていないものに関してもissueを立てれば反映されるようですhttps://github.com/opentofu/registryremovedブロックremovedブロックは既存のリソースを削除することなく、stateから削除することができます。それぞれ下記のように記述できます。下記の例ではAWSインスタンス自体は削除せず、stateから外すことを意図してます。# Terraformremoved {  from = aws_instance.example  lifecycle {    destroy = false  }}# OpenTofuremoved {  from = aws_instance.example}Terraformではlifecyleブロックでdestroy=falseの記述が必須です。参考: https://developer.hashicorp.com/terraform/language/resources/syntax#removing-resourcesOpenTofuではremovedブロックを書くだけで stateから削除されます。参考: https://opentofu.org/docs/language/resources/syntax/#removing-resourcesremovedブロックでやりたいことはstateから削除することなので、単純にリソースを削除したいなら対象resouceブロックを削除すればいいので、Terraformの記述方法のほうがへんな気がします。State EncryptionTerraformでは平文でStateに保存されてしまうという問題がありましたが、OpenTofuではクライアントサイドで暗号化する機能が追加されてます。クラウドプロバイダーの KMSキーなどを利用してStateを暗号化することができます。参考: State and Plan Encryption | OpenTofuTerraformではたとえsopsプロバイダーで機密情報を暗号化しても、Stateファイルには平文で保存されているので権限があれば機密情報が見えてしまう状態にありました。State自体が暗号化されることにより機密情報をよりセキュアに扱えるようになります。参考: Terraformのsopsプロバイダーを使用するだけで機密情報は守られるのか - 目の前に僕らの道があるbackendブロックの変数参照OpenTofuではbackendブロックで変数参照ができます参考: https://opentofu.org/docs/language/settings/backends/configuration/#variables-and-localsvariable "env" {  type    = string}locals {  path = "${var.env}/terraform.tfstate"}terraform {  backend "local" {    path = local.path  }}tofu init -var="env=dev" -reconfiguretofu plan -var="env=dev"Terraformで同じことをしたい場合、-backend-configを渡さないといけないため、backendを切り替える際に不便となります。terraform init -backend-config=./envs/dev/terraform.backend -reconfigureterraform plan -vars-file=./envs/dev/terraform.tfvarsOpenTofu DayのLTで紹介されてた環境名だけを渡して挙動を切り替えるパターンが現状だとterraformでは使えません参考:On Best Practices with OpenTofu Structuringバージョン管理複数プロジェクトでTerraform or OpenTofuを使う場合、プロジェクトごとに使用バージョンを管理する必要があります。いくつか選択肢を見ていきます。Terraformのバージョン管理ツールとしてよく使われるtfenvはOpenTofuには対応しません。参考:https://github.com/tfutils/tfenv/issues/409代わりにTerraformとOpenTofuに対応したtenvができました。こちらを利用すると良さそうです。https://github.com/tofuutils/tenv私はTerraformも合わせてプロジェクト内のツールのバージョン管理をまとめてasdfでやってますが、こちらは対応しています。https://github.com/virtualroot/asdf-opentofu自分はあまり使わないのですが、同じようなツールのaquaやmiseも両対応しています。https://aquaproj.github.io/https://github.com/jdx/miseSecurity checkTerraformだとtfsec(現 trivy config)がセキュリティチェックとして使われてるかと思います。ディスカッションはされており優先順位をつけて対応するとのことです。参考: https://github.com/aquasecurity/trivy/discussions/5069LintertflintはOpenTofuをサポートしないようです。参考: https://github.com/terraform-linters/tflint/issues/2037Linterの議論自体はissueで続いているようです。参考: https://github.com/opentofu/opentofu/issues/2213CI/CDHCP Terraform(旧Terraform Cloud)に相当するSaaSとしては、OpenTofuスポンサーのSpacelift、env0、Scalrなどがあります。tfactions、atlantis、diggerもOpenTofuに対応している模様です。まとめ現時点でOpenTofuに移行するするべきか?の問については、利用者側として現状では引き続き様子見かと思います。足回りも概ね揃ってきているが、まだ足りないエコシステムもあります。気になるところではIBM社にHashiCorp社の買収による統合完了の様子も追っていきたいところです。予定では2025年の1-3月期に統合完了するとのことなので、その後なにか動きがあるかもしれません。参考: IBM社によるHashiCorp社買収についてとはいえ、1つのツールが使えなくなることで業務が止まるのは避けたいので常に選択肢は複数取っておきたいところです。エンジニアとしてはOpenTofuに限らず、Pulumi、CDK(AWS)なども選択肢として取っておきたいです。それはそれとして、OpenTofuはTerraformとは違う独自進化をしているので、変更を追っていきたいところです。個人的にはState暗号化とかBackendの変数参照とかTerraformに入ってほしいです。それでは良い豆腐ライフを!、、、。ここまで書いてきたのですが、minamijoyoさんのTerraform職人のためのOpenTofu再入門2024がものすごく詳しいので、この記事以上に参考になるかと思います。参考リンクライセンス変更HashiCorp adopts Business Source LicenseHashiCorp | The Infrastructure Cloud CompanyHashiCorp、全製品のライセンスを商用利用に制限があるBSLライセンスに変更すると発表 － PublickeyTerraformのライセンスの変更とその影響何故、TerraformのBUSL-1.1へのライセンス変更は反発を受けたのか？ – Shuji SadoTerraform のライセンス変更についての考察 #Azure - QiitaフォークTerraformのフォークが「OpenTofu」としてLinux Foundation傘下で正式ローンチ。OpenTFから改名 － Publickeyソースコード問題【Infostand海外ITトピックス】ライセンスをめぐって対立　HashiCorpと「Terraform」派生のOpenTofu - クラウド WatchHashiCorp、TerraformをフォークしたOpenTofuに対しコードの不正コピーを警告。OpenTofuは完全否定 － PublickeyOpenTofuを使うためにTerraform職人のためのOpenTofu再入門2024 #Terraform - QiitaTerraform職人のためのOpenTofu入門 #Terraform - QiitaOpenTofuopentofu/opentofu: OpenTofu lets you declaratively manage your cloud infrastructure.Migrating to OpenTofu 1.7.x from Terraform | OpenTofuHachiCorp買収IBMがHashiCorpを64億ドルで買収、TerraformとAnsibleのシナジー効果などを見込む | IT LeadersIBM Japan Newsroom - ニュースリリースIBM社によるHashiCorp社買収について]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スリーシェイク、「Developers Summit 2025」にて出展・登壇、および書籍「Kubernetesで実践するPlatform Engineering」の先行販売・サイン会を実施]]></title>
            <link>https://sreake.com/blog/developers-summit-2025/</link>
            <guid>https://sreake.com/blog/developers-summit-2025/</guid>
            <pubDate>Tue, 04 Feb 2025 01:00:00 GMT</pubDate>
            <content:encoded><![CDATA[株式会社スリーシェイク（本社：東京都新宿区、代表取締役社長：吉田 拓真、以下スリーシェイク）は、2025年2月13日（木）・14日（金）に開催される「Developers Summit 2025」にSRE総合支援サービス「Sreake（スリーク）」のブースを出展します。The post スリーシェイク、「Developers Summit 2025」にて出展・登壇、および書籍「Kubernetesで実践するPlatform Engineering」の先行販売・サイン会を実施 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[技術記事のレベル低下は誰のため？ - 楽して学べる幻想と戦うためにもしくはバズるという快楽に対する防衛術]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/04/094857</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/04/094857</guid>
            <pubDate>Tue, 04 Feb 2025 00:48:57 GMT</pubDate>
            <content:encoded><![CDATA[はじめにバズっている技術ブログやSNSの投稿を見ていて「今さらこんな基本的なTipsが数千いいねされるのか」と感じることはありませんか。「とりあえずDockerを使ってみよう」「React超入門」といった手取り足取り系の投稿がバズり続け、タイムラインには毎日のように初心者向けコンテンツが流れています。同じような入門記事が異なる執筆者によって際限なく生み出されるこの状況は、技術情報の共有における興味深い現象と言えるでしょう。では、なぜこのような現象が続いているのでしょうか。「学習」に対する一般的な認識多くの普通の人にとって「学習」は快適な体験であるべきだという認識があります。自分が理解できる範囲の内容を読み、既存の知識と結びつけて徐々に理解を深めていく。分からないことがあれば基礎的な内容に立ち返る。実際、人間の脳は安全な環境で学習することを好む傾向にあり、多くの人は「コンフォートゾーン」の中で学習を進めていきたいという自然な欲求を持っています。これは特に新しい技術やプログラミングのような複雑な分野においても顕著に表れます。このような学習パターンは、人間の認知的な特性とも合致しています。新しい情報は、既存の知識体系の中に無理なく組み込めるときに最も効果的に定着するからです。そのため、急激な学習曲線や理解が追いつかない内容は、多くの人にとってストレス要因となり、学習意欲を低下させる原因となり得ます。自己啓発の教科書　禁欲主義からアドラー、引き寄せの法則まで作者:アナ・カタリーナ・シャフナー日経ナショナル ジオグラフィックAmazon現実の技術学習との乖離しかし実際の技術習得のプロセスはもっと異なるものです。理解できない内容を何度も読み返し、エラーと格闘しながら少しずつ理解を積み重ねていく必要があります。分からない用語を調べながら文脈を理解していくという地道な作業が求められます。時には数時間かけてもエラーが解決できず、徹底的にドキュメントを読み込んだり、ソースコードを追いかけたりする忍耐も必要です。このような現実の学習プロセスは、多くの人が求める「快適な学習体験」とは大きくかけ離れています。つまり、技術習得には「コンフォートゾーン」を意図的に離れ、混乱や不確実性と向き合う覚悟が必要なのです。このギャップこそが「お手軽入門記事」が無限に生産され続ける根本的な理由の一つと言えるでしょう。人々は常により優しい入り口、より分かりやすい説明を求め続けているのです。私たちはどう学んでいるのか　――創発から見る認知の変化 (ちくまプリマー新書)作者:鈴木宏昭筑摩書房Amazon需要と供給の関係バズっている技術ブログやSNSでは特徴的な循環が生まれています。チュートリアル的なコンテンツへの大きな需要があり、入門記事の方が読者数やフォロワーを獲得しやすい傾向にあります。複雑な技術解説や深い考察よりも、「とりあえず動くものを作る」といった実践的なコンテンツの方が、圧倒的に高いエンゲージメントを得られるのです。このような状況下では、執筆者もまた市場原理に従わざるを得ません。高度な技術記事を書いても読者が少なければ、自然と入門コンテンツにシフトしていくでしょう。結果として、さらに多くの基礎的なハウツー記事が生み出され、SNSのタイムラインを埋め尽くしていく循環が続いています。これは技術情報の生態系における一種の「自然淘汰」とも言えるかもしれません。上級者向けコンテンツの価値と課題上級者向けコンテンツには確かに大きな価値があります。業界全体の技術力向上に貢献し、特定の問題に対する深い洞察を共有することで、エンジニアとしてのキャリアアップにも役立ちます。しかしこれらのコンテンツは必然的に読者層が限定されます。前提知識が必要で理解に時間がかかり、即座に実践できない場合が多いためです。視点の多様性と技術記事の価値重要な点として、技術記事の「難易度」は極めて相対的です。ある人にとっての入門記事が、別の人にとっては上級者向けのコンテンツとなるという状況は珍しくありません。私たちは往々にして自分の知識レベルをベースラインとして記事の価値を判断しがちですが、技術学習においてはそれぞれが異なる文脈や背景を持っているのです。この認識は、技術記事を書く際の重要な視点となります。プラットフォームと個人の戦略技術記事プラットフォームにはトレンドとは別に普遍的な価値を持つ記事が確実に存在します。分散システムの設計原則やスケーラビリティの考察、セキュリティアーキテクチャの分析など、時代を超えて参照される価値のある記事です。しかしそれらの記事はトレンド入りしづらく、時として埋もれてしまいます。質の高い技術記事が、読者の多様な技術レベルや興味に応じて適切に届けられる仕組みづくりがプラットフォーム側には求められています。一方で個人の執筆戦略としては、より包括的なアプローチが有効です。時にはトレンドに乗った入門記事を書きつつ、自分の技術的な知見や経験を活かした深い考察も定期的に発信していく。理想的な技術ブログの運営には、読者の多様性を意識したバランスが重要です。入門的なコンテンツから実践的な応用記事、さらにはアーキテクチャ設計や性能改善といった本質的な議論まで、幅広い層に価値を提供することができます。このような多層的なアプローチは、技術コミュニティ全体の成長に貢献します。それぞれの記事が、異なる段階にいる読者にとって「次のステップ」となる可能性を持っているからです。執筆者は自身の経験を共有しながら、同時に読者それぞれの文脈での学びをサポートすることができるのです。Science Fictions　あなたが知らない科学の真実作者:スチュアート・リッチーダイヤモンド社Amazonまとめ表層的な入門記事が無限に存在する現状は決して悪いことではありません。むしろそれは多くのエンジニアが学習意欲を持っている証であり、業界の健全性を示すものとも言えます。執筆者としては読者の「コンフォートゾーン」を少しずつ広げていけるような段階的な難易度設定と丁寧な説明を心がけることが重要でしょう。そうすることで読者の成長を支援しながら、技術コミュニティ全体の発展に貢献できるはずです。アメリカは自己啓発本でできている作者:尾崎俊介平凡社Amazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[WebAssembly を開発する為にTrunkビルドツールを試してみました。]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/01/120804</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/01/120804</guid>
            <pubDate>Sat, 01 Feb 2025 03:08:04 GMT</pubDate>
            <content:encoded><![CDATA[はじめにWebAssemblyの進化により、RustでWebアプリケーションを構築する機会が増えています。特にYewフレームワークは、React風の使い勝手とRustの堅牢性を組み合わせた開発が可能です。本記事では、Yewアプリケーション開発をスムーズにするビルドツールTrunkについて、セットアップから実践的なテクニックまで解説します。yew.rsTrunkとはTrunkは、WebAssemblyアプリケーションに特化したビルドツールです。そして、以下のような特徴を持ちます。ホットリロードによる高速な開発体験アセット管理の自動化（画像、CSS、その他静的ファイル）最小限の設定で開発環境の構築が可能プロダクションビルドの最適化機能trunkrs.dev環境構築まず、必要なツールをインストールします：# WebAssemblyターゲットの追加rustup target add wasm32-unknown-unknown# Trunkのインストールcargo install trunktrunkrs.devプロジェクトの作成以下のコマンドで新規プロジェクトを作成します：cargo new yew-appcd yew-appCargo.tomlに必要な依存関係を追加：[dependencies]yew = { git = "https://github.com/yewstack/yew/", features = ["csr"] }yew.rsシンプルなカウンターアプリの実装src/main.rsにカウンターアプリのコードを実装します：use yew::prelude::*;#[function_component(App)]fn app() -> Html {    let counter = use_state(|| 0);    let onclick = {        let counter = counter.clone();        move |_| {            let value = *counter + 1;            counter.set(value);        }    };    html! {        <div>            <button {onclick}>{"+1"}</button>            <p>{ *counter }</p>        </div>    }}fn main() {    yew::Renderer::<App>::new().render();}yew.rsHTMLテンプレートの準備index.htmlをプロジェクトルートに作成：<!DOCTYPE html><html>    <head>        <meta charset="utf-8" />        <title>Yew Counter App</title>    </head>    <body></body></html>開発サーバーの設定と起動Trunk.tomlで開発サーバーの設定をカスタマイズできます：[serve]# 開発サーバーのアドレスaddress = "127.0.0.1"# ポート番号port = 8080# アセットディレクトリassets = ["public"]# プロキシ設定（APIサーバーなど）[[proxy]]backend = "http://localhost:3000/api/"開発サーバーを起動：trunk serve --openこれでhttp://localhost:8080にアプリケーションが立ち上がります。アセット管理のベストプラクティス静的ファイルはpublicディレクトリで管理します：public/  ├── images/      # 画像ファイル  ├── styles/      # CSSファイル  ├── fonts/       # フォントファイル  └── favicon.ico  # ファビコンtrunkrs.devプロダクションビルドの最適化本番環境向けのビルドでは、以下の最適化が可能です：# リリースビルドtrunk build --release# WebAssemblyコードの最適化trunk build --release --filehashデバッグとトラブルシューティング開発中によくあるトラブルの対処法：ビルドエラー時はtrunk cleanでキャッシュをクリアアセットが反映されない場合はtrunk serve --watchで監視を強化WebAssemblyのデバッグには開発者ツールのConsoleを活用(フロントエンド開発初心者で学びが多かった⋯)おわりにTrunkを活用することで、Yewアプリケーションの開発体験が大幅に改善されます。特にホットリロードとアセット管理の自動化は、開発効率を向上させる重要な機能です。参考リンクTrunk GitHubYew GitHubWebAssembly]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2025-01-31 吉祥寺.pm 37 初めての海外カンファレンス]]></title>
            <link>https://speakerdeck.com/masasuzu/2025-01-31-ji-xiang-si-dot-pm-37-chu-metenohai-wai-kanhuarensu</link>
            <guid>https://speakerdeck.com/masasuzu/2025-01-31-ji-xiang-si-dot-pm-37-chu-metenohai-wai-kanhuarensu</guid>
            <pubDate>Fri, 31 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[KubeCon NA 2024に行ってきたのでその経験を話します。吉祥寺.pm 37で話しました。https://kichijojipm.connpass.com/event/339040/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Lambda Web Adapter の Function URL を Cloudfront で公開する]]></title>
            <link>https://blog.1q77.com/2025/01/aws-lambda-web-adapter-with-cloudfront/</link>
            <guid>https://blog.1q77.com/2025/01/aws-lambda-web-adapter-with-cloudfront/</guid>
            <pubDate>Thu, 30 Jan 2025 15:01:24 GMT</pubDate>
            <content:encoded><![CDATA[これまでのおさらい前回、AWS Web Adapter を用いた AWS Lambda に Function URL を使って公開することはできた。今回はこれをカスタムドメインで公開するべく CloudFront と連携させます。OAC (Origin Access Control)2024年4月に CloudFront と Function URL の間を OAC (Origin Access Control) を使って Function URL への直アクセスを防ぐことができるようになっていたのでこれも試します。Amazon CloudFront が Lambda 関数 URL オリジンのオリジンアクセスコントロール (OAC) を新たにサポート]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Lambda Web Adapter でお手軽 Web Service 公開]]></title>
            <link>https://blog.1q77.com/2025/01/aws-lambda-web-adapter/</link>
            <guid>https://blog.1q77.com/2025/01/aws-lambda-web-adapter/</guid>
            <pubDate>Wed, 29 Jan 2025 15:40:00 GMT</pubDate>
            <content:encoded><![CDATA[ずっと AWS にも Cloud Run が欲しいなあと思っていました。AppRunner はコレじゃない…そんなある日、あれ？ AWS Lambda でいけんじゃね？と思い検索すると]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RustとYewでポモドーロタイマーを作ってみた]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/01/29/120446</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/01/29/120446</guid>
            <pubDate>Wed, 29 Jan 2025 03:04:46 GMT</pubDate>
            <content:encoded><![CDATA[はじめにイベントで定期的に登壇をしていて休日出勤したのに消化しきれなかった代休が余っていたので、3連休爆誕させて以前から興味のあったWebAssemblyの学習に時間を使ってみることにしました(いくつか本も読んだのでいつか紹介します。)。「とりあえず何か作ってみる」のが一番の近道だと考え、日々の私生活でも使えそうなポモドーロタイマーを実装することにしました。WebAssemblyのエコシステムを調べていく中で、RustのYewというフレームワークが目に留まりました。ReactライクなAPIでWebAssemblyアプリケーションが作れるとのことで、ちょっと開発することにしました。github.com使用技術の選定理由Rust：WebAssemblyのための優れたツールチェーンを持っており、学習コストは高めですが、型安全性と高いパフォーマンスが魅力でしたYew：ReactライクなAPIで、コンポーネントベースの開発が可能。フロントエンド開発者にとって親しみやすい設計になっていますTrunk：ビルドツールとして採用。trunk serveだけで開発サーバーが立ち上がる手軽さが気に入りました技術スタックRust (v1.75.0)Yew (v0.21)WebAssemblyTrunk (Bundler)プロジェクトの概要ポモドーロテクニックは25分の作業時間と5分の休憩を交互に行う時間管理手法です。今回実装したアプリケーションでは、以下の機能を提供します：基本的なタイマー機能25分のカウントダウン開始/停止/リセット制御視覚的なフィードバックタスク管理機能タスクの記録実際の作業時間の追跡完了したタスクの履歴管理データエクスポート機能マークダウン形式での出力クリップボードへのコピー機能実装の詳細プロジェクトのセットアップまず、必要なツールとターゲットをインストールします：rustup target add wasm32-unknown-unknowncargo install trunk主要なデータ構造タスクとタイマーの状態管理のための構造体：#[derive(Clone, Debug)]struct Task {    description: String,    completed_at: DateTime<Local>,    duration: i32,}pub struct PomodoroTimer {    time: i32,    running: bool,    interval: Option<Interval>,    current_task: String,    completed_tasks: Vec<Task>,    initial_time: i32,    markdown_visible: bool,    markdown_content: String,}タイマー機能の実装Yewのコンポーネントシステムを利用して、タイマーの制御を実装しました：fn update(&mut self, ctx: &Context<Self>, msg: Self::Message) -> bool {    match msg {        Msg::Start => {            if !self.running {                let link = ctx.link().clone();                self.interval = Some(Interval::new(1000, move || {                    link.send_message(Msg::Tick);                }));                self.running = true;            }            true        }        // 他のメッセージハンドラ...    }}クリップボード機能の実装WebAssemblyからブラウザのクリップボードAPIを利用する実装：Msg::CopyToClipboard => {    if let Some(window) = window() {        let navigator = window.navigator();        let clipboard = navigator.clipboard();        let _ = clipboard.write_text(&self.markdown_content);    }    true}開発で直面した課題と解決策WebAssemblyとブラウザAPIの連携課題：クリップボード機能の実装で型の不一致が発生解決：web-sysクレートの適切な機能を有効化し、型の変換を正しく処理状態管理とライフタイム課題：コンポーネントの状態管理でライフタイムエラーが発生解決：use_stateとuse_mut_refを適切に使い分けて実装セットアップと実行方法プロジェクトの作成：cargo new --lib yew-pomodorocd yew-pomodoro依存関係の追加（Cargo.toml）：[dependencies]yew = { version = "0.21", features = ["csr"] }gloo-timers = "0.3"web-sys = { version = "0.3.64", features = ["console", "HtmlInputElement", "Window", "Navigator", "Clipboard"] }wasm-bindgen = "0.2"chrono = "0.4"アプリケーションの実行：trunk serve開発を通じて学んだことWebAssemblyの基本概念JavaScriptとの連携方法パフォーマンスの最適化ポイントRustの特徴的な機能所有権システム型安全性の恩恵コンパイル時のエラーチェックの強力さフロントエンド開発での新しい視点パフォーマンスを意識したコンポーネント設計WebAssemblyならではの制約と利点所感代休を使って新しい技術に触れる時間が作れたのは、とても良い経験になりました。特に、JavaScriptで書いているような処理をRustで書き直してみることで、言語の特性や設計の違いについて深く考える機会になりました。WebAssemblyは確かにまだエコシステムが発展途上ですが、Yewのような成熟したフレームワークを使えば、実用的なアプリケーションを比較的スムーズに開発できることが分かりました。ソースコードプロジェクトのソースコードはGitHubで公開しています。コメントや改善案があれば、お気軽にIssueやPull Requestを送ってください。次のステップ今回の学習を通じて、WebAssemblyの可能性を実感できました。次は以下のような発展的な内容に挑戦してみたいと考えています：Rustの非同期処理を活用した機能拡張WebAssemblyのパフォーマンス測定と最適化より大規模なアプリケーションでの実践参考リンクRust公式ドキュメントYewドキュメントRustで始めるWebAssemblyMDN WebAssemblyガイド休暇を使って新しい技術に触れることで、普段の業務にも新しい視点を持ち込めそうです。皆さんも、空き時間を見つけて興味のある技術に触れてみてはいかがでしょうか。読んだ書籍Rustで学ぶWebAssembly――入門からコンポーネントモデルによる開発まで エンジニア選書作者:清水 智公技術評論社AmazonProgramming WebAssembly with Rust: Unified Development for Web, Mobile, and Embedded Applications (English Edition)作者:Hoffman, KevinPragmatic BookshelfAmazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Renovate を手元の repository に対して debug 実行する]]></title>
            <link>https://blog.1q77.com/2025/01/renovate-local-debug/</link>
            <guid>https://blog.1q77.com/2025/01/renovate-local-debug/</guid>
            <pubDate>Tue, 28 Jan 2025 10:45:08 GMT</pubDate>
            <content:encoded><![CDATA[renovate の設定を手元で試行錯誤したい時のメモです。Local Platform--platform=local を指定して実行すると local filesystem を対象として renovate を実行することができます。https://docs.renovatebot.com/modules/platform/local/手元の working copy の root directory で実行します。(npx は使わなくても良いが install からやってくれるので)]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[論文紹介 ”Long-Context LLMs Meet RAG: Overcoming Challenges for Long Inputs in RAG” @GDG Tokyo]]></title>
            <link>https://speakerdeck.com/shukob/lun-wen-shao-jie-long-context-llms-meet-rag-overcoming-challenges-for-long-inputs-in-rag-at-gdg-tokyo</link>
            <guid>https://speakerdeck.com/shukob/lun-wen-shao-jie-long-context-llms-meet-rag-overcoming-challenges-for-long-inputs-in-rag-at-gdg-tokyo</guid>
            <pubDate>Tue, 28 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[https://gdg-tokyo.connpass.com/event/340671/大規模言語モデル（LLM）は、外部の知識源を利用することで、より強力な応答を生成できるようになります（これをRetrieval-Augmented Generation: RAGと呼びます）。LLMが処理できる入力テキストの長さが長くなるにつれて、より多くの関連情報をRAGで与えられるようになり、生成される回答の質が向上することが期待されます。一般的には、取得する情報が多いほど関連情報（高い再現率）も増え、結果として性能が向上すると考えられます。しかし、長文処理LLMにおけるRAGの性能が、取得する情報が増えすぎると逆に低下する現象を明らかにし、その原因が「ハードネガティブ」な情報にあることを示しました。そして、その問題を解決するために、効果的な学習不要および学習を伴うアプローチを提案しています。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vim-jpラジオ#27・#28聞いた - 実はEmacs30年選手！t-wadaさん登場！]]></title>
            <link>https://blog.atusy.net/2025/01/28/vim-jp-radio-27/</link>
            <guid>https://blog.atusy.net/2025/01/28/vim-jp-radio-27/</guid>
            <pubDate>Tue, 28 Jan 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[分かるところからやってけ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rのloggerパッケージで構造化ログを出力する時にメタフィールドの名前を変更する]]></title>
            <link>https://blog.atusy.net/2025/01/27/r-logger-rename-metafield/</link>
            <guid>https://blog.atusy.net/2025/01/27/r-logger-rename-metafield/</guid>
            <pubDate>Mon, 27 Jan 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[loggerパッケージはRのログ出力に使います。ログはプログラムの進捗確認や、問題発生時のデバグなどに便利なので、ぜひ活用したいところですね。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Site Reliability Engineering on Kubernetes]]></title>
            <link>https://speakerdeck.com/nwiizo/site-reliability-engineering-on-kubernetes</link>
            <guid>https://speakerdeck.com/nwiizo/site-reliability-engineering-on-kubernetes</guid>
            <pubDate>Sun, 26 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2025年01月26日 10:35-11:05（ルーム A）にて「Site Reliability Engineering on Kubernetes」というタイトルで登壇します。イベント名: SRE Kaigi 2025公式URL: https://2025.srekaigi.net/セッションURL: https://fortee.jp/sre-kaigi-2025/proposal/a75769d1-7835-4762-a1f6-508e714c8c8e登壇ブログ: https://syu-m-5151.hatenablog.com/entry/2025/01/26/005033]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fishシェルでターミナルのタイトルをプロジェクトルートからの相対パスっぽくする]]></title>
            <link>https://blog.atusy.net/2025/01/26/fish-title-relative-to-projroot/</link>
            <guid>https://blog.atusy.net/2025/01/26/fish-title-relative-to-projroot/</guid>
            <pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[たとえば、git管理しているプロジェクトとかで、foo/appとかにするイメージ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SRE Kaigi 2025 で登壇してきます。 #srekaigi]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/01/26/005033</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/01/26/005033</guid>
            <pubDate>Sat, 25 Jan 2025 15:50:33 GMT</pubDate>
            <content:encoded><![CDATA[はじめにnwiizoです。2025年1月26日のSRE Kaigi 2025にて「Site Reliability Engineering on Kubernetes」というタイトルで登壇させていただきます。本イベントは「More SRE !」をテーマに、SREの知見共有と技術者の交流を目的とした技術カンファレンスです。2025.srekaigi.netこの発表資料を作成するきっかけとなったのは、私が翻訳に関わった「Kubernetesで実践する Platform Engineering」（2025年2月19日出版予定）の仕事でした。本書の翻訳作業を通じて、SREとPlatform Engineeringの密接な関係性、そしてKubernetesがこれらを実現する優れた基盤となることを改めて実感しました。Kubernetesで実践する Platform Engineering作者:Mauricio Salatino翔泳社Amazon発表資料 speakerdeck.com発表資料はSpeaker Deckで公開しています。イベントのテーマである「さらにSREを広めよう」に沿って、SREやKubernetesの未経験者でも理解しやすい実装例やアーキテクチャパターン、参考資料を用意しました。紹介したものは一例であり、これだけが唯一の正解ではありません。また、イベントにおける最初の発表なのでSREについての部分も多めに説明しています。こちら、Xでのポストなのでリポストなどしてもらえれば幸いです。👻SRE Kaigi 2025 にて「Site Reliability Engineering on Kubernetes」というタイトルで登壇します。こちら、資料になります。https://t.co/SLoohm83jy#srekaigi #srekaigi_a— nwiizo (@nwiizo) 2025年1月26日   今回の発表内容は、以下のような幅広いトピックをカバーしています：基本的な概念と実装SREの本質：システムの信頼性を制御する技術としてのSREKubernetesにおけるSRE原則の実践方法Cloud Nativeアプローチによる実装戦略具体的な実装手法包括的な可観測性の実現GitOpsを活用した変更管理の自動化と標準化Progressive Deliveryの実装と運用ノウハウインシデント対応と自動復旧の仕組み化最新ツールの活用事例CloudEventsによるイベント基盤の構築Keptn Lifecycle Toolkitを用いた品質管理Argo Rolloutsによるデプロイメント制御Crossplaneを活用したリソース管理の自動化プラットフォームの発展成熟度モデルに基づく段階的な改善開発者の認知負荷軽減に向けた取り組みデータドリブンな運用改善の実現方法手を動かすオススメハンズオン発表内容をより深く理解し、実践的なスキルを身につけるために、以下のハンズオンをお勧めします：github.comCloud Native Days主催のハンズオン教材です。KubernetesやCloud Nativeツールの基本的な使い方から応用まで、段階的に学べます。実際の運用シナリオに基づいた実践的な内容となっていますgithub.comPlatform Engineering on Kubernetesの実践的なガイドです。本書の著者が作成した、実装例とベストプラクティスを含むリポジトリです。一つ一つのコンポーネントを実際に動かしながら、プラットフォームの構築方法を学べます。これらのハンズオンを通じて、セッションで紹介する概念や技術を実際に試してみることをお勧めします。理論と実践を組み合わせることで、より深い理解と実装スキルを得ることができます。また、これらの教材は常にアップデートされているため、最新のベストプラクティスも学ぶことができます。おわりに本セッションは、かなり雑多な内容を30分に詰め込んだ欲張りな構成となっています。これは、現場によって異なるSREの課題や取り組みを幅広く共有したいという思いを反映したものです。特に強調したい点は以下の3つです：SREは単なるツールの導入ではなく、組織が信頼性を制御するための包括的な取り組みであることKubernetesは優れた基盤を提供するが、適切な設計と運用が必要不可欠であること適切なオープンソースツールを組み合わせることで、本格的なSRE実装が可能になることこのセッションが「さらにSREに関わる技術者の活躍の場を増やす」「さらにSREを理解し、興味を持っていただける技術者を増やす」という本イベントの目標に貢献できれば幸いです。セッションは2025年1月26日 10:35-11:05、ルームAで行われます。SREに関わる技術者の方々はもちろん、SREに興味を持ち始めた方々のご参加もお待ちしています。詳細は公式サイトでご確認いただけます。イベントに関する最新情報は、X（旧Twitter）の @srekaigi で発信されていますので、ぜひフォローしてください。多くの方々とSREについての知見を共有できることを楽しみにしています。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スリーシェイクにおけるOSSの取り組み]]></title>
            <link>https://speakerdeck.com/bells17/surisieikuniokeruossnoqu-rizu-mi</link>
            <guid>https://speakerdeck.com/bells17/surisieikuniokeruossnoqu-rizu-mi</guid>
            <pubDate>Fri, 24 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[3-shake SRE Tech Talk #11 オンサイトの登壇資料です。https://3-shake.connpass.com/event/339212/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[OpenClarityを覗いてみる]]></title>
            <link>https://speakerdeck.com/kojake_300/openclaritywosi-itemiru</link>
            <guid>https://speakerdeck.com/kojake_300/openclaritywosi-itemiru</guid>
            <pubDate>Fri, 24 Jan 2025 05:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>