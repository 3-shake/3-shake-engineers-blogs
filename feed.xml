<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Sun, 29 Dec 2024 11:33:59 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[rootful・rootless・privilegedコンテナの違い/rootful_rootless_privileged_container_difference]]></title>
            <link>https://speakerdeck.com/moz_sec_/rootful-rootless-privileged-container-difference</link>
            <guid>https://speakerdeck.com/moz_sec_/rootful-rootless-privileged-container-difference</guid>
            <pubDate>Sat, 28 Dec 2024 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2024/12/28に開催されたOWASP KansaiのLTの資料です。https://owasp-kansai.doorkeeper.jp/events/179740]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Clippyのすすめ - 他者の評価を気にせず何度でも指摘してくれる機械もしくは注意力の限界を超えてケアをしてくれる機械]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/12/27/170046</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/12/27/170046</guid>
            <pubDate>Fri, 27 Dec 2024 08:00:46 GMT</pubDate>
            <content:encoded><![CDATA[はじめにプログラミングを学ぶ上で、良いコードの書き方を知ることは非常に重要です。今回は、Rustで良いコードを書くための強力な味方、Clippyについて学んでいきましょう。プログラミング初心者の方から、他の言語からRustに移ってきた方まで、きっと新しい発見があるはずです。私も最近、Rustに関する素晴らしい本を読んでいます。「Effective Rust」と「Idiomatic Rust」は、Rustらしい書き方やデザインパターンについて詳しく解説していて、とても勉強になります。ただ、正直なところ、本を読んだだけでは私自身なかなか良いコードが書けず、ツールでのレビューで「これRustらしくないよね」とよく指摘されています。そのたびに勉強させられています。きっと同じような経験をされている方も多いのではないでしょうか。Idiomatic Rust: Code like a Rustacean (English Edition)作者:Matthews, BrendenManningAmazonEffective Rust: 35 Specific Ways to Improve Your Rust Code (English Edition)作者:Drysdale, DavidO'Reilly MediaAmazonそんな中で私の強い味方になっているのが、今回紹介するClippyです。本で学んだ内容を実践しようとするとき、Clippyは具体的なアドバイスをくれる、とても親切な存在です。特に「ここがRustらしくない」と言われたときの改善方法を、実例を挙げて教えてくれるのが心強いです。rust-lang.github.ioRust 標準 linter: Clippyプログラミング言語には、よくある間違いや非推奨の書き方をチェックして警告を発してくれる、lintというプログラムがあります。元々はC言語をチェックするものでしたが、現在では様々な言語のためのlinterが作られています。Lint Nightなんてイベントもあります。lintnight.connpass.comRustには言語標準のlinterがあり、その名をclippyと言います。使い方は極めて簡単で、cargoツールチェインがインストールされていれば、下記のようにインストールして、$ rustup component add clippy下記のコマンドをcrateのフォルダで実行するだけです。$ cargo clippyClippyのlinterとしての特徴linterはコードの品質を向上するために、多くの現場で使われているツールですが、実際には厳しすぎるルールや、実際の問題にそぐわないものも多くあります。これを偽陽性(false positive)の検出と呼びます。通常は設定ファイルや特殊なコメントをコードに埋め込むことによって、特定のlintの有効・無効を切り替えることになります。これは無視できない労力で、linterのバージョンを更新するたびに新たなルールに対応する必要が出てきたり、コメントによってコードが汚くなったりするデメリットもあります。Clippyの特徴は、デフォルトの設定でもそのような偽陽性の警告が少なく、実際にコードの品質が向上したり、プログラマとしての知識が得られるのを実感できるような警告が多いということです。実践的な例例えば、次のような関数を見てください:fn sum_squares(values: &Vec<i32>) -> i32 {    values.iter().fold(0, |acc, value| acc + value * value)}この関数は問題なく動きますが、Idiomatic Rust（慣用的なRustコード）ではありません。Clippyは、次のような親切な警告を出してくれます：Checking test001 v0.1.0 (/Users/nwiizo/git/workspace_2024/clippy/test001)warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do --> src/main.rs:1:24  |1 | fn sum_squares(values: &Vec<i32>) -> i32 {  |                        ^^^^^^^^^ help: change this to: `&[i32]`  |  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg  = note: `#[warn(clippy::ptr_arg)]` on by defaultこれは、&Vecよりも&[]のほうが汎用性が高いということを教えてくれています。Vec<T>は&[T]に暗黙に変換されるので、わざわざVec<T>で宣言するということは、使える範囲を狭めるだけで何のメリットもないのです。この関数は、機能性を全く損なわずに、次のように書き直すことができます：fn sum_squares(values: &[i32]) -> i32 {    values.iter().fold(0, |acc, value| acc + value * value)}ミュータブル参照の場合ところで、引数の型がミュータブル参照であった場合は話が別です。&mut Vec<T>と&mut [T]ではできることが異なります。次のように、引数のベクター型のサイズを変えるような関数は、ミュータブルスライスで置き換えることはできません：fn append_square(values: &mut Vec<i32>) {    values.push(values.iter().fold(0, |acc, value| acc + value * value));}// 使用例let mut vv = vec![1,2,3];append_square(&mut vv);assert_eq!(vec![1,2,3,14], vv);このため、Clippyはミュータブル参照に対しては警告を発しません。これは、Clippyが文脈を理解して適切な判断を下せることを示す良い例です。neovim/nvim-lspconfig での設定VSCodeやCursor は知らないがこちらの設定でneovim は設定できる。  {    "neovim/nvim-lspconfig",    config = function()      require("nvchad.configs.lspconfig").defaults()      local lspconfig = require "lspconfig"      lspconfig.rust_analyzer.setup {        settings = {          ["rust-analyzer"] = {            checkOnSave = {              command = "clippy",              extraArgs = { "--all", "--", "-W", "clippy::all" },            },          },        },      }      require "configs.lspconfig"    end,  },おわりにClippyは、より良いRustプログラムを書くことができるように導いてくれる、優しい先生のような存在です。もちろん、Clippyも完璧ではなく、時には偽陽性の検出もありますが、それは人間でも同じことです。より良いRustの書き方を学び、コードの品質を向上させ、プログラミングの知識を深められるClippyは、人間のレビュアーとは違って何度指摘されても評価が下がることのない、心強い味方となってくれます。という利点があります。ぜひ、みなさんも日々のRustプログラミングにClippyを取り入れてみてください。疑問に思ったClippyの警告は、その都度調べてみることをお勧めします。そうすることで、Rustの理解がより深まっていくはずです。Effective Rustに関しては日本語の本が出ているので興味があれば読んでみても良いと思う。Effective Rust ―Rustコードを改善し、エコシステムを最大限に活用するための35項目作者:David Drysdaleオーム社Amazon個人的に良かった記事qiita.comkenoss.github.io業務 におけるRust の記事を読んだがどちらの記事もとても良かった。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[「評論家気取り」という作る人の行き着く先が怖い]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/12/27/144509</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/12/27/144509</guid>
            <pubDate>Fri, 27 Dec 2024 05:45:09 GMT</pubDate>
            <content:encoded><![CDATA[らーめん再遊記 第一巻より引用らーめん再遊記（１） (ビッグコミックス)作者:久部緑郎,河合単小学館Amazonはじめに技術界隈には、長年続いている不穏な現象があります。コードを書くことに情熱を注いでいた人々が、いつの間にか他人の成果物を論評することに執心するようになってしまうのです。なぜ私たちは燃え尽きてしまうのか作者:ジョナサン マレシック青土社Amazonこの現象は、特にベテランと呼ばれるエンジニアたちの間で顕著です。彼らは確かな技術力を持ち、素晴らしい成果を残してきました。しかし、彼らの多くが、創造者から評論家への転身!?を遂げつつあります。仕事の辞め方 (幻冬舎単行本)作者:鈴木おさむ幻冬舎Amazon実は私たちエンジニアは皆、いずれ評論家になる運命を背負っているのかもしれません。年を重ね、技術の第一線から遠ざかるにつれ、「作る」ことから「評論する」ことへと、その重心を少しずつシフトさせていきます。それは半ば必然であり、誰もが通る道なのでしょう。だからこそ、今、この問題について考えたいと思います。これは、いずれ評論家になるかもしれない私自身への警告であり、そして自戒の言葉でもあります。実装者から評論家へ。エンジニアの変質を、私は憂慮しています。この静かな変化について、正面から向き合ってみましょう。作る側が評論に逃げるとき「このコードは素人レベルで時代遅れです。基礎から学び直してください」「アーキテクチャへの理解が浅く、重要な議論が抜け落ちています」「技術選定の根拠が説明されておらず、設計思想が古いままです」「なぜあのライブラリやアーキテクチャに触れていないのですか。初歩的な見落としです」SNSには辛辣な評論・批評が溢れ、技術ブログには高圧的な論評が並び、カンファレンスの裏チャンネルは批判で充満しています。最も危惧すべきは、これらの評論・批評の多くが、かつては優れたコードを生み出していたはずのエンジニアたちから発せられているということです。問題なのは、これらの言説が建設的な議論を装いながら、実際には単なる批判に終始している点です。 改善案を示すわけでもなく、プルリクエストを送るわけでもなく、ただ「ダメ出し」だけを繰り返しています。これは技術的な議論ではなく、単なる自己顕示でしかありません。アイデアのつくり方作者:ジェームス W.ヤングCCCメディアハウスAmazon自意識が一流評論家になってしまったかつて天才だったエンジニアXのタイムラインには、自らを一流評論家だと思い込んだエンジニアたちが目立っています。「この実装は素人レベルです。こんなコードしか書けない人は、基礎から学び直すべきです」—そう断罪するのです。 しかし、彼ら自身は数年前の自分のコードを振り返ってみたことがあるでしょうか。あるいは最近では、実装よりもメンテナンス業務が中心になってはいないでしょうか。かつての優秀なエンジニアたちは、初学者への指摘だけでは飽き足らず、すでに実績のあるエンジニアたちにまで批判の矛先を向けています。有名OSSのプルリクエストには「この設計は時代遅れです。モダンな設計パターンを学んでから出直してください」と高圧的なコメントを残し、技術ブログに対しても「この技術選定の根拠が説明されていません」「重要な議論が抜け落ちています」と、まるで査読者のような態度で指摘を繰り返します。さらに気がかりなのは、オープンソースのイシューやプルリクエストへの不建設的な態度です。具体的な改善案を示すことなく、ただ問題点の指摘だけを行うのです。「なぜこの設計を選んだのですか？」「この実装では不十分です」という批判は、具体的な改善案を伴わない限り、何の価値も生み出せません。評論家気取りのポストで注目を集める快感に魅了されたエンジニアは、徐々に変質していきます。最初は些細な技術的指摘から始まり、「いいね」という承認欲求に駆られ、その評論は次第に厳しさを増していくのです。「なぜこの技術スタックを選んだのですか？」「なぜこの設計パターンを採用しなかったのですか？」—まるで面接官のように、実装者を追い詰める質問を投げかけ始めます。そして最も懸念すべきは、若手エンジニアの成長機会が損なわれていくという事実です。建設的なフィードバックの代わりに投げかけられる批判は、若手の挑戦する意欲を削ぎ、コミュニティへの貢献を躊躇させています。時には、自身を技術界の権威だと思い込んだエンジニアが、若手たちの真摯な努力までも批判の対象としてしまうのです。評論は衰退の始まりエンジニアが評論家めいた物言いを始めるとき、それは衰退の予兆かもしれません。ただし、適切な評論や建設的な批判は、技術の発展に不可欠な要素でもあります。レビューやフィードバックを通じて、実装の品質は向上し、よりよい設計が生まれていきます。問題なのは、創造的な貢献を伴わない批判に終始してしまうことです。創造者には創造者としての責務があります。コードに不満があるならば、改善のプルリクエストを送ることができます。ドキュメントが不十分と感じるなら、具体的な改善案を示すことができます。アーキテクチャが気に入らないのであれば、より優れた実装を示す機会が開かれています。発表内容に不満があるというのなら、自らが登壇する選択肢もあります。これは単なる理想論ではありません。優れたエンジニアたちは、常にこの原則に従って行動してきました。彼らは単なる批判ではなく、コードで語ります。問題点の指摘だけではなく、改善案の実装を示します。時には厳しい指摘も必要ですが、それは常により良い方向への具体的な提案を伴うものでなければなりません。評論と批判は、建設的な議論の土台となり得ます。しかし、それは実装による貢献があってこそ意味を持つのです。評論家として批判するだけでなく、創造者として具体的な改善を示していく—それこそが、エンジニアの進むべき道筋なのではないでしょうか。みんなのフィードバック大全作者:三村 真宗光文社Amazonなぜ評論に逃げるのか実のところ、その理由は複雑に絡み合っています。一見すると創造する意欲が失われていくように見えますが、その背景にはさまざまな要因が存在します。まず、技術の進化スピードが年々加速していることが挙げられます。かつて最先端だった技術スタックは、わずか数年で「レガシー」と呼ばれるようになります。新しい技術への追従に疲れ、自信を失っていく—そんなベテランエンジニアの姿を、私たちは目にしてきました。また、組織の中での役割の変化も大きな要因となります。マネジメントやアーキテクトの立場になると、直接コードを書く機会が減っていきます。それは自然なキャリアパスかもしれませんが、同時に「作る」喜びから遠ざかることも意味します。さらに、以前の自分を超えられないという焦りもあるでしょう。若かりし頃に作り上げた素晴らしいプロダクトやライブラリ。その成功体験が重荷となり、新しいチャレンジを躊躇させることもあります。過去の栄光に縛られ、新たな失敗を恐れる—そんな心理が、評論という安全な場所への逃避を促します。そして、評論には誘惑があります。技術ブログへの評論記事は数時間で書け、発表資料への批判は数分で完結し、SNSなら数行のポストで事足ります。実装を伴う苦労も、メンテナンスの責任も、失敗のリスクも必要ありません。最も注意すべきは、その行為が「いいね」という即時の報酬と、表面的な自己肯定感をもたらすことです。賢明な分析家として認められ、技術の識者として扱われる。この心地よさが、さらなる評論への逃避を促していきます。他者への批判で得られる一時的な優越感は、しかし、本当の自己肯定感とは異なります。 建設的な創造による達成感こそが、エンジニアの誇りとなるべきものです。時には、組織の文化や環境も影響します。過度な品質要求や、失敗を許容しない雰囲気は、エンジニアを萎縮させ、批評家的な立場に追いやってしまうことがあります。新しいことへの挑戦よりも、既存のものを批評する方が「安全」だと感じてしまうのです。この悪循環は、技術コミュニティ全体に影響を及ぼします。建設的な議論が減少し、若手の挑戦する意欲が失われ、コミュニティの分断が進んでいきます。評論は容易でも、実際の改善は誰も行わない—そんな状況に陥っているのです。しかし、これは決して避けられない運命ではありません。技術の変化を恐れず、小さな一歩から始める勇気を持つこと。過去の成功や失敗にとらわれすぎず、新しい挑戦を続けること。そして何より、評論家としての安易な満足に甘んじないこと。それが、創造者としての道を歩み続けるための鍵となるのではないでしょうか。批評の教室　──チョウのように読み、ハチのように書く (ちくま新書)作者:北村紗衣筑摩書房Amazon作る側の矜持エンジニアの本質的価値は、創造する能力にあります。 しかし、それは建設的な評論の価値を否定するものではありません。むしろ、創造と評論のバランスを保つことこそが、真のエンジニアとしての成熟を示すのかもしれません。不満な実装を見つけたのなら、より良いコードで示していきましょう。しかし、それは時として現実的ではないこともあります。そんなとき、具体的で建設的で受け入れやすいフィードバックは、それ自体が価値ある貢献となり得ます。資料に物足りなさを感じたのなら、自らより良い資料を書いていきましょう。ただし、すべての領域で自ら書き直すことは不可能です。そこでは、経験に基づいた示唆に富む指摘が、コミュニティの発展を支えることになります。エンジニアの成長は、実装による具体的な貢献を通じて実現されます。しかし、それは単独の作業ではありません。建設的なフィードバックの交換、経験の共有、そして時には適切な批評—これらの相互作用が、より良い実装を生み出す土台となります。重要なのは、創造と評論の適切なバランスです。他者のコードを批判するだけでなく、具体的な改善案を示すことができます。時には成果を否定したくなることもあるでしょうが、それを建設的なフィードバックへと昇華させることが大切です。また、自身の実装経験に基づいた説得力のある指摘は、コミュニティの発展に大きく寄与します。特に若手エンジニアに対しては、その成長を支援する温かい指摘を心がけたいものです。SNSでの浅薄な承認に価値を見出すのではなく、実装と建設的な評論の両輪で、技術コミュニティの発展に貢献していきましょう。それこそが、経験を積んだエンジニアとしての責務なのではないでしょうか。創造の喜びを忘れず、同時に適切な評論の価値も理解する—その両方を備えることで、私たちは真のエンジニアとしての成長を続けることができるのです。そして、それこそが技術コミュニティ全体の発展につながっていくはずです。批評理論を学ぶ人のために世界思想社Amazonおわりに「この文章自体も、評論ではないでしょうか」—そんな声が聞こえてきそうです。その通りです。私たちは、いずれ評論家になる運命から完全に逃れることはできないのかもしれません。年を重ねていったり、第一線を離れていく中で、評論的な視点は自然と身についていきます。それは、ある意味で技術者としての成熟の一面なのかもしれません。しかし、それでも私たちには選択の余地があります。評論に溺れるのか、それとも最後まで創造を続けるのか。私は後者を選びたいと思います。だからこそ、この文章を書き終えたら、すぐにコードを書きます。 プルリクエストを送り、ドキュメントを改善します。たとえ疲れてしまって楽な評論的な視点を持ったとしても、それを建設的な創造へと昇華させる努力を続けていきます。エンジニアは、創造することで価値を示せます。評論だけでは、成長は望めません。私たちは、作ることで命をつなぎます。 評論家という名の死に屈することなく。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[BudouxによりNeovimのWモーションを拡張し、日本語文章の区切りに移動させる]]></title>
            <link>https://blog.atusy.net/2024/12/27/nvim-budoux-motion/</link>
            <guid>https://blog.atusy.net/2024/12/27/nvim-budoux-motion/</guid>
            <pubDate>Fri, 27 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Google製改行位置決定アルゴリズムBudouxをLuaに移植した。読みやすい位置で文を区切れるので、bionic readingの日本語版を実装できるかも。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Youkiを動かしてみる]]></title>
            <link>https://qiita.com/ys1/items/7e92327c7728471cfc65</link>
            <guid>https://qiita.com/ys1/items/7e92327c7728471cfc65</guid>
            <pubDate>Wed, 25 Dec 2024 10:51:53 GMT</pubDate>
            <content:encoded><![CDATA[概要Kubernetesではコンテナを作成するとき、コンテナランタイム(高レベルランタイム、低レベルランタイム)を利用しています。低レベルランタイムであるyoukiを通じてコンテナに関する理解を…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google製の改行位置決定アルゴリズムBudouxをLuaに移植した]]></title>
            <link>https://blog.atusy.net/2024/12/25/budoux-lua/</link>
            <guid>https://blog.atusy.net/2024/12/25/budoux-lua/</guid>
            <pubDate>Wed, 25 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Google製改行位置決定アルゴリズムBudouxをLuaに移植した。読みやすい位置で文を区切れるので、bionic readingの日本語版を実装できるかも。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2024年 俺が愛した本たち 非技術書編(物語を除く)]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/12/25/084801</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/12/25/084801</guid>
            <pubDate>Tue, 24 Dec 2024 23:48:01 GMT</pubDate>
            <content:encoded><![CDATA[この記事は、3-shake Advent Calendar 2024 6日目のエントリ記事です。はじめにこんにちは、nwiizoです。2024年も終わりに近づいています。毎年恒例となった年末の読書振り返りの時期が来ました。今年はいつも以上に多くの本を読みましたが、その中でも技術書以外の本との出会いが、私の世界を大きく広げてくれました。哲学書、ビジネス書、社会科学書など、多岐にわたるジャンルの本に触れることで、新しい視点や考え方を学ぶことができました。なお、今回は物語やノンフィクションについては別の機会に譲り、主にビジネスや思考に関する本を中心にご紹介させていただきます。一見エンジニアリングとは関係のない本の中に、日々の仕事や課題解決に活かせるヒントが数多く隠れていることに気づかされた一年でもありました。本を読むことは知識を得るだけでなく、物事を多角的に捉える力を育んでくれます。様々な分野の本に触れることで、自分の思考の幅が広がり、新しいアイデアや解決策が浮かぶようになってきたように感じています。...とここまで偉そうに書きましたが、実際のところ私は「へぇ～、そうなんだ」とか「なるほど、そういう考え方もあるのか」くらいの気持ちで本を読んでいます。この記事では、2024年に私の心に深く刻まれた非技術書をご紹介したいと思います。これらの本との出会いが、読者の皆さんの新たな読書体験のきっかけになれば幸いです。はじめに昨年以前に紹介した本BIG THINGS　どデカいことを成し遂げたヤツらはなにをしたのか？High Conflict よい対立 悪い対立 世界を二極化させないために「怠惰」なんて存在しない 終わりなき生産性競争から抜け出すための幸福論THINK BIGGER 「最高の発想」を生む方法「何回説明しても伝わらない」はなぜ起こるのか？　認知科学が教えるコミュニケーションの本質と解決策イシューからはじめよ［改訂版］――知的生産の「シンプルな本質」会って、話すこと。――自分のことはしゃべらない。相手のことも聞き出さない。人生が変わるシンプルな会話術勘違いが人を動かす――教養としての行動経済学入門おわりに昨年以前に紹介した本syu-m-5151.hatenablog.comsyu-m-5151.hatenablog.comsyu-m-5151.hatenablog.comsyu-m-5151.hatenablog.comBIG THINGS　どデカいことを成し遂げたヤツらはなにをしたのか？世間を賑わせたメガプロジェクトの成功と失敗について掘り下げた本です。何が面白いって、メガプロジェクトというのはほぼ確実に上手くいかないのです。予算はオーバーし、納期は遅れ、最後には利益も出ない。しかも規模が大きいだけに、失敗のインパクトも半端ない。でも、そんな中でもたまに劇的に成功するプロジェクトがある。本書は、その差は一体どこにあるのかを探っています。著者が紹介する成功への要因は意外とシンプルです。「ゆっくり考え、すばやく動く」という原則や、「レゴを使ってつくる」という具体的な可視化の手法、「マスタービルダーを雇う（専門家を頼る）」といった実践的なアプローチが示されています。実は、この本の面白さは二重構造になっています。壮大なプロジェクトの成功と失敗の物語として読むと純粋に面白いのですが、自分が経験したことがあるプロジェクトに重ねて読むと...（ちょっと考え込む）まあ、そこは各自の想像にお任せします。特に印象的だったのは、大規模プロジェクトの教訓が、実は小規模なプロジェクトにも当てはまるという指摘です。例えば「小さく試し、成功したら拡大する」というアプローチは、ビジネスからアート、果ては生物の進化まで、不確実性と向き合うあらゆる分野で見られる原則なんですよね。何か新しいことに挑戦しようと考えている人には、特におすすめの一冊です。ただし、現在進行形でプロジェクトの真っ只中にいる人は、読むタイミングを少し考えた方がいいかもしれません。なんてったって、成功率0.5%という現実を突きつけられますからね。BIG THINGS　どデカいことを成し遂げたヤツらはなにをしたのか？作者:ベント・フリウビヤ,ダン・ガードナーサンマーク出版AmazonHigh Conflict よい対立 悪い対立 世界を二極化させないために対立には2つの種類があるということを、この本は教えてくれます。健全な対立は、私たちの成長を促し、相互理解と向上につながります。一方で、不健全な対立（ハイコンフリクト）は、「私たち対彼ら」という二項対立に陥り、問題の本質とは関係のない揚げ足取りや感情的な対立を引き起こします。読んでいて特に対立は感情の問題ではなく、構図の問題だという指摘が印象に残りました。私たちは「相手の感情を変えなければ」と思いがちですが、実は解決すべきは対立という構造そのものなんですね。本書が提案する解決策も興味深いものでした。従来の「逃げる」「戦う」「我慢する」という3つの方法ではなく、第四の道を示してくれます。それは、最終的な意見の一致を目指すのではなく、お互いの話に真摯に耳を傾けること。意見は違っていても、自分の話をちゃんと聞いてもらえたと全員が感じられれば、それが健全な対話への第一歩になるというわけです。読んでいて「よい対立」というのは、実は「よい対話」のことなのかもしれないと思いました。相手と自分の違いを楽しみながら、お互いの考えを知ろうとする姿勢。それが結果的に、建設的な関係性を築くヒントになるのではないでしょうか。ダイアローグ 価値を生み出す組織に変わる対話の技術作者:熊平美香ディスカヴァー・トゥエンティワンAmazonただし、これは理想論に聞こえるかもしれません。実際の現場では、感情的になったり、相手の話を遮ってしまったりすることは日常茶飯事です。でも、だからこそ、この本が教えてくれる対立の構造を理解し、より良い対話を目指すヒントは、とても価値があると感じました。High Conflict よい対立 悪い対立 世界を二極化させないために作者:アマンダ・リプリーディスカヴァー・トゥエンティワンAmazon「怠惰」なんて存在しない 終わりなき生産性競争から抜け出すための幸福論「休むこと」に罪悪感を覚える社会の呪縛について、深い洞察を投げかける一冊です。著者は、「怠惰は悪である」という私たちの思い込みが、実は資本主義社会が生み出した幻想だと指摘します。人の価値は生産性では測れないという当たり前だけど忘れがちな事実です。「もっとできるはずだ」「自分の限界を信じるな」といった私たちが "真実" だと思い込んでいる考えが、実は "ウソ" かもしれないと思わされます。働くということ　「能力主義」を超えて (集英社新書)作者:勅使川原真衣集英社Amazon特に印象的だったのは、休息は "サボり" ではなく、むしろ脳を活性化させる大切な時間だという指摘です。何もしていないように見える時間こそ、実は新しいアイデアが生まれる瞬間だったりします。実はこれは、近年増加している燃え尽き症候群の問題とも深く関係しています。休むことを後ろめたく感じ、常に生産的でなければならないというプレッシャーは、私たちのメンタルヘルスに大きな影響を与えているのです。心療内科医が教える本当の休み方作者:鈴木 裕介アスコムAmazonこれは昨年話題になった『なぜ私たちは燃え尽きてしまうのか』という本でも指摘されていました。バーンアウトは単なる個人の弱さの問題ではなく、仕事が私たちのアイデンティティそのものになってしまっているという、現代社会の構造的な問題なのだと。なぜ私たちは燃え尽きてしまうのか作者:ジョナサン マレシック青土社Amazon実は私も、「もっと頑張れるはずだ」と自分を追い込むタイプでした。でも、そんな生き方って本当に正しいのかな？と考えるきっかけをくれた本です。生産性や成果だけが人生の価値を決めるわけじゃない。この当たり前の事実に、改めて気づかされました。この本は、急がなくていい、そんなに頑張らなくていいと、優しく語りかけてくれます。そして、それは決して「怠けていい」という意味ではなく、むしろ自分らしく、人間らしく生きるための大切な気づきなのだと教えてくれるのです。「怠惰」なんて存在しない 終わりなき生産性競争から抜け出すための幸福論作者:デヴォン・プライスディスカヴァー・トゥエンティワンAmazonTHINK BIGGER 「最高の発想」を生む方法この本は、私たちの「創造性」に対する多くの思い込みを覆してくれる一冊です。「天才のひらめき」という美しい物語は、実は幻想かもしれないという衝撃的な指摘から始まります。著者によれば、イノベーションの本質は「新しいアイデアを無から生み出すこと」ではなく、「既存のアイデアを新しく組み合わせること」なのだそうです。例えば、ピカソが天才的なアーティストとされるのは、同時代の画家マティスとアフリカのビリ人による彫像を巧みに組み合わせて、キュビスムという新しい芸術様式を生み出したからなんですね。この点について、私は広告界の巨人ジェームス・W・ヤングの『アイデアのつくり方』（1940年）から学びました。ヤングは「新しいアイデアとは、既存の要素の新しい組み合わせ以外の何物でもない」と述べています。そして私は、その組み合わせを見つけるには、事物の関連性を見つけ、組み合わせを試行錯誤することが重要だと考えています。アイデアのつくり方作者:ジェームス W.ヤングCCCメディアハウスAmazon特に印象的だったのは、私たちが「創造性を高める」と信じている方法の多くが、実は科学的な根拠に欠けているという指摘です。ブレインストーミングの効果は研究で否定されているとか、オフィス空間を奇抜にしても創造性は上がらないとか。むしろ大切なのは、様々な素材を一つ一つ心の解像度を上げて捉え、向き合うこと。そして、それらの関係性を探り出すことなのです。著者は、アイデアの創造プロセスについて興味深い観察を示してくれます。何気ない見聞き、例えば電車に乗っているとき、風呂に入っているとき、トイレのときなど、ふとした瞬間にアイデアが心の中で飛び込んでくる。でも、これは実は偶然ではなく、それまでの地道な素材集めと向き合いの結果なんだそうです。THINK BIGGER 「最高の発想」を生む方法：コロンビア大学ビジネススクール特別講義 (NewsPicksパブリッシング)作者:シーナ・アイエンガーニューズピックスAmazonこの本は、世の中に溢れている「創造性神話」を丁寧に解きほぐしながら、誰もが実践できる方法論を示してくれます。アイデアを生むには、まず問題を無意識の中で整理し、忘れたような状態にすることも大切なんですね。そして何より、「天才のひらめき」を待つのではなく、地道に知識を蓄え、既存のアイデアを組み合わせていく。そんな着実なアプローチこそが、実は最も創造的な方法なのかもしれません。「何回説明しても伝わらない」はなぜ起こるのか？　認知科学が教えるコミュニケーションの本質と解決策コミュニケーションの失敗の原因を、認知科学の視点から解き明かしてくれる一冊です。著者は、「話せばわかる」という私たちの思い込みが、実は幻想かもしれないと指摘します。人は自分の都合のいいように誤解する生き物だという指摘です。これは、相手が「悪意を持って誤解している」わけではなく、むしろ 私たち一人一人が持つ「知識や思考の枠組み（スキーマ）」が異なるために起こる自然な現象なんだそうです。例えば、同じ「ネコ」という言葉を聞いても、人によって思い浮かべる映像は全く違います。これと同じように、ビジネスの現場でも、私たちは知らず知らずのうちに、自分のスキーマを通して相手の言葉を解釈しているのです。著者は、コミュニケーションの達人になるためのヒントも示してくれます。ポイントは、「失敗を成長の糧にする」「説明の手間を惜しまない」「相手をコントロールしようとしない」「聞く耳を持つ」といった心構えです。これは決して「相手に合わせろ」という話ではなく、むしろお互いの違いを認識した上で、どう理解し合えるかを考えることの大切さを教えてくれます。この本は、日々のコミュニケーションで「なんでわかってくれないんだろう」と悩む私に、とても実践的なヒントを与えてくれました。結局のところ、完璧な伝達は不可能で、むしろ誤解や聞き違いを前提に、どうコミュニケーションを取るかを考えることが大切なのかもしれません。「何回説明しても伝わらない」はなぜ起こるのか？　認知科学が教えるコミュニケーションの本質と解決策作者:今井むつみ日経BPAmazonイシューからはじめよ［改訂版］――知的生産の「シンプルな本質」この本は私にとって特別な一冊です。「今この局面でケリをつけるべき問題」を見極めることの大切さを教えてくれた、まさにバイブルと呼べる存在でした。今回の読書振り返りを書くにあたっても、「何を伝えるべきか」を考える際の指針となってくれています。本書の核心は、「真に価値のある仕事は、イシューの設定から始まる」というものです。世の中には問題が山積みですが、その中で「今、本当に答えを出すべき」かつ「答えを出す手段がある」問題は、実はごくわずかです。優れた知的生産には分野を超えて共通の手法があると本書は教えてくれます。ビジネスでも、研究でも、アートでも、本質的な問題を見極めることから始めるという原則は変わりません。これは『熟達論―人はいつまでも学び、成長できる』でも同様の指摘がされています。分野は違えど、真に優れた実践者たちには共通のパターンがあるのです。それは問題の本質を見抜き、そこに向けて地道な努力を重ねる姿勢です。両書を読み進めるうちに、自分の中で「イシュー」を見極めることと「熟達」することの間に深いつながりがあることを感じました。熟達論―人はいつまでも学び、成長できる―作者:為末大新潮社Amazonこの気づきは私の学びの姿勢を大きく変えました。以前は目の前の課題に対して「とにかくやってみる」というアプローチでしたが、今は必ず立ち止まって「本当のイシューは何か」を考えるようになりました。そして、そのイシューに向き合う中で、自分自身の熟達度も少しずつ上がっていくような気がしています。また、本書では「課題解決の2つの型」について深く掘り下げています。ギャップフィル型（あるべき姿が明確な場合）と、ビジョン設定型（そもそもあるべき姿を見極める必要がある場合）という分類は、単なる理論的な整理ではありません。これは実践の場で直面する様々な課題に対して、どのようなアプローチを取るべきかを示す羅針盤となってくれます。多くの失敗は、この2つの型を取り違えることから始まるのかもしれません。今年の読書でも、この本で学んだ「イシューからはじめる」という考え方が、本の選び方や読み方に大きな影響を与えています。一見バラバラに見える本たちも、実は私なりの「イシュー」に基づいて選んでいたことに、この振り返りを書きながら気づきました。それぞれの本が、異なる角度から私の中の「イシュー」に光を当ててくれていたのです。イシューからはじめよ［改訂版］――知的生産の「シンプルな本質」作者:安宅和人英治出版Amazon会って、話すこと。――自分のことはしゃべらない。相手のことも聞き出さない。人生が変わるシンプルな会話術この本との出会いは、私の会話に対する考え方を大きく変えてくれました。「人は他人の話に興味がない」という荒々しいけれど正直な前提から始まり、そこから真摯に「ではなぜ人は会って話すのか」を探っていく展開に引き込まれました。本書で最も印象的だったのは、「外にあるものを一緒に見つめる」という会話の本質についての洞察です。自分のことを話したり、相手のことを聞き出したりする必要はない。むしろ、お互いの外にあるものに目を向け、新しい風景を一緒に発見することが、会話の醍醐味なのだと。実は最近、NON STYLE 石田さんの「答え合わせ」や令和ロマン・髙比良くるまさんの「漫才過剰考察」にハマっていて、面白い掛け合いの「仕組み」についてかなり考えていました。答え合わせ（マガジンハウス新書）作者:石田明マガジンハウスAmazonでも本書を読んで、会話の本質は必ずしもそういった技術的な部分だけではないことに気づかされました。巧みなツッコミやテンポのいい掛け合いも素晴らしいけれど、二人で同じ風景を見つめて「へぇ」と言い合えるような静かな会話にも、また違った味わいがあるんですね。漫才過剰考察作者:令和ロマン・髙比良くるま辰巳出版Amazonこれまで私は「相手に興味を持ってもらえるような話をしなきゃ」「相手の話をもっと引き出さなきゃ」と、どこか力んでいた気がします。でも、本書はそんな会話の構えをすべて取り払ってくれました。漫才のようにオチを付ける必要もない。ツッコミも不要。むしろ、ボケにボケを重ねて「今なんの話してたっけ？」となる方が、会話として自然なのかもしれません。会話は決して「相手を理解する」「自分を理解してもらう」ためのものではない。そう割り切ることで、むしろ自然な会話が生まれる。この逆説的な知恵が、私の日々の会話をより楽しいものにしてくれています。会って、話すこと。――自分のことはしゃべらない。相手のことも聞き出さない。人生が変わるシンプルな会話術作者:田中 泰延ダイヤモンド社Amazon勘違いが人を動かす――教養としての行動経済学入門人はとても愚か。「人は論理や情熱ではなく、認知バイアスによって動く」という衝撃的な視点を示してくれる一冊です。その象徴的な例が、男性用トイレの小便器にハエのマークを描くと飛び散りが激減する「ハウスフライ効果」。私たちは意外なほど、こういった「勘違い」によって行動が変わってしまう生き物なんですね。本書は、普段の生活で遭遇する様々な認知バイアスについて、豊富な事例とともに解説してくれます。例えば、カジノが現金ではなくチップを使う理由。実は、チップを使うと現金を使う時より負けた時の痛みを感じにくくなるそうです。さらにカーペットを長めにして歩くスペードを遅くさせたり、出口への最短ルートをわかりにくくしたり...。私たちの行動を操る仕掛けが、至る所に張り巡らされているんです。特に印象的だったのは、「予期的後悔」についての指摘です。私たちは「将来後悔するかもしれない」という不安から、決断を先送りにしがちです。でも実は、人は将来の感情を過大評価する傾向があり、実際の後悔は想像よりもずっと小さいものだとか。この点については、『変化を嫌う人を動かす』という本でも深く掘り下げられています。人が変化を受け入れられない理由として「惰性」「労力」「感情」「心理的反発」という4つの要因があるそうです。両書を併せて読むことで、人がなぜ現状維持バイアスに縛られやすいのか、より立体的に理解できました。「変化を嫌う人」を動かす:魅力的な提案が受け入れられない4つの理由作者:ロレン・ノードグレン,デイヴィッド・ションタル,船木 謙一(監修)草思社Amazon本書を読んで、自分の行動の多くが実は「論理的な判断」ではなく「認知バイアス」によって左右されていることを実感しました。この気づきは、自分の意思決定を見直すきっかけになると同時に、他者の行動をより深く理解することにもつながります。賢明なのは、これらのバイアスと戦うことではなく、その存在を認識した上で、うまく付き合っていくことなのかもしれません。勘違いが人を動かす――教養としての行動経済学入門作者:エヴァ・ファン・デン・ブルック,ティム・デン・ハイヤーダイヤモンド社Amazonおわりに今年の読書を振り返ってみると、一つの大きなテーマが浮かび上がってきました。それは「人はいかに自分の思い込みに縛られているか」ということです。私たちは普段、意識せずに様々な思い込みの中で生活しています。でも、新しい本と出会うたびに、そんな「当たり前」が少しずつ揺さぶられていくような体験をしました。「へぇ～、そうなんだ」という素直な驚きから始まった読書でしたが、振り返ってみると、それぞれの本が不思議と響き合って、より深い気づきをもたらしてくれたように思います。理論的な本を読んでは実践的な本で確認し、個人的な視点の本を読んでは社会的な視点の本で補完する。そんな読書の往復運動の中で、自分の視野が少しずつ広がっていくのを感じました。来年も、このように自分の「思い込み」を優しく解きほぐしてくれるような本との出会いを楽しみにしています。そして、その体験をまた皆さんと共有できればと思います。最後まで読んでいただき、ありがとうございました。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RのSys.time()でミリ秒以下を表示する]]></title>
            <link>https://blog.atusy.net/2024/12/24/r-time-subsec/</link>
            <guid>https://blog.atusy.net/2024/12/24/r-time-subsec/</guid>
            <pubDate>Tue, 24 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Sys.time()でミリ秒以下を表示するには、digits.secオプションか、format関数を使うといいよ。いずれも最大でマイクロ秒までの表示に対応。データの実態を知ってると、ナノ秒以下の情報も取得可能。ただし、精度はOS依存。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS re:Invent 2024 へ行って来ました]]></title>
            <link>https://sreake.com/blog/aws-reinvent-2024/</link>
            <guid>https://sreake.com/blog/aws-reinvent-2024/</guid>
            <pubDate>Mon, 23 Dec 2024 23:00:00 GMT</pubDate>
            <content:encoded><![CDATA[スリーシェイクの山田です。 今回、Amazon Web Services (以下 AWS) が 12月 にラスベガスで開催した世界規模のカンファレンスである AWS re:Invent 2024 に現地参加してきたので、 […]The post AWS re:Invent 2024 へ行って来ました first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2024年 俺が愛した本たち 技術書編]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/12/23/174750</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/12/23/174750</guid>
            <pubDate>Mon, 23 Dec 2024 08:47:50 GMT</pubDate>
            <content:encoded><![CDATA[この記事は、3-shake Advent Calendar 2024 24日目のエントリ記事です。はじめにこんにちは、nwiizoです。2024年も残りわずかとなりました。年の瀬に差し掛かるこの時期、1年の歩みを振り返り、時の流れを見つめ直すことは、私にとって特別な意味を持っています。今年は特に、技術書との関わり方に大きな変化がありました。本を紹介する投稿する中で、技術書のみならず、さまざまな分野の書籍を読む機会が大幅に増えました。私の書斎は、いつの間にか技術書のデータセンターと化しました。サーバーラックの代わりに本棚が整然と並び、それぞれの棚には未読の本という名のサーバーがぎっしりと配置されています。これらの「サーバー」は、24時間365日、知識というバックグラウンドプロセスを静かに実行し続けています。既にメモリの使用率は常に100%ですが、まだ、クラッシュすることはありません。クラッシュしたら次の年はこの文章を読むことができません。特に今年は、技術書との向き合い方を見つめ直した1年でした。これまでのように「量」を追い求めるのではなく、一冊一冊を深く理解し、質を重視することに注力しました。技術書は単なる情報の集合体ではなく、先人たちの経験や洞察が凝縮された知恵の結晶です。その知恵を丁寧に咀嚼し、自分の中に取り込む過程が、エンジニアとしての成長に直結することを改めて実感しました。この記事では、2024年に私が出会い、心を揺さぶられた技術書たちを厳選してご紹介します。これらの書籍が、読者の皆様に新たな発見と学びをもたらすきっかけになれば幸いです。はじめに昨年以前に紹介した本2024年に読んでよかった技術書Platform Engineering on KubernetesPlatform EngineeringContinuous DeploymentCloud Observability in ActionLearning OpenTelemetryBecoming SREFundamentals of Data EngineeringTidy First?ソフトウェア開発現場の「失敗」集めてみた。42の失敗事例で学ぶチーム開発のうまい進めかたプログラミングRust 第2版Effective Rustバックエンドエンジニアを目指す人のためのRustReal World HTTP 第3版【改訂新版】システム障害対応の教科書GitHub CI/CD実践ガイドおわりに昨年以前に紹介した本syu-m-5151.hatenablog.comsyu-m-5151.hatenablog.comsyu-m-5151.hatenablog.comsyu-m-5151.hatenablog.com2024年に読んでよかった技術書今年も、私の知識データベースは絶え間なく更新され続けました。読書から得た知識は、ソフトウェアエンジニアとしての実務という名のプロダクション環境で厳密にテストされ、その成果は、いくつかの技術イベントでの登壇という形でデプロイされました。幸いにも、これまでクリティカルな障害が発生したことはありません。私の脳内APIは、多くの技術書から寄せられるリクエストを処理し続けています。レスポンスタイムは決して速いとは言えませんが、スループットは着実に向上しています。そして以下では、2024年に私の知識基盤に大きなアップデートをもたらした技術書を紹介します。これらの書籍は、私に新しい視点やスキルを与え、成長の助けとなりました。speakerdeck.comPlatform Engineering on Kubernetes「Platform Engineering on Kubernetes」は、クラウドネイティブ時代のプラットフォームエンジニアリングの本質と実践を包括的に解説した一冊です。本書は、単なるKubernetesの解説書を超えて、現代のソフトウェア開発組織が直面する課題とその解決策を体系的に示しています。Platform Engineering on Kubernetes (English Edition)作者:Salatino, MauricioManningAmazon本書の核心は、「なぜKubernetes上にプラットフォームを構築する必要があるのか」という根本的な問いに対する答えを提示している点です。著者は、複数のチームが関わり、複数のクラウドプロバイダーへのデプロイを行い、異なるスタックを扱う組織では、Kubernetesの導入だけでは不十分であることを説き、プラットフォームエンジニアリングによってこれらの課題を技術的・組織的に解決する方法を示しています。特に印象的なのは、プラットフォームチームと開発チームの協調に関する著者の洞察です。プラットフォームは単なる技術的な基盤ではなく、開発者の生産性を最大化し、ビジネス価値の迅速な提供を可能にする戦略的な資産として位置づけられています。これは、DevOpsの理想をクラウドネイティブ時代に実現するための具体的なアプローチと言えます。本書は、概念的な解説に留まらず、実践的なステップバイステップのガイドも提供しています。カンファレンスアプリケーションというサンプルを通じて、プラットフォームの設計から実装、運用までを一貫して学ぶことができます。これにより、読者は理論と実践の両面から、プラットフォームエンジニアリングの本質を理解できます。また、本書はCrossplane、ArgoCD、Dapr、OpenFeatureなど、現代のクラウドネイティブツールの活用法も詳しく解説しています。これらのツールを適切に組み合わせることで、開発者体験の向上とインフラストラクチャの効率化を両立できることが示されています。この本を読み進める中で、プラットフォームエンジニアリングが単なる技術的な取り組みを超えて、組織全体のデジタルトランスフォーメーションを推進する原動力となり得ることを実感しました。著者の提示する知見は、エンジニアリング組織の次なるステージを考える上で、貴重な指針となるでしょう。「Platform Engineering on Kubernetes」では、プラットフォームエンジニアリングの技術的側面について深く解説されています。しかし、内部開発者向けのプラットフォームも一つのプロダクトとして捉え、その価値提供を最適化していく視点も重要です。そこで、以下の書籍との併読をお勧めします。プロダクトマネジメントのすべて 事業戦略・IT開発・UXデザイン・マーケティングからチーム・組織運営まで作者:及川 卓也,小城 久美子,曽根原 春樹翔泳社Amazon「プロダクトマネジメントのすべて」は、プロダクトの企画から運用、改善までを包括的に解説した決定版です。本書を通じて、プラットフォームを一つのプロダクトとして捉え、ユーザーである開発者の体験を最適化していくための方法論を学ぶことができます。さらに、プラットフォームチームがどのようにステークホルダーと協働し、組織全体の価値を最大化していくかについても、実践的な知見を得ることができます。両書を組み合わせることで、技術とプロダクトマネジメントの両面から、より効果的なプラットフォームエンジニアリングの実践が可能になるでしょう。Platform Engineering「Platform Engineering: A Guide for Technical, Product, and People Leaders」は、現場での実践知を出発点として、プラットフォームエンジニアリングの本質に迫る実践的なガイドです。技術リーダーから上級管理職まで向けた幅広い読者層に向けて書かれており、個人的にはもう少しだけ広げて開発者やプラットフォームを実際に使う側も読んでも学びのある本だと感じました。Platform Engineering: A Guide for Technical, Product, and People Leaders (English Edition)作者:Fournier, Camille,Nowland, IanO'Reilly MediaAmazon「Platform Engineering on Kubernetes」がKubernetesを基盤とした技術的な実装と運用に重点を置いているのに対し、本書はプラットフォームエンジニアリングをより広い文脈で捉え、組織的・人的側面にも深く踏み込んでいます。例えば、プラットフォームチームの組織的な位置づけ、ステークホルダーとの関係構築、プラットフォーム提供者と利用者の協力関係の構築など、「Platform Engineering on Kubernetes」では詳しく触れられていない領域をカバーしています。特に注目すべきは、本書がプラットフォームの成功を技術的な完成度だけでなく、組織全体への価値提供という観点から評価している点です。プラットフォームの採用を促進し、持続可能な運用を実現するためには、技術的な卓越性に加えて、組織的な課題への対応も重要であることを説いています。そのため、両書を併読することで、技術的な実装から組織的な展開まで、プラットフォームエンジニアリングの全体像を把握することができます。本書を読む前に、「Team Topologies」を一読することを強くお勧めします。「Team Topologies」は、現代のソフトウェア開発組織における効果的なチーム構造とその相互作用のパターンを提示しており、プラットフォームチームの位置づけや役割を理解する上で不可欠な知見を提供してくれます。この基礎的な理解があることで、本書で展開されるプラットフォームエンジニアリングの実践論をより深く理解することができます。チームトポロジー　価値あるソフトウェアをすばやく届ける適応型組織設計作者:マシュー・スケルトン,マニュエル・パイス日本能率協会マネジメントセンターAmazon著者の豊富な経験が凝縮された本書は、単なる表面的な手法の模倣ではなく、実際の現場での試行錯誤から導き出されたプラクティス、そしてその背後にある根本的な原理と思想を探求しています。それが現代のソフトウェア開発組織においていかに革新的な価値を生み出すかを浮き彫りにしている点が特徴的です。本書の真価は、プラットフォームエンジニアリングを単なる技術的な手法の集合としてではなく、日々の実践から得られた知見を体系化し、組織の進化と持続的な成長を促す戦略的な思考基盤として捉えている点にあります。技術的な実装の詳細よりも、組織が現場の文脈に根ざした実践を重ね、そこからプラクティスを抽出し、最終的にプラットフォームエンジニアリングの本質的な原則を理解して創造的に応用していく方法論に重点が置かれています。技術的な側面、特にCloud Nativeな実装に興味がある方には、「Platform Engineering on Kubernetes」がおすすめです。こちらの書籍では、Kubernetesを基盤としたプラットフォームエンジニアリングの実践的なアプローチが詳細に解説されています。両書を併読することで、プラットフォームエンジニアリングの組織的側面と技術的側面の両方を深く理解することができ、より包括的な知識を得ることができるでしょう。本書は、プラットフォームエンジニアリングの現場で直面する本質的な難しさを率直に語っています。具体的には、「技術的に面白いから作る」のではなく現場で真に必要とされるものを見極めて提供するという価値提供の本質、計画の難しさを認識しつつも現場の文脈に応じて適切に実行するという実践知、そして組織の重要なシステムを支える責任を全うするための運用の成熟という現場力の醸成といった課題を挙げています。これらの課題に対して、本書は原則に基づきながらも現場の実態に即した解決の道筋を示しています。最後に、読者として強く感じたのは、プラットフォームエンジニアリングが単なる技術的な課題ではなく、組織的な取り組みとして捉える必要があるという点です。特に、チームの持続可能性とユーザー満足度の両立という観点から、著者の提案する実践的なアプローチは非常に価値があります。本書で提示されているプラクティスは、理想的ではありますが現実的な目標として設定されており、段階的な改善のためのロードマップとしても機能します。特に重要なのは、組織の規模や成熟度に応じて適切なアプローチを選択し、継続的に改善を進めていく姿勢だと考えています。Continuous Deployment「Continuous Deployment: Enable Faster Feedback, Safer Releases, and More Reliable Software 」は、継続的デプロイメントの実践に焦点を当てた包括的なガイドです。継続的デプロイメントは、ソフトウェアパイプラインを完全に自動化し、手動介入を必要としない手法です。この方法により、クオリティーゲートを通過したすべてのコードコミットが自動的に本番環境にデプロイされます。Continuous Deployment: Enable Faster Feedback, Safer Releases, and More Reliable Software (English Edition)作者:Servile, ValentinaO'Reilly MediaAmazon本書の理解をより深めるためには、「Grokking Continuous Delivery」との併読をお勧めします。この本は、継続的デリバリーの基本概念から実践的な実装まで、体系的に解説しています。特に、継続的デプロイメントへの段階的な移行プロセスや、組織文化の変革について、実践的な知見を提供してくれます。両書を読み進めることで、継続的デプロイメントの技術的側面と組織的側面の両方を包括的に理解することができます。Grokking Continuous Delivery (English Edition)作者:Wilson, ChristieManningAmazonこちらの本は日本語版がリリースされています。入門 継続的デリバリー ―テストからリリースまでを安全に自動化するソフトウェアデリバリーのプロセス作者:Christie Wilsonオーム社Amazon本書は、単なる技術的な実装の解説に留まらず、プラットフォームエンジニアリングと開発プロセス全体を変革する可能性について深く掘り下げています。特に、フィーチャーフラグ、カナリーリリース、A/Bテストなどの重要な概念と、それらの実践的な適用方法について詳細な洞察を提供しています。継続的デプロイメントの価値は、ソフトウェア開発の特性と人間の性質を理解することで明確になります。人間は反復作業を得意としませんが、コンピューターシステムはこの種の作業に適しています。継続的デプロイメントは、人間と機械の特性の違いを活かし、相互補完的に活用します。コード変更から本番環境へのデプロイまでを完全に自動化することで、開発者は創造的な問題解決に注力でき、反復的なタスクはシステムに任せることができます。結果として、ソフトウェア開発プロセス全体の効率が向上し、人的ミスのリスクも減少します。本書は、技術的側面だけでなく、組織文化やチーム間の協力体制についても掘り下げています。また、継続的デプロイメントがもたらすソフトウェアのリリースサイクルの短縮や、ユーザーへのフィードバックループの最小化についても解説しています。同時に、コードの品質管理やテスト戦略により高い要求を課すことの重要性も強調しています。強固な自動テスト、モニタリング、迅速なロールバック機能など、継続的デプロイメントを成功させるために不可欠な安全策についても説明しています。実践的な見地からも、本書は開発者が直面する現実的な課題に対する具体的な解決策を提供しています。各章は理論的な基礎から始まり、実際の適用例、そして起こりうる問題とその対処法まで、包括的に解説しています。特に、実際の組織がどのように継続的デプロイメントを導入し、成功を収めているかについての事例研究は、実務に直接活かせる貴重な知見となっています。本書を通じて、継続的デプロイメントが単なる技術的なツールではなく、組織全体の開発文化を変革し、ソフトウェア品質を向上させるための包括的なアプローチであることが理解できます。その実践は、開発効率の向上、リリース品質の改善、そして最終的には顧客満足度の向上につながります。Cloud Observability in Action「Cloud Observability in Action」は、クラウドネイティブ時代におけるオブザーバビリティの概念と実践方法を包括的に解説した一冊です。オブザーバビリティを投資対効果の観点から捉え、データの生成から収集、処理、可視化に至るまでのプロセス全体を俯瞰します。これは、神の視点でシステムを観察できるようになる、デジタル世界の第三の目を手に入れるようなものです。Cloud Observability in Action (English Edition)作者:Hausenblas, MichaelManningAmazonOpenTelemetry、Prometheus、Grafana、Loki、Jaegerなどのオープンソースツールを活用し、誰でも実践的な知見を時間以外の費用をかけずに得られるよう工夫されています。まるで高級な料理のレシピを、コンビニの食材だけで再現する魔法のような本です。著者の豊富な経験に基づくベストプラクティスが随所に盛り込まれ、参考URLも惜しみなく共有されています。システムの監視方法について、何百人もの先人たちが積み上げてきた叡智を一冊に凝縮したような贅沢な内容です。単なるツールの使い方の解説にとどまらず、オブザーバビリティを組織文化として定着させるためのヒントも提供されています。つまり、「システムの見える化」という名の文化革命の指南書とも言えるでしょう。本書を通じて、システムの内部状態を把握・推論する力を身につけることができます。これは、デジタルの迷宮で道に迷った開発者たちに、アリアドネの糸を提供するようなものです。得られた知見をどのように活用するかは読者次第ですが、システムと組織の継続的な進化を支える原動力として、オブザーバビリティを正しく理解し実践することができます。少なくとも、「エラーログを検索すれば何とかなる」という幻想から解放されることは間違いありません。本書は、複雑化するシステムの「見える化」を実現するための、実践的なガイドブックです。これを読まずにオブザーバビリティを始めるのは、暗闇の中でパズルを解こうとするようなものかもしれません。本稿では、各章の要点を丁寧に読み解きながら、私なりの学びと気づきをシェアしていきます。皆様にとっても、オブザーバビリティへの理解を深め、その実践への一歩を踏み出すきっかけとなれば幸いです。Learning OpenTelemetry「Learning OpenTelemetry」は、可観測性という広大な領域に対する実践的な航海図といえます。本書の最も重要な貢献は、OpenTelemetryというテクノロジーを通じて、システムの可観測性をビジネス価値へと変換する具体的な方法論を提示している点です。Learning OpenTelemetry: Setting Up and Operating a Modern Observability System (English Edition)作者:Young, Ted,Parker, AustinO'Reilly MediaAmazon本書を読む際は、オブザーバビリティに関する以下の2冊との併読をお勧めします。まず「Observability Engineering」は、可観測性の基本概念から実践的な実装まで、より広い文脈で解説しています。特に、OpenTelemetryを含む様々な可観測性ツールの位置づけや、組織における可観測性の文化醸成について、包括的な視点を提供してくれます。両書を読み進めることで、技術的な実装の詳細と、より大きな戦略的文脈の両方を理解することができます。Observability Engineering: Achieving Production Excellence (English Edition)作者:Majors, Charity,Fong-Jones, Liz,Miranda, GeorgeO'Reilly MediaAmazonまた、「入門 監視」は、システム監視の基礎から応用まで、実践的な知見を提供してくれます。監視とオブザーバビリティの関係性、メトリクスの収集と分析、アラートの設計など、日々の運用に直結する知識を学ぶことができます。入門 監視 ―モダンなモニタリングのためのデザインパターン作者:Mike JulianオライリージャパンAmazon本書の特筆すべき点は、技術的深度、組織的展開、ビジネス価値という3つの視点を統合的に扱っていることです。技術面では、OpenTelemetryの内部アーキテクチャから実装の詳細まで、体系的な解説を提供しています。特に、トレース、メトリクス、ログの統合方法や、テレメトリパイプラインの設計については、実務で即座に活用できる具体的な知見が豊富です。組織面では、可観測性の導入を単なる技術導入ではなく、組織変革として捉える視点を提供しています。特に、Deep対Wide、Code対Collection、Centralized対Decentralizedという3つの軸に基づく展開戦略は、組織の規模や成熟度に応じた柔軟なアプローチを可能にします。ビジネス面では、テレメトリデータを通じてビジネスの意思決定や改善につなげていく方法について、具体的な指針を示しています。私が実務を通じて特に共感したのは、本書の掲げる「Do no harm, break no alerts」という原則です。可観測性の向上は、既存のシステムや運用プロセスを破壊することなく、段階的に実現していくべきだという主張は、現場の実態に即した賢明なアプローチだと感じます。本書の構成も実践的です。各章は理論的な基礎から始まり、実装の詳細、そして運用上の考慮点へと展開されていきます。特に、各章末のケーススタディやベストプラクティスは、他組織の経験から学ぶ貴重な機会を提供してくれます。最後に、本書の結論部分で言及されている「可観測性の次のフロンティア」についても注目に値します。AIとの統合やテストとしての可観測性など、新しい可能性の提示は、この分野の今後の発展を考える上で重要な示唆を与えてくれます。OpenTelemetryの導入を検討している組織にとって、本書は単なる技術解説書以上の価値を持つ戦略的なガイドブックとなるでしょう。また、すでにOpenTelemetryを導入している組織にとっても、その活用方法を再考し、より高度な可観測性を実現するための有益な指針となることは間違いありません。こちらの本は日本語版がリリースされています。入門 OpenTelemetry ―現代的なオブザーバビリティシステムの構築と運用作者:Ted Young,Austin ParkerオライリージャパンAmazonBecoming SRE「Becoming SRE」は、SRE（Site Reliability Engineering）という職種に対する深い理解と実践的な洞察を提供する画期的な一冊です。本書は、個人がSREとしてのキャリアを築くための道筋と、組織がSREを導入・発展させるための戦略を包括的に解説しています。Becoming SRE: First Steps Toward Reliability for You and Your Organization (English Edition)作者:Blank-Edelman, David N.O'Reilly MediaAmazonSREに関する書籍は数多く出版されていますが、本書の特筆すべき点は、その実践に基づいた具体性と実用性にあります。特に、他のSRE関連書籍が理論や理想的なプラクティスの解説に重点を置く傾向がある中、本書は現場で直面する現実的な課題とその解決策に焦点を当てています。例えば、Googleが提唱したSREの原則やプラクティスを、規模や成熟度の異なる組織でどのように適用していくかについて、具体的なステップとアプローチを示しています。また、SREとしてのキャリアパスや、組織内でのSRE文化の醸成方法など、実務者の視点に立った実践的なアドバイスが豊富に盛り込まれています。syu-m-5151.hatenablog.com本書の価値は、SREという職種を単なる技術的な役割としてではなく、組織の文化や価値観を形作る存在として捉えている点にあります。著者のDavid Blank-Edelman氏は、長年のSREとしての経験を基に、技術とビジネスの両面からSREの本質に迫っています。本書は3つのパートで構成されています。Part Iでは、SREの基本的な概念、文化、そしてマインドセットについて解説しています。特に注目すべきは、SREが目指すべき「適切な信頼性レベル」という考え方です。100%の信頼性を追求するのではなく、ビジネスの要求と照らし合わせながら、最適な信頼性レベルを見極めることの重要性が説かれています。Part IIは、個人がSREになるための具体的なステップを示しています。技術的なスキルセットはもちろん、コミュニケーション能力、問題解決力、そして失敗から学ぶ姿勢など、SREに求められる多面的な資質について詳細に解説されています。特筆すべきは、オンコール対応やインシデント管理といった実務的なトピックについても、豊富な事例とともに具体的なアドバイスが提供されている点です。Part IIIでは、組織としてSREを導入・発展させるための戦略が展開されています。SREの成功は、個々のエンジニアの努力だけでなく、組織全体のサポートと理解が不可欠だという著者の主張は説得力があります。特に興味深いのは、SREの組織的な成熟度を5つのステージで捉えるフレームワークです。各ステージの特徴と課題、そして次のステージへの移行に必要な施策が具体的に示されています。本書が特に強調しているのは、SREにおける「文化」の重要性です。モニタリング、自動化、インシデント対応といった技術的な実践も重要ですが、それらを支える組織文化がなければ、SREは真の力を発揮できません。データ駆動の意思決定、失敗から学ぶ姿勢、部門間の協働、これらの文化的要素をどのように育んでいくかについても、深い洞察が示されています。また、本書はSREの導入と成長における現実的な課題にも正面から向き合っています。技術的な障壁はもちろん、組織の抵抗、リソースの制約、文化の変革の難しさなど、SREが直面する様々な課題に対する具体的な対処法が提示されています。総じて本書は、SREを目指す個人にとってのキャリアガイドであると同時に、組織にとってのSRE導入・発展のロードマップとして機能する実践的な指南書です。著者の豊富な経験に基づくアドバイスは、SREという未知の領域に踏み出そうとする読者にとって、信頼できる道標となるはずです。こちらの本も日本語版がリリースされています。SREをはじめよう ―個人と組織による信頼性獲得への第一歩作者:David N. Blank-EdelmanオライリージャパンAmazonFundamentals of Data Engineering「Fundamentals of Data Engineering」は、データエンジニアリングの基礎から実践までを体系的に解説した包括的な一冊です。データエンジニアリングを「raw dataを取り込み、高品質で一貫性のある情報を生成するシステムとプロセスの開発、実装、維持」と定義し、その全容を詳細に説明しています。Fundamentals of Data Engineering: Plan and Build Robust Data Systems (English Edition)作者:Reis, Joe,Housley, MattO'Reilly MediaAmazon本書は4つのパートで構成されており、Part Iではデータエンジニアリングの基礎と構成要素、Part IIではデータエンジニアリングのライフサイクルの詳細、Part IIIではセキュリティとプライバシー、そして将来の展望を扱っています。特に、データ生成からストレージ、取り込み、変換、提供までの一連のライフサイクルについて、実践的な知見が豊富に盛り込まれています。著者たちは、特定のツールや技術に依存しない原則ベースのアプローチを採用しています。これにより、急速に変化するデータ技術の世界においても、長く有効な知識を提供することに成功しています。データエンジニアは、セキュリティ、データ管理、DataOps、データアーキテクチャ、オーケストレーション、ソフトウェアエンジニアリングの交差点に位置し、これらの要素を統合的に理解し活用する必要があることが強調されています。本書の特筆すべき点は、理論と実践のバランスが絶妙なことです。データエンジニアリングの基本原則を解説しながら、実際のシステム設計や運用における具体的な課題とその解決策も提示しています。また、クラウドファーストの時代におけるデータエンジニアリングの在り方についても深い洞察が示されています。セキュリティとプライバシーに関する章では、データエンジニアリングにおけるセキュリティの重要性と、具体的な実装方法が詳細に解説されています。GDPRなどの規制への対応や、データの匿名化、アクセス制御など、現代のデータエンジニアが直面する重要な課題がカバーされています。最後に、データエンジニアリングの将来に関する章では、業界の動向と今後の展望が示されています。クラウドスケールの「データOS」の出現や、リアルタイムデータ処理と機械学習の融合など、興味深い予測が述べられています。本書は、データエンジニアリングの世界で活躍したい技術者にとって、必携の一冊となるでしょう。体系的な知識の習得と実践的なスキルの向上に大いに役立つ内容となっています。こちらの本も日本語版がリリースされています。データエンジニアリングの基礎 ―データプロジェクトで失敗しないために作者:Joe Reis,Matt HousleyオライリージャパンAmazonTidy First?「Tidy First?」は、エクストリームプログラミングの考案者であり、ソフトウェアパターンの先駆者として知られるKent Beckによる、コードの整理整頓に関する画期的な一冊です。本書は、リファクタリングの新しい考え方として「Tidying（整理整頓）」という概念を提唱し、その実践的なアプローチを示しています。Tidy First?: A Personal Exercise in Empirical Software Design (English Edition)作者:Beck, KentO'Reilly MediaAmazonリファクタリングといえば「リファクタリング 既存のコードを安全に改善する」や「レガシーコードからの脱却」ですがこのリファクタリングの考え方をより小規模で実践的なアプローチへと発展させたものと言えるでしょう。リファクタリング 既存のコードを安全に改善する（第2版）作者:ＭａｒｔｉｎＦｏｗｌｅｒオーム社Amazonレガシーコードからの脱却 ―ソフトウェアの寿命を延ばし価値を高める9つのプラクティス作者:David Scott BernsteinオライリージャパンAmazon本書の核心は、「いつ、どこで、どのようにコードを整理するべきか」という実践的な問いに対する答えを提示している点です。特に注目すべきは、Tidyingをリファクタリングの部分集合として位置づけ、より小規模で安全な改善活動として定義している点です。本書は3つのパートで構成されています。Part 1: Tydingsでは、具体的な整理整頓の手法が示されています。変数名の調整や対称性の確保、不要なコードの削除など、小規模だが効果的な改善活動が詳しく解説されています。これらは、ボーイスカウトの原則（来たときよりも美しく）とも通じる考え方です。Part 2: Managingでは、Tidyingの実践的なマネジメントについて解説されています。特に重要なのは、機能開発の直前にTidyingを行うべきという提言です。これは、料理をする前にキッチンを整理整頓するのと同じように、本題に取り組む前に作業環境を整えることの重要性を示唆しています。また、Tidyingは1時間以内に完了できる規模に抑えるべきという具体的な指針も示されています。Part 3: Theoryでは、Tidyingの理論的な基盤が展開されています。特筆すべきは、経済的な観点からの分析です。NPV（正味現在価値）やオプション理論を用いて、Tidyingの投資対効果を説明しています。また、疎結合と高凝集というソフトウェアアーキテクチャの基本原則との関連も論じられています。また、ソフトウェア設計の基本原則をより深く理解するために、以下の2冊との併読をお勧めします。「Balancing Coupling in Software Design」は、システムの結合度に焦点を当て、モジュール性と複雑性のバランスを取るための実践的なガイドを提供しています。特に、結合度を単なる「悪いもの」としてではなく、システム設計における重要なツールとして捉え直す視点は、Tidyingの経済的価値の考え方と共鳴します。Balancing Coupling in Software Design: Universal Design Principles for Architecting Modular Software Systems (Addison-Wesley Signature Series (Vernon)) (English Edition)作者:Khononov, VladAddison-Wesley ProfessionalAmazonさらに、「A Philosophy of Software Design, 2nd Edition」は、ソフトウェア設計における複雑性の管理について、より哲学的な視点から考察を展開しています。この本は、モジュール分割の原則やインターフェース設計の考え方など、Tidyingの実践を支える理論的な基盤を補完してくれます。A Philosophy of Software Design, 2nd Edition (English Edition)作者:Ousterhout, John K. Amazon本書の真価は、コードの整理整頓を、技術的な活動としてだけでなく、経済的な投資活動として捉える視点を提供している点です。これは、技術的な改善活動の必要性を経営層に説明する際の有効な理論的基盤となります。また、本書は3部作の第1巻として位置づけられており、個人、チーム、組織のレベルでの開発プラクティスを包括的に扱う野心的なプロジェクトの出発点となっています。私にとって、本書は技術的負債の管理に関する新しい視点を提供してくれました。特に、小規模な改善活動を継続的に行うことの重要性と、その活動の経済的な価値を理解する上で、貴重な指針となっています。本書で提唱されているTidyingの概念は、現代のソフトウェア開発における持続可能性の向上に大きく貢献する可能性を秘めています。技術的な改善と経済的な価値創造の両立を目指す実践的なアプローチとして、多くの開発者にとって有益な知見となるでしょう。こちらの本も日本語版がリリースされます。読んでないのですが定評のある翻訳者陣が担当しており、高品質な翻訳が期待できます。Tidy First? ―個人で実践する経験主義的ソフトウェア設計作者:Kent Beckオーム社Amazonソフトウェア開発現場の「失敗」集めてみた。42の失敗事例で学ぶチーム開発のうまい進めかた「ソフトウェア開発現場の「失敗」集めてみた」は、開発現場でありがちな失敗を42の事例としてまとめ上げた、笑いと教訓が詰まった一冊です。本書の特徴は、各エピソードを4コマ漫画付きで紹介しながら、その失敗から学べる教訓と対策を実践的に解説している点にあります。ソフトウェア開発現場の「失敗」集めてみた。 42の失敗事例で学ぶチーム開発のうまい進めかた作者:出石 聡史翔泳社Amazon本書の真髄は、「失敗」を単なる戒めとしてではなく、成長のための貴重な学びの機会として提示している点です。例えば、「全部入りソフトウェア」や「八方美人仕様」といった事例は、読んでいて思わず苦笑してしまうものの、自分の過去や現在の案件と重ね合わせると背筋が凍るような リアルな内容となっています。特に印象的なのは、各失敗事例が企画、仕様、設計・実装、進捗管理、品質管理、リリース後という開発工程に沿って整理されている点です。これにより、どの段階でどのような落とし穴が待ち構えているのかを、体系的に理解することができます。本書の構成は非常に巧みです。各エピソードは、まず4コマ漫画で状況を分かりやすく説明し、続いて失敗の詳細な解説へと進みます。そして、なぜその失敗が起きるのかという原因分析を行い、最後にどうすれば防げるのかという具体的な対策を示すという流れで展開され、読者を笑いながら学びへと導いていきます。時には「あるある...」と共感し、時には「まさか自分も...」と冷や汗をかきながら、気づけば実践的な対策を学んでいられるという、絶妙な構成となっています。本書を読み進めていく中で、開発現場で日々直面する可能性のある様々な失敗のパターンが、読者の経験と重なりながら鮮やかに描き出されていきます。それぞれの事例は、読者が「ああ、これは...」と思わず身につまされるような、リアルな状況として描かれています。ここで思い出したのが、「達人プログラマー 第2版」です。この本もまた、ソフトウェア開発における失敗と成功の本質を深く掘り下げています。両書に共通するのは、失敗を恐れるのではなく、そこから学び、次につなげていく姿勢です。「達人プログラマー」が開発者としての哲学や普遍的な原則を説くのに対し、この本は現場での具体的な失敗事例とその対策に焦点を当てており、互いに補完し合う関係にあると言えるでしょう。達人プログラマー ―熟達に向けたあなたの旅― 第2版作者:David Thomas,Andrew Huntオーム社Amazon本書の真価は、これらの失敗を「笑い」というクッションを通して提示することで、読者が防衛本能を働かせることなく、客観的に問題を理解し、解決策を考えられるようにしている点です。また、各事例に対する具体的な対策は、実務ですぐに活用できる実践的なものとなっています。私自身、本書を読みながら何度も「あ、これ...」と苦笑いしましたが、同時に「明日からこうしよう」という具体的なアクションプランも得ることができました。特に、チームリーダーやプロジェクトマネージャーにとって、この本は「失敗」という観点からプロジェクトを見直す貴重な機会を提供してくれます。本書は、開発現場の失敗から学ぶという姿勢を大切にしながら、その教訓を次の成功へとつなげていく道筋を示してくれる良書です。時には笑い、時には考え込み、そして明日からの行動を変えていく—そんな良い意味での「反省の書」といえるでしょう。プログラミングRust 第2版「プログラミングRust 第2版」は、Rustという言語の深い理解を導く羅針盤のような一冊です。本書は、システムプログラミングの本質に迫りながら、現代的な言語機能を体系的に解説するという野心的な試みに成功しています。プログラミングRust 第2版作者:Jim Blandy,Jason Orendorff,Leonora F. S. TindallオライリージャパンAmazonこの本の特筆すべき点は、Rustの重要な概念を段階的に、かつ包括的に解説していることです。特に所有権とライフタイム、並行処理といったRustの特徴的な機能について、理論的な説明と実践的な例を絶妙なバランスで提供しています。これは、まるで高度な技術文書をコンパイラが最適化するように、複雑な概念を理解しやすい形に変換してくれる働きがあります。本書の構成は、基本的な言語機能から始まり、徐々により高度なトピックへと展開していきます。例えば、非同期プログラミングやトレイト、ジェネリクス、マクロなど、モダンなRustの重要な機能が詳細に解説されています。これは、読者の理解度を段階的にスケールアップさせていく、よく設計されたアーキテクチャのようです。特に印象的なのは、本書がパフォーマンスとメモリ安全性を両立させるためのRustの機能を、システムプログラマの視点から丁寧に解き明かしている点です。これは、高可用性システムの設計原則にも通じる、信頼性とパフォーマンスのトレードオフを実践的に学べる貴重な機会を提供しています。また、本書は2021年のRust Editionに対応しており、最新の言語機能や実践的なプログラミング手法が網羅されています。これは、まるで継続的デリバリーのパイプラインのように、最新の知識を読者に届けてくれます。実務的な観点からも、本書の価値は計り知れません。エラーハンドリング、テスト、デバッグといった実践的なトピックについても、深い洞察と具体的な実装例を提供しています。これらの知識は、本番環境でのRustプログラミングにおいて、インシデントを防ぎ、安定性を確保するための重要な基盤となります。本書は、単なる言語仕様の解説書を超えて、システムプログラミングの本質に迫る良書といえます。その内容は、Rustを学ぶ開発者にとって、強固な基盤となるインフラストラクチャを提供してくれることでしょう。私にとって、本書は技術書のデータセンターの中核を担うサーバーとして機能しています。新しい機能や概念に出会うたびに、本書に立ち返り、その本質的な理解を深めることができます。2025年に予定されているRust 2024 Editionのリリースに向けて、本書の次版がどのように進化していくのか、今から楽しみでなりません。Programming Rust: Fast, Safe Systems Development (English Edition)作者:Blandy, Jim,Orendorff, Jason,Tindall, Leonora F. S.O'ReillyAmazonEffective Rust「Effective Rust」は、Rustのコンパイラが発する警告やエラーの深い理由を解き明かしてくれる、暗号解読書のような一冊です。本書は、単なる文法やパターンの解説を超えて、Rustの設計思想とその根底にある原理を探求することで、より深い理解と実践的なスキルの獲得を可能にします。Effective Rust: 35 Specific Ways to Improve Your Rust Code (English Edition)作者:Drysdale, DavidO'Reilly MediaAmazon本書の真髄は、「なぜそのコードがコンパイラに拒否されるのか」という本質的な問いに対する答えを提供している点です。これは、まるでセキュリティ監査ツールのような役割を果たし、潜在的な問題を事前に検出し、より安全なコードへと導いてくれます。例えば、借用チェッカーとの「戦い」は、実はメモリ安全性を確保するための重要な対話であることを理解させてくれます。特筆すべきは、本書が型システムを通じたデザインパターンを詳細に解説している点です。これは、アプリケーションのアーキテクチャを型安全に設計するための青写真を提供してくれます。例えば、newtypeパターンの活用や、トレイトを用いた共通の振る舞いの表現など、型システムを活用した設計手法を学ぶことができます。また、本書はエラーハンドリングのベストプラクティスについて深い洞察を提供します。OptionやResult型の効果的な使用法から、独自のエラー型の設計まで、堅牢なエラー処理の体系を示してくれます。これは、まるで障害対策のプレイブックのような役割を果たします。実務的な観点からも、本書の価値は計り知れません。依存ライブラリの管理やツールチェーンの活用など、実践的なトピックについても詳しく解説されています。特に、Clippyとの対話を通じたコード品質の向上や、CIシステムの設定など、現代のソフトウェア開発に不可欠な知識が網羅されています。本書は、「とりあえず動く」コードから「より良い」コードへの進化を支援してよりイディオマティックなRustコードへの道筋を示してくれます。私にとって、本書は技術書のデータセンターにおける重要なセキュリティシステムとして機能しています。コードの品質と安全性を確保するためのチェックポイントとして、常に参照すべき存在となっています。特に、「なぜそうすべきか」という根本的な理解を深めることで、より効果的なRustプログラミングが可能になります。こちらの本も日本語版がリリースされています。Effective Rust ―Rustコードを改善し、エコシステムを最大限に活用するための35項目作者:David Drysdaleオーム社Amazonバックエンドエンジニアを目指す人のためのRust「バックエンドエンジニアを目指す人のためのRust」は、単なるRustの入門書を超えて、実践的なプロジェクトを通じてバックエンドエンジニアに必要な知識とスキルを体系的に学べる一冊です。本書は、「なぜバックエンドにRustなのか」という根本的な問いに、具体的なプログラミング体験を通じて答えを提示しています。バックエンドエンジニアを目指す人のためのRust作者:安東 一慈,大西 諒,徳永 裕介,中村 謙弘,山中 雄大翔泳社Amazon「Webバックエンド開発にRustは不要ではないか？」という疑問に対して、本書は実践的な回答を提供します。Rustの型システムとコンパイラによる厳格なチェックは、本番環境での予期せぬエラーを事前に防ぐことができます。また、エラーハンドリングやOption/Result型の扱いなど、Rustの特徴的な機能は、信頼性の高いバックエンドシステムの構築に直接的に貢献します。本書の構成は、学習者の段階的な成長を支援するように綿密に設計されています。計算クイズから始まり、ポーカーゲーム実装でデータ構造を学び、家計簿プログラムでファイルI/Oを理解し、最終的にはTODOアプリの開発とデプロイメントまでを経験できます。各プロジェクトは、バックエンド開発に必要な特定の技術要素に焦点を当てており、理論と実践を効果的に結びつけています。また、本書はCargoによるパッケージ管理、ユニットテスト、リンター、フォーマッターといった実務で重要となる開発ツールの活用方法も丁寧に解説しています。これらのツールは、チーム開発における生産性と品質の向上に直結する重要な要素です。本書を通じて学べる実践的なスキルは、現代のバックエンド開発の現場で直接活用できます。とりわけ、Webアプリケーション開発からデプロイメントまでの一連のプロセスを実際に体験できる点は、実務への橋渡しとして非常に価値があります。最終章では採用面接を想定した内容も含まれており、学習した内容を実際のキャリアにつなげる道筋も示されています。Real World HTTP 第3版「Real World HTTP 第3版」は、HTTPプロトコルの基礎から最新動向まで、体系的かつ実践的に解説した決定版です。本書は、HTTPの歴史的な進化をたどりながら、ブラウザの内部動作やサーバーとのやり取りについて、実例とコードを交えて詳細に解説しています。Real World HTTP 第3版 ―歴史とコードに学ぶインターネットとウェブ技術作者:渋川 よしきオライリージャパンAmazon本書は、辞書的に知りたい項目を調べるのにも、通して読んで体系的に学習するのにも適しています。特に注目すべきは、認証やセキュリティなど、開発者が苦手意識を持ちがちな領域についても、実践的な観点から詳しく解説している点です。サンプルコードはGoを使用していますが、これは動作確認や挙動の理解に焦点を当てたものです。実際の実装例を通じて、HTTPの基本的な仕組みから最新の機能まで、具体的に理解することができます。もう少し入門的な内容としては「［改訂新版］プロになるためのWeb技術入門」をオススメしたいです。10年以上にわたって多くの読者に支持されてきた本書はWebシステムの基礎から最新のSPAまで、体系的かつ段階的に学べる実践的な入門書です。本書は、なぜWebシステムをうまく作ることができないのかという根本的な問いに対して、技術の本質的な理解を通じて答えを導き出そうとしています。サンプルもどうようにGoですし、Goは本能さえあれば読めるので…。［改訂新版］プロになるためのWeb技術入門作者:小森 裕介技術評論社Amazonまた、実装やWeb技術を学べたと思ってアーキテクチャ設計を学ぶ準備が整った方には、「アーキテクトの教科書 価値を生むソフトウェアのアーキテクチャ構築」をお勧めします。本書は、アーキテクチャ設計の本質的な考え方から、実践的な構築手法までを体系的に解説していて入門にはぴったりです。アーキテクトの教科書 価値を生むソフトウェアのアーキテクチャ構築作者:米久保 剛翔泳社AmazonWeb技術やアーキテクチャについて検索エンジンやChatGPTで調べると、求めている答えにたどり着くまでに多くの時間がかかり、また得られる情報が断片的になりがちです。一方、良質な技術書は、その分野の知識を体系的に整理し、読者が見落としがちな重要なポイントも含めて包括的に解説してくれます。さらに、実践的な経験に基づく洞察や、背景にある原理の説明など、オンラインでは得にくい深い知見を提供してくれます。第3版では、より初学者を意識した導入や、スーパーアプリなどプラットフォーム化するウェブに関する新章が追加されています。また、HTTP/3とQUICなど最新の技術動向についても詳しく解説されています。本書の圧倒的な情報量は、単なるボリュームではなく、実務で本当に必要となる知識が凝縮されています。AWSやWebフレームワークでの開発スキルも重要ですが、真のWebエンジニアとして成長するためには、本書で解説されているような基盤となる知識の理解が不可欠です。学び直しにも最適な一冊であり、眺めるだけでも新しい発見が得られます。HTTPやWeb技術の深い理解を目指す若手エンジニアには、まさに必携の書といえるでしょう。【改訂新版】システム障害対応の教科書「システム障害対応の教科書」は、システム障害対応の暗黙知を形式知化し、体系的に解説した画期的な一冊です。本書は、インシデント発生から終息までの一連のプロセスを詳細に解説するだけでなく、組織としての障害対応力向上までを包括的にカバーしています。【改訂新版】システム障害対応の教科書作者:木村 誠明技術評論社Amazon改訂新版では、チームメンバーの教育と育成、障害対応訓練、事故を防ぐ手順書の作り方、エンドユーザ向け情報発信についての新章が追加され、より実践的な内容となっています。特に、ワークブック編の追加により、理論を実践に落とし込むための具体的な手法が提供されており、新人から中堅、マネージャーまで幅広い層に価値のある内容となっています。本書の真価は、システム障害対応における役割と基本動作の明確化にあります。インシデントコマンダー、作業担当者、ユーザ担当者など、各役割の責務と行動規範が詳細に解説されています。また、必要なドキュメントやツール、環境についても具体的な説明があり、すぐに実務に活かせる実践的な知識を得ることができます。特に注目すべきは、組織の障害対応レベル向上と体制作りに関する章です。障害対応力のスキルチェックシートや訓練の実施要領など、組織として継続的に改善していくための具体的な方法論が示されています。また、生成AI技術のシステム運用への応用についても言及されており、最新の技術動向も押さえられています。Appendixでは、実際の難易度の高いシステム障害ケースが紹介されており、ビジネスロジックの障害から大規模インフラ障害、災害時の対応まで、現実的なシナリオに基づいた学びを得ることができます。これらのケーススタディは、理論と実践を結びつける貴重な教材となっています。本書は、システム運用に関わるすべての人にとって、障害対応の基本から応用まで、体系的に学べる決定版といえます。新人エンジニアの教育から、中堅エンジニアのスキル向上、マネージャーの組織運営まで、幅広いニーズに応える内容となっています。運用であればAWS運用入門も今年読んで良かった本なのであわせて紹介しておきます。AWS運用入門　押さえておきたいAWSの基本と運用ノウハウ作者:佐竹 陽一,山﨑 翔平,小倉 大,峯 侑資SBクリエイティブAmazon申し訳ありません。GitHub CI/CD実践ガイドの章は前の章とは独立して新規に追加すべきでした。改めて追加させていただきます：GitHub CI/CD実践ガイド「GitHub CI/CD実践ガイド」は、持続可能なソフトウェア開発を支えるGitHub Actionsの設計と運用について、基礎から実践、そして応用まで体系的に解説した一冊です。本書は、単なるGitHub Actionsの使い方マニュアルを超えて、現代のソフトウェア開発における継続的インテグレーションと継続的デリバリーの本質に迫っています。GitHub CI/CD実践ガイド――持続可能なソフトウェア開発を支えるGitHub Actionsの設計と運用 エンジニア選書作者:野村 友規技術評論社Amazon本書の特徴は、その構成の緻密さにあります。基礎編では、GitHub Actionsの基本概念や構文を丁寧に解説し、実践編では具体的なユースケースに基づいた実装方法を示し、応用編では高度な使い方やセキュリティ、組織としての実践方法を展開しています。この段階的なアプローチにより、読者は自然と実践的なCI/CDの知識を積み上げていくことができます。特筆すべきは、本書がセキュリティと運用の観点を強く意識している点です。GitHub Actionsの基本的な使い方だけでなく、OpenID Connectによるセキュアなクラウド連携、Dependabotによる依存関係の管理、GitHub Appsによるクロスリポジトリアクセスなど、実運用で直面する重要な課題についても深く掘り下げています。本書が提供する知見は、現代のソフトウェア開発において不可欠な継続的デリバリーの実践へと読者を導きます。組織のパフォーマンス向上からバージョン管理戦略、テスト戦略、そしてインフラストラクチャの変更管理まで、包括的な視点でCI/CDの実践方法を解説しています。私にとって本書は、日々のCI/CD運用における信頼できるリファレンスとなっています。実装時の細かな疑問から、アーキテクチャレベルの設計判断まで、様々な場面で本書の知見が活きています。GitHubを利用する開発者にとって、この本は確実に実務の質を高めてくれる一冊となるでしょう。個人的にLearning GitHub Actionsが好きだったので日本語版のような書籍がでてきてくれて嬉しいです。Learning GitHub Actions: Automation and Integration of CI/CD with GitHub (English Edition)作者:Laster, BrentO'Reilly MediaAmazonおわりに2024年、私にとって技術書との関わり方が大きく変化した1年でした。技術書に関してはこれまでのように単に量を追い求めるのではなく、一冊一冊をより深く理解することに注力しました。その過程で、技術書は単なる情報の集合体ではなく、先人たちの経験や洞察が凝縮された知恵の結晶であることを改めて実感しました。今年はプラットフォームエンジニアリング、継続的デプロイメント、オブザーバビリティ、SRE、データエンジニアリングなど、現代のソフトウェアエンジニアリングにおける重要なテーマを深く学ぶことができました。また、技術イベントでの発表や記事執筆に向けて、多くの入門書にも触れる機会があり、そこに込められた読者の理解を深めるための緻密な工夫にも感銘を受けました。特に印象深かったのは、これらの技術書に共通する「実践知の体系化」というアプローチです。例えば、『Platform Engineering』は組織的な実践知を理論化し、『システム障害対応の教科書』は現場の暗黙知を形式知へと昇華させています。また、『プログラミングRust』や『Effective Rust』といった言語関連の書籍も、単なる技術解説を超えて、設計思想や原理の本質的な理解に重点を置いています。これらの本から得た知識は、日々の業務や技術イベントでの発表を通じて実践し、さらにその経験を自分の言葉で発信することで、理解をより深めることができました。来年も引き続き、質の高い技術書との出会いを大切にし、得られた知見を実践し、コミュニティに還元していくことで、エンジニアとしての成長を続けていきたいと考えています。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vim-jpラジオ#24聞いた - OSS活動するVimmer]]></title>
            <link>https://blog.atusy.net/2024/12/23/vim-jp-radioa-24/</link>
            <guid>https://blog.atusy.net/2024/12/23/vim-jp-radioa-24/</guid>
            <pubDate>Mon, 23 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[アカデミア系Vimmerの飽くなき挑戦を感じられる刺激的な回。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Workforce Identity + Auth0 で Vertex AI Search の ACL 制御を行う]]></title>
            <link>https://zenn.dev/satohjohn/articles/a422ee68dd3485</link>
            <guid>https://zenn.dev/satohjohn/articles/a422ee68dd3485</guid>
            <pubDate>Sun, 22 Dec 2024 18:03:43 GMT</pubDate>
            <content:encoded><![CDATA[3-shake AdventCalendar 第2シーズン 23日目の記事になります。2回目の登場です。今回は真面目な(?)技術記事になります。私としては前回書いた記事も大真面目でしたが。 概要今回やりたいこととしては、ウェブアプリケーション上で Id Provider(以後 IdP) 認証をして、その結果を利用して Vertex AI Agent Builder の Search 機能(以後めんどいので旧称の Vertex AI Search として説明) の ACL による検索の権限管理を行うというものです。今回 IdP として Auth0 を利用します。そのため、少し A...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Signerにおけるコンテナ署名の実装]]></title>
            <link>https://blog.masasuzu.net/entry/2024/12/22/132803</link>
            <guid>https://blog.masasuzu.net/entry/2024/12/22/132803</guid>
            <pubDate>Sun, 22 Dec 2024 04:28:03 GMT</pubDate>
            <content:encoded><![CDATA[この記事は3-shake Advent Calendar 2024の22日目の記事です。AWS Signerを使ったコンテナイメージの署名処理を扱った案件があったのでこちらの紹介となります。ただ、後述するように完成には至ってないです。それでもAWS Signerを使った署名処理と署名検証についての概要をお伝えできるかなと思います。今回のシステムはAWS ECS で Web サービスを運用しています。GitHub Actions を利用してデプロイを行っています。構成としては至ってベーシックな形になっています。今回、コンテナイメージのセキュリティ強化のため、ECR に保存されているイメージが改竄されていないことを保証する要件が追加されました。この記事では、AWS Signer を用いたコンテナイメージの署名と検証の実装、そして現状の課題と今後について記述します。AWS SignerとはWhat is AWS Signer? - AWS SignerAWS Signer はフルマネージドなコード署名サービスです。従来は Lambda 関数などで利用されていましたが、2023年の6月にECRのイメージ署名にも対応しました。AWS がコンテナイメージへの署名を導入Notary ProjectのNotation CLIを用いることで、ECRに保存されているコンテナイメージを署名することができ、署名ファイルをコンテナイメージとともにECRに保存できます。これによりコンテナイメージの真正性と完全性を検証することができます。ECS × AWS Signer を使ったイメージ署名ワークフローを試してみた - Speaker Deckなお、AWS Signerによるイメージ署名に゙関してはNRI ネットコム様のスライドに詳しく書かれているのでこちらを参照するとより理解が深まります。デプロイフロー変更前デプロイフローとしてはGitHub Actionsでレポジトリ内のソースをdocker buildしたものをECRにpushし、ECS Serviceにデプロイするシンプルなワークフローになります。変更前変更後このワークフローにコンテナイメージ署名の処理を追加します。notationコマンドにSigner Profileのarnを指定して、署名と検証をそれぞれ行う形になります。今回は、GitHub Actions ワークフローに AWS Signer を使った処理を組み込みます。ECRにpushしたイメージに対して署名を行うように変更しました。署名したあとに署名検証を行うことになります。後述しますが、これだけだと本来は不完全なものです。変更後実装ここから実装を見て行きます。先述したワークフローに帰るために以下の変更が必要となります。インフラ側AWS Signer Profileの追加デプロイ用IAM RoleにAWS Signer Profileへのアクセス権の追加デプロイ側署名処理の追加Terraformインフラ側の変更を見ていきましょう。追加箇所としてはSigner Profileの追加とGitHub Actions用のIAM Policyへの権限追加となります。変更箇所以外は今回は割愛しています。platform_idを"Notation-OCI-SHA384-ECDSA"に指定してSigner Profileを作成します。レポジトリ名をProfile名にしており、レポジトリ名が - 区切りで、Profile名が - を使えないという事情で _ への置換処理をしています。Siner Profileresource "aws_signer_signing_profile" "main" {  platform_id = "Notation-OCI-SHA384-ECDSA"  # profile名に-が使えないので置換  name = replace(var.repository_name, "-", "_")}先に作ったSigner Profileへの"signer:GetSigningProfile"と"signer:SignPayload"の許可をデプロイ用のRoleのPolicyに付与します。GitHub Actions用IAM Roledata "aws_iam_policy_document" "deploy_policy" {  #前略  # イメージ署名  # Inline policies for Signer - AWS Signer  # https://docs.aws.amazon.com/ja_jp/signer/latest/developerguide/authen-inlinepolicies.html  statement {    sid    = "SignImage"    effect = "Allow"    actions = [      "signer:GetSigningProfile",      "signer:SignPayload"    ]    resources = [      var.signer_profile_arn    ]  }  # 後略}デプロイsigner policyのファイルをあらかじめ作っておきます。このPolicyを利用して、署名検証を行います。.github/aws/signer_policy.json{    "version":"1.0",    "trustPolicies":[      {          "name":"aws-signer-tp",          "registryScopes":[            "*"          ],          "signatureVerification":{            "level":"strict"          },          "trustStores":[            "signingAuthority:aws-signer-ts"          ],          "trustedIdentities":[            "arn:aws:signer:${region}:${account_id}:/signing-profiles/${profile_name}"          ]      }    ]}既存のECSのデプロイワークフローにnotationのインストール、イメージ署名処理、イメージ署名検証の処理を追記します。リリースブランチにpushされたことを契機にデプロイが走る形です。.github/workflows/deploy.yamlname: Deploy to ECSon:  push:    branches: ['release']env:  AWS_REGION: ap-northeast-1  ECR_REPOSITORY: ${レポジトリ名}  SIGNER_PROFILE_ARN: ${Signer Profile ARN}  SIGNER_POLICY_JSON: .github/aws/signer_policy.jsonjobs:  deploy:    name: Deploy to ECR, ECS    runs-on: ubuntu-latest    steps:      ### 前略      - name: Setup Notation        run: |          wget https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/deb/latest/aws-signer-notation-cli_amd64.deb          sudo dpkg -i aws-signer-notation-cli_amd64.deb      - name: Sign image        env:          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}          IMAGE_TAG: ${{ github.sha }}        run: |          notation sign $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --plugin "com.amazonaws.signer.notation.plugin" --id "$SIGNER_PROFILE_ARN"      - name: Verify image        env:          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}          IMAGE_TAG: ${{ github.sha }}        run: |          notation policy import $SIGNER_POLICY_JSON          notation verify $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG      ### 後略課題ここまででイメージの署名処理および署名検証の実装はできました。しかしながら、いくつか課題があります。CIとCDの分離先の実装を見るとわかるのですが、署名したイメージを即時署名検証していることがわかります。これは同じイメージに対して行われているため、実質的な検証にはなっていません。真の改竄検知のためには、CI/CD パイプラインを分離し、デプロイ時に別途署名検証を行う必要があります。また、pushしたコンテナイメージの脆弱性チェックもデプロイ前に行うことが望ましいです。そこで下記のように変更したいところです。ただ、デプロイのフローが変わってしまうので、調整が必要でまだ手をつけていない状態になります。理想正規手順以外でデプロイされたイメージの検証さらに、正規のデプロイフロー以外で起動されたタスクのイメージ検証も課題です。署名されていないイメージが起動されていても何もチェックができていない状態です。これに対するアプローチとしては、EventBridgeでタスクが起動したイベントを拾って、イメージの署名をチェックし、検証できなかったものに゙関しては処理を行う(タスクの停止や通知など)という方法があります。これはContainers on AWSで紹介されているので、この方法を実装できたらと考えています。Container image signing and verification using AWS Signer for Amazon ECS and AWS Fargate | Containers on AWS署名検証のサービス統合ここまで見ていて気付いたかもしれませんが、ECS Serviceがタスクを起動するときに署名されているかどうかをチェックするようにECSサービスと統合されていれば、独自に署名検証を実装する必要はありません。このへん、Google CloudのBinary Authorizationはサービスと統合されているので、署名検証を自前で書く必要がないと理解してます。AWSもサービスと統合して楽に使えるようになることを期待してます。Binary Authorization の概要  |  Google Cloudまとめ現状でできていることは以下のとおりです。ECRへpushしたイメージの署名処理現状課題となっているものは以下のとおりです。CI/CDの分離署名されていないコンテナイメージが起動されていないかのチェックこの記事では、AWS Signer を用いたコンテナイメージの署名実装と、残された課題について説明しました。まだできていないことが多いですが、まずビルドしたイメージに対して署名を行うという第一歩を踏み出しました。ここから署名検証の仕組みを強化し、よりセキュアなコンテナ運用を実現するために、引き続き改善に取り組んでいきたいと思ってます。参考リンクAWS がコンテナイメージへの署名を導入AWS Signer と Amazon EKS におけるコンテナイメージ署名の提供開始 | Amazon Web Services ブログECS × AWS Signer を使ったイメージ署名ワークフローを試してみた - Speaker DeckSign container images in Signer - AWS SignerContainer image signing and verification using AWS Signer for Amazon ECS and AWS Fargate | Containers on AWSBinary Authorization の概要  |  Google Cloud]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スリーシェイク所属の早川大貴がクラウドネイティブ技術を推進するCNCF Ambassadorsに就任]]></title>
            <link>https://sreake.com/blog/cncf_ambassadors/</link>
            <guid>https://sreake.com/blog/cncf_ambassadors/</guid>
            <pubDate>Fri, 20 Dec 2024 08:39:11 GMT</pubDate>
            <content:encoded><![CDATA[株式会社スリーシェイク（本社：東京都新宿区、代表取締役社長：吉田 拓真、以下スリーシェイク）所属の早川大貴が、クラウドネイティブ技術を推進するCNCF Ambassadorsに就任したことをお知らせします。The post スリーシェイク所属の早川大貴がクラウドネイティブ技術を推進するCNCF Ambassadorsに就任 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[生成AIでGitHubソースコード取得して仕様書を作成]]></title>
            <link>https://speakerdeck.com/shukob/sheng-cheng-aidegithubsosukodoqu-de-siteshi-yang-shu-wozuo-cheng</link>
            <guid>https://speakerdeck.com/shukob/sheng-cheng-aidegithubsosukodoqu-de-siteshi-yang-shu-wozuo-cheng</guid>
            <pubDate>Fri, 20 Dec 2024 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[https://generative-ai-conf.connpass.com/event/335205/2024生成AI革命期を振り返る忘年会にて、「生成AIでGitHubソースコード取得して仕様書を作成する」というテーマでLTさせていただきました。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cloudflareで管理しているドメインのアクセス解析をGraphQLでやってみる]]></title>
            <link>https://blog.atusy.net/2024/12/20/cloudflare-graphql-analytics-api/</link>
            <guid>https://blog.atusy.net/2024/12/20/cloudflare-graphql-analytics-api/</guid>
            <pubDate>Fri, 20 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Cloudflareのダッシュボード上で確認できるWeb Analyticsの生データが欲しかったので、方法を調べてみた。ベースとなるクエリはブラウザの開発者ツールからコピペできるので便利。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[今までアウトプットしてこなかった私が、今年からアウトプットを始めてわかったこと]]></title>
            <link>https://speakerdeck.com/melanmeg/jin-madeautopututositekonakatutasi-ga-jin-nian-karaautopututowoshi-metewakatutakoto</link>
            <guid>https://speakerdeck.com/melanmeg/jin-madeautopututositekonakatutasi-ga-jin-nian-karaautopututowoshi-metewakatutakoto</guid>
            <pubDate>Thu, 19 Dec 2024 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[イベント: https://findy.connpass.com/event/335692/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[KueueによるKubernetesネイティブなジョブ制御を試してみる]]></title>
            <link>https://sreake.com/blog/kueue-kubernetes-native-job-control/</link>
            <guid>https://sreake.com/blog/kueue-kubernetes-native-job-control/</guid>
            <pubDate>Thu, 19 Dec 2024 03:05:13 GMT</pubDate>
            <content:encoded><![CDATA[Kueue KueueはKubernetesのSIG-Schedulingのサブプロジェクトとして開発が進められている、クラスター内のバッチ・HPC・AI/MLといったジョブのキューイングを提供するAPIとコントローラの […]The post KueueによるKubernetesネイティブなジョブ制御を試してみる first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[dplyrでグループ単位にデータフレームを操作する]]></title>
            <link>https://blog.atusy.net/2024/12/19/dplyr-groupby/</link>
            <guid>https://blog.atusy.net/2024/12/19/dplyr-groupby/</guid>
            <pubDate>Thu, 19 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[dplyr::summarize, dplyr::mutate, dplyr::filterなどの関数の.by引数を使うと、グループごとに計算ができて非常に便利。mutateやfilterでグループ処理できると、集計が一気に捗ると思うのでいくつか例を紹介する。dplyr::group_by関数でも同じことができるけど、dplyr::ungroupを忘れると思わぬ挙動に繋がることもあるので注意。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[俺のガチってるdotfiles紹介]]></title>
            <link>https://zenn.dev/melanmeg/articles/dd0b9606352fb9</link>
            <guid>https://zenn.dev/melanmeg/articles/dd0b9606352fb9</guid>
            <pubDate>Tue, 17 Dec 2024 22:00:02 GMT</pubDate>
            <content:encoded><![CDATA[はじめにどうもです。3-shake の melanmeg です今回は dotfiles 紹介です。エンジニアにとっては、dotfiles は作業効率を上げるための 自分用チートシート のように感じています。もしくは これまで コツコツと積み上げてきた財産 ...ですかね。普段から使い慣れた環境をどこでも再現できるようにしておくことで、複数の端末で素早く自分好みの環境を用意できます！シェルやVSCodeのカスタマイズ、Gitの便利設定、そして新しいVMでの簡単なセットアップ方法を紹介します。dotfiles管理の魅力を共有し、皆さんの環境構築がもっと楽しくなればと思います🙇...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[プロンプトエンジニアリング プログラミング ハンズオン]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2024/12/17/185729</link>
            <guid>https://shu-kob.hateblo.jp/entry/2024/12/17/185729</guid>
            <pubDate>Tue, 17 Dec 2024 09:57:29 GMT</pubDate>
            <content:encoded><![CDATA[genai-users.connpass.comこの記事は上記勉強会の資料です。shu-kob.hateblo.jp↑上記記事を参考にサービスアカウントの設定をしてください。※ Google Cloudの無料期間が終了していると、課金されますが、ハンズオンの内容だけだと数百円もいかないと考えています。料金は確実には言えないので、Google Cloudはご自身の責任でご使用ください。github.com↑今回のサンプルコードgit clone https://github.com/shu-kob/prompt_engineeringcd prompt_engineeringpip install vertexaiLangChainを使わずVertex AIのライブラリを使用シンプルなVertex AIでGeminiを実行project_id = "PROJECT_ID" # 書き換える実行python3 generate_content.pyresponse = model.generate_content(  "プロンプトエンジニアリングとは")プロンプトを変更して実行してみましょう。Zero Shot プロンプティングproject_id = "PROJECT_ID" # 書き換える実行python3 zero_shot_prompting.pyprompt = """以下はニュース記事のタイトルです。「政治」「経済」「芸能」「スポーツ」「科学」「その他」のうち1つに分類してください。回答だけ一言で出力してください===========================紅白出場歌手の選考基準 NHK公開"""プロンプトを変更して実行してみましょう。Few Shot プロンプティングproject_id = "PROJECT_ID" # 書き換える実行python3 few_shot_prompting.pyprompt = """以下はニュース記事のタイトルです。「政治」「経済」「芸能」「スポーツ」「科学」「その他」のうち1つに分類してください。回答だけ一言で出力してください===========================「紅白出場歌手の選考基準 NHK公開」===========================以下は例です「G20 バイデン氏不在で集合写真」:政治「岡田将生&高畑充希結婚 SNS反応」:芸能"""プロンプトを変更して実行してみましょう。LangChainを使用langchain_google_vertexai を使用pip install langchain_google_vertexaipython3 invoke.pymessages = [  ("human", "ネコの鳴き真似をしてください。"),]プロンプトを変更して実行してみましょう。PromptTemplateを使用pip install langchain_corepip install pydantic==2.9.0実行python3 prompt_template.pyプロンプトテンプレートやQuestionを変更して実行してみましょう。ChatPromptTemplateを使用実行python3 chat_prompt_template.pyprompt_template = ChatPromptTemplate.from_messages([    ("system", "ステップバイステップで考えてください。"),    ("human", "{question}"),])question = """10 + 2 * 3 - 4 * 2"""システムプロンプトやQuestionを変更して実行してみましょう。参考資料python.langchain.compython.langchain.com参考文献LangChainとLangGraphによるRAG・AIエージェント［実践］入門Google Gemini 1.5／LlamaIndex／LangChain 人工知能プログラミング実践入門]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cloud Run GPU 上の PaliGemma2 に私の娘は可愛いと言わせるまで]]></title>
            <link>https://zenn.dev/satohjohn/articles/33b27212b3a55e</link>
            <guid>https://zenn.dev/satohjohn/articles/33b27212b3a55e</guid>
            <pubDate>Mon, 16 Dec 2024 11:20:30 GMT</pubDate>
            <content:encoded><![CDATA[この記事は 3-shake Advent Calendar 2024 シーズン1 16日目の記事 & Jagu'e'r Advent Calendar 2024 4日目の記事 になります。3-shake に入社してそろそろ丸2年が経過しようとしており、感慨深く思っております。こういうカレンダーをちゃんと埋められているのをみていても、アウトプットという形で自己研鑽や表現を行う素晴らしいメンバーが多いなと日々日々感じております。そんな中で書けるのも良い経験だと感じております。という前置きを入れつつ、今回は生成 AI の中でも OSS でマルチモーダルな LLM である PaliG...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[週間アトデ 2024-12-16]]></title>
            <link>https://blog.atusy.net/2024/12/16/atodeyomanakata/</link>
            <guid>https://blog.atusy.net/2024/12/16/atodeyomanakata/</guid>
            <pubDate>Mon, 16 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[アトデヨム、ウソジャナイ、ヨムノタノシー]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[KubeCon NA 2024: Goodbye etcd! Running Kubernetes on Distributed PostgreSQLのセッションレポート]]></title>
            <link>https://nnaka2992.hatenablog.com/entry/2024/12/15/goodbyte_etcd_running_kubernetes_on_distributed_postgresql</link>
            <guid>https://nnaka2992.hatenablog.com/entry/2024/12/15/goodbyte_etcd_running_kubernetes_on_distributed_postgresql</guid>
            <pubDate>Sun, 15 Dec 2024 14:16:36 GMT</pubDate>
            <content:encoded><![CDATA[この記事は以下アドベントカレンダー15日目の記事です。3-shake Advent Calendar 2024 シリーズ2Kubernetes Advent Calendar 2024 シリーズ2Goodbye etcd! Running Kubernetes on Distributed PostgreSQL セッションレポートセッション概要 https://kccncna2024.sched.com/event/1i7rt/goodbye-etcd-running-kubernetes-on-distributed-postgresql-denis-magda-yugabyteセッション動画 www.youtube.comこのセッションはKubernetesクラスタのメタデータストアとして利用されるetcdをDistributed PostgreSQLであるYugabyteDBに置き換えた方法を紹介し、デモを行っています。What's etcd?セッションはetcdの解説から始まりました。etcdは分散可能で可用性の高いキーバリューストアであり、シンプルながらも強力なデータベースとして機能します。Raftプロトコルを用いることで、複数のマシンやVMで構成されたクラスタ全体にわたって変更を複製し、ノード障害発生時にも一貫したデータと継続的な動作を保証します。Kubernetesはこのetcdをメタデータストアとして活用し、サービスのポート数やデプロイメントのPod数といったクラスタの状態を管理しています。このセクションはetcdの役割を明確に示し、Kubernetesにおける重要性を理解する上で有用でした。etcdがKubernetesの心臓部と言える重要な役割を担っていることを再認識させられました。Why some are not happy with etcdetcdは多くのKubernetesクラスタで標準的に利用されていますが、大規模環境（100～1000ノード）ではスケーラビリティに課題があることが指摘されました。このようなケースでは、etcdから分散データベースへの移行が必要となります。さらに、etcdプロジェクトへのコントリビュータ不足も懸念材料として挙げられており、Kubernetesが必要とする機能追加への対応が遅れる可能性が示唆されました。このセクションは、etcdの潜在的な問題点を浮き彫りにし、代替手段を検討する必要性を示唆しています。特に大規模運用を想定している場合、etcdのスケーラビリティの限界は深刻な問題になり得ます。KineKineはKubernetesクラスタとリレーショナルデータベース間の仲介役として機能するシミュレータレイヤです。etcd APIをSQLに変換することで、PostgreSQLやMySQLのようなリレーショナルデータベースをKubernetesのメタデータストアとして利用可能にします。Kubernetes APIサーバーが発行したetcd APIをKineがSQLに変換し、データベースに実行することで、etcdの代替を実現します。このセクションはKineの動作原理を簡潔に説明し、リレーショナルデータベースをKubernetesと統合する仕組みを理解する上で重要です。Kineの存在によって、既存のデータベース基盤を活用したKubernetes運用が可能になります。Hands-onデモ環境はGoogle Cloud上の3つのCompute Engine（us-westリージョンの異なるゾーン）に構築されたk3sクラスタで、純粋なPostgreSQLと分散型PostgreSQLであるYugabyteDBの2つのシナリオが示されました。純粋なPostgreSQLは単一VMで、YugabyteDBは3台のVMで実行され、マルチゾーン、マルチリージョン、マルチクラウド/オンプレミス環境への拡張可能性が示唆されました。このセクションはデモ環境の概要を説明し、異なるデータベース構成でのKubernetes運用の可能性を示しています。実環境に近い構成でのデモは、KineとYugabyteDBの有効性を理解する上で非常に役立ちます。Kubernetes on Pure PostgreSQLyoutu.beこのデモでは、PostgreSQLが動作するサーバ上でk3sを実行し、Kineが必要とするオブジェクトがPostgreSQLに作成される様子、そしてk3s自体の動作確認が示されました。既存のPostgreSQL環境へのKubernetesの導入を検討する際に、このデモは具体的な手順と動作イメージを提供してくれます。データベース管理者にとって、Kineによるデータベースへの影響を視覚的に確認できる点は非常に重要です。Kubernetes on YugabyteDBYugabyteDBとは？YugabyteDBは、PostgreSQL互換の分散SQLデータベースです。クエリレイヤはPostgreSQLからフォークされ、ストレージレイヤはLSMツリーベースの実装1を採用しています。複数サーバ・複数リージョンでの運用が可能で、クエリ分散やノード障害時の継続動作を実現します。etcdと同様にRaftプロトコルを利用することで、データの一貫性を確保し、ネットワーク分断時のスプリットブレインにも対応します。このセクションはYugabyteDBの特徴を説明し、高可用性と分散性を備えたデータベースとしての利点を明確に示しています。etcdの代替としてYugabyteDBを検討する際に、この情報は非常に重要です。デモyoutu.beYugabyteDBクラスタ上でk3sを実行するデモでは、PostgreSQLの場合とほぼ同様の手順でKubernetesを起動できることが示されました。YugabyteDBのダッシュボードを用いて、データベースの情報やKineが作成した情報を確認できる点も強調されました。さらに、Kubernetesのサンプルアプリを起動することで、etcdベースのKubernetesと同等の動作が確認されました。1台のCompute Engineを停止させることでYugabyteDBノードの障害をシミュレートし、データベースとKubernetesが継続して動作することを実証しました。このデモは、YugabyteDBの耐障害性と高可用性を視覚的に示し、実運用環境での信頼性を裏付けています。結論このセッションは、KineとYugabyteDBを用いることで、etcdの代替としてリレーショナルデータベースをKubernetesのメタデータストアとして利用できることを示しました。特に、YugabyteDBの分散性と耐障害性は、大規模Kubernetesクラスタの運用においてetcdのスケーラビリティやコントリビュータ不足といった課題を解決する可能性を示唆しています。ただし、YugabyteDBの導入には運用コストや学習コストといった新たな課題も発生するため、etcdとの比較検討が必要です。同様にセッションではKineをネイティブに利用しているk3sを利用していますが、k3sはあくまでKubernetesの軽量ディストリビューションであるため完全に同じものではないため、本当にk3sで良いのかという比較検討も必要になります。またセッション内では100を超えるノードから構成されるKubernetesクラスタではetcdのスケーラビリティが足りず、他のメタデータストアが必要になると紹介していますが、なぜ必要になるかは説明が不足していると感じました。これはKubernetesクラスタが大規模化することでAPIサーバが発行するクエリがetcdの対応可能な10000 rpsを越え始めるためです。より詳細な説明はGoogle Cloudの65000ノードを越えるGKEクラスタをSpannerでホストしていることを紹介しているブログが参考になるでしょう。cloud.google.com]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes The Hard Wayにトライする]]></title>
            <link>https://zenn.dev/moz_sec/articles/0dbb3b7dd08ab3</link>
            <guid>https://zenn.dev/moz_sec/articles/0dbb3b7dd08ab3</guid>
            <pubDate>Sun, 15 Dec 2024 12:14:59 GMT</pubDate>
            <content:encoded><![CDATA[KuberenetesKubernetesとは、複数のコンピュータでコンテナをいい感じに動かしてくれるものです。Kubernetesの説明はいろんなサイトに書いてあるため、そちらを参照してください。公式サイトも参考になります。https://kubernetes.io/docs/concepts/overview/ Kuberentes The Hard WayKubernetes The Hard Wayとは、kubeadmやkubesplayのような、クラスタ構築ツールに頼らず、コンテナランタイムや各コンポーネントを自分でインストールして、設定をし、Kubernetes...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reckoner における Datadog Error Tracking の活用事例]]></title>
            <link>https://zenn.dev/nomadblacky/articles/1901ceb9154c7b</link>
            <guid>https://zenn.dev/nomadblacky/articles/1901ceb9154c7b</guid>
            <pubDate>Sun, 15 Dec 2024 10:35:38 GMT</pubDate>
            <content:encoded><![CDATA[この記事は、3-shake Advent Calendar 2024 の 15 日目の記事です。 はじめに私の所属する株式会社スリーシェイクでは、Reckoner というデータパイプライン構築の SaaS を開発しています。https://reckoner.io/「SaaSをつなぐ。業務が変わる。ビジネスが進化する。」直感的なユーザーインターフェイスで、多種多様な SaaS のデータをつなぎ合わせることで、データ活用・データの民主化を実現します。Reckoner では多種多様な連携先に対応しているため、様々なエラーが発生する可能性があります。そのため、エラーの迅速な発見と...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Japan.R 2024に参加した]]></title>
            <link>https://blog.atusy.net/2024/12/15/japanr-2024/</link>
            <guid>https://blog.atusy.net/2024/12/15/japanr-2024/</guid>
            <pubDate>Sun, 15 Dec 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Hadley氏を筆頭に、本番環境や実務でRを使う話が多くて印象深かった回。色々な話を聞けてよかった。2019年以来のオフライン開催で久しくお会いしていなかった方とお話できたこと、光栄にも私に会ってみたかったという方に挨拶頂けたりブログが参考になったと言っていただけたこと、発表に対して直に感想をやりとりできたことなど、現地入りしてよかったなあと思います。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[KubeCon NA 2024: Database DevOps: CD for Stateful Applicationsのセッションレポート]]></title>
            <link>https://nnaka2992.hatenablog.com/entry/2024/12/14/database_devops_cd_for_stateful_applications</link>
            <guid>https://nnaka2992.hatenablog.com/entry/2024/12/14/database_devops_cd_for_stateful_applications</guid>
            <pubDate>Sat, 14 Dec 2024 18:55:02 GMT</pubDate>
            <content:encoded><![CDATA[この記事は以下アドベントカレンダー14日目の記事です。3-shake Advent Calendar 2024 シリーズ2Kubernetes Advent Calendar 2024 シリーズ1Database DevOps: CD for Stateful Applications セッションレポートセッション概要:https://kccncna2024.sched.com/event/1i7na/database-devops-cd-for-stateful-applications-stephen-atwell-harnessio-christopher-crow-pure-storage?linkback=grid-fullセッションスライドhttps://static.sched.com/hosted_files/kccncna2024/86/Harness-Portworx%20Kubecon%202024.pdfこの記事内の画像は全てこのスライドより引用しています。セッション動画  www.youtube.comこのレポートでは、KubeCon + CloudNativeCon North America 2024 のセッション「Database DevOps: CD for Stateful Applications」の内容をまとめたもので、DatabaseのDevOpsとステートフルアプリケーションの継続的デリバリについてです。データベースCDの課題と解決策セッションでは、データパイプラインのデータテストをデリバリパイプラインに統合することの重要性が強調されていました。従来、データベースのテストは、BIツールなどを用いたカスタマイズされた方法で行われることが多かったようですが、最も信頼性の高いテスト方法は、新旧バージョンで同じデータに対してテストを実行することだとスピーカーは主張していました。そして、Kubernetesはこのようなテストを大幅に簡略化できるとのことでした。この主張は、データベースの変更がアプリケーション全体に及ぼす影響を正確に把握し、本番環境へのデプロイ前に潜在的な問題を早期に発見するために非常に重要です。Kubernetesによるデータベース運用の進化セッションで紹介されたアーキテクチャの進化は、Kubernetesがデータベース運用にもたらす利点を明確に示していました。初期のアーキテクチャでは、アプリケーション、データベース、インフラストラクチャの変更が個別に管理されていましたが、発展したアーキテクチャでは、これらが統合されたCI/CDパイプラインで管理されています。この統合により、アプリケーション、データベース、インフラストラクチャの変更をE2Eでテストできるようになり、本番環境へのデプロイリスクを大幅に軽減できます。このアーキテクチャの進化は、マイクロサービスアーキテクチャやクラウドネイティブ開発との親和性が高いと言えます。マイクロサービスでは、個々のサービスが独立してデプロイされるため、データベースの変更が他のサービスに及ぼす影響を正確に把握することが重要です。Kubernetesはこのような複雑な依存関係を管理し、安全なデプロイを実現するための強力なプラットフォームを提供します。デモのオーバービューセッションでは、具体的なスキーママイグレーションのシナリオを例に、ダウンタイムゼロでのデータベース変更を実現する方法が紹介されていました。WarehouseテーブルのLocationカラムの衝突問題を解決するために、CityとStateカラムを追加し、Locationカラムとの同期をトリガーで実現する方法は、実務で非常に役立つアプローチです。この手法は、データベースの変更によるアプリケーションへの影響を最小限に抑え、ユーザー体験を損なうことなくシステムを進化させることを可能にします。デモで利用されるCDパイプラインデモで適用されるデータベースへの変更個人的にはこのようなユースケースのテストシナリオは複雑になることが多いと考えていたため、自動化を行うには相当のカスタマイズが必要になると思っていたので、この後のデモの手軽さには非常に驚かされました。デモのハイライトとHarnessの活用youtu.beこのセッションはデモが全体のほとんどを閉めています。デモ開始時点のリンクがブログ記事の中盤にあるので、デモ部分だけでもご覧になることを強く推奨します。セッションのデモでは、Harnessというツールが使用され、変更プロセスとロールバック手順が分かりやすく可視化されていました。Harnessは、GitLab CI/CDやGitHub ActionsのようなUIを提供し、各ステップの成功/失敗を容易に確認できる点が優れていると感じました。特に、ArgoCDとの連携によるデータベースとアプリケーションの協調動作は、複雑なデプロイプロセスを簡素化する上で非常に効果的です。デモで紹介された、望ましい状態になっていないことを確認し、変更を加えるプロセスは、実践的な知見を提供していました。また、データベースの変更セットの一部として事前にロールバック手順を定義しておくことは、本番環境での予期せぬ問題発生時に迅速な対応を可能にするベストプラクティスと言えるでしょう。LiquibaseやFlywayなどのツールはこのような機能を提供しており、データベースDevOpsの実践において不可欠です。HarnessではデータベースのDevOpsをアプリケーション、インフラストラクチャー込みで実現しており、非常に理想的なツールのように見えました。一方でこのセッションのスピーカーのひとりはHarnes.ioのエンジニアであるため、ポジショントークや見せたい部分しか見せていないことが十分考えられるので全てを鵜呑みにするのは危険です。それを差し引いても興味深いデモだったので、セッションで紹介された技術スタックを検証してみたいと思っています。まとめこのセッションは、Kubernetesとツールを活用することで、データベースの変更を安全かつ効率的に行う方法を示していました。E2Eテスト、ダウンタイムゼロのスキーママイグレーション、そしてロールバック手順の自動化は、データベースDevOpsを実現するための重要な要素です。これらの手法を適切に組み合わせることで、開発速度を向上させながら、システムの安定性と信頼性を維持することが可能になります。しかし、ここで紹介された手法は全ての状況に適用できるわけではありません。例えば、大規模なデータベースや複雑なトランザクション処理を行うシステムでは、ダウンタイムゼロのマイグレーションが困難な場合があります。そのようなケースでは、段階的なロールアウトやカナリアリリースなどの手法を検討する必要があります. また、ツールの導入や運用にはコストがかかるため、組織の規模やリソースに合わせて適切なツールを選択することが重要です。今後のデータベース運用においては、自動化と可観測性をさらに強化し、自己修復機能を備えた自律的なデータベース運用を目指していくことが重要だと考えます。Kubernetesやクラウドネイティブ技術は、この目標を実現するための基盤となるでしょう。またこのセッションを見るまで、個人的にDatabase on KubernetesはKubernetesを利用している組織でマネージドデータベースのコストを安くしたい場合や、データを自分たちのコントロールできる場所におきたい時に利用する選択肢と思っていました。しかしデータベースをKubenetesにデプロイすることでアプリケーションと密接に結合したテストを簡単に行えることがわかり、データベースの運用コストさえ許容できれば、他のメリットがなくてもデータベースをKubernetesで運用するのは十分ありなのではないかと意見が変わりました。今後は単なるデータベースのホスティング環境としてのKubernetes以外の部分にも注目していきたいです。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[初回実行が遅ければ遅延初期化でやればいいじゃない - RustのTUIアプリケーション改善]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2024/12/14/121545</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2024/12/14/121545</guid>
            <pubDate>Sat, 14 Dec 2024 03:15:45 GMT</pubDate>
            <content:encoded><![CDATA[この記事はRust Advent Calendar 2024 シリーズ3の15日目の記事です。はじめにみなさん、アプリケーションの初回実行の遅さに悩んでいませんか？「初回の検索が遅い...」「起動に時間がかかる...」「ユーザーから苦情が...」といった問題は、多くの開発者が直面する共通の課題です。実は、こういった問題の多くは初期化のタイミングを工夫することで効果的に解決できます。特にRustの場合、遅延初期化の仕組みを積極的に活用することで、パフォーマンスとユーザー体験を大きく改善することが可能です。初期化処理を適切なタイミングで実行することで、アプリケーションの応答性を保ちながら、必要なデータの準備を効率的に行うことができるのです。今回は郵便番号検索アプリケーション（jposta）を具体例として、初期化の最適化手法について詳しく見ていきましょう。この実践的なケーススタディを通じて、効果的な初期化戦略の実装方法を学んでいきます。github.com遅延初期化とは遅延初期化は、「必要になるまで初期化を待つ」という考え方を基本とする重要な最適化テクニックです。アプリケーションの起動時に全てのデータを一度に読み込むのではなく、そのデータが実際に使用されるタイミングまで読み込みを延期することで、システムの効率性を高めることができます。ja.wikipedia.org特に重要な利点として、アプリケーションの起動時間の大幅な短縮が挙げられます。全ての機能を一度に初期化する代わりに、必要な機能から順次初期化することで、ユーザーは最小限の待ち時間でアプリケーションの使用を開始できます。また、大きな設定ファイルの読み込みやデータベース接続の確立、重いライブラリの初期化、キャッシュの構築といったリソース集約的な操作を必要なタイミングまで延期することで、メモリやCPUなどの限られたリソースを効率的に活用することが可能となります。さらに、遅延初期化は複雑な依存関係を持つシステムにおいても効果的です。複数のコンポーネントが互いに依存し合う状況では、初期化の順序が問題となることがありますが、各コンポーネントを必要に応じて初期化することで、この課題を自然に解決できます。加えて、テスト容易性の向上も重要な利点です。必要なコンポーネントだけを初期化できることで、単体テストやモジュールテストが容易になり、テストの実行速度も向上します。また、エラーハンドリングの改善にも貢献します。初期化時のエラーを早期に検出できるだけでなく、実際に使用されないコンポーネントの初期化エラーを回避することができます。運用環境での柔軟性も高まり、システムの一部機能が利用できない状況でも、他の機能を正常に動作させることが可能になります。このように、遅延初期化は現代のソフトウェア開発において、パフォーマンス、保守性、信頼性の面で多くのメリットをもたらす重要な設計パターンとなっています。blog1.mammb.comRustにおける遅延初期化の進化Rustにおける遅延初期化の歴史は、2014年に登場したlazy_staticから始まり、これはマクロベースの実装でスレッドセーフ性に課題があり、型の制約も厳しいものでした。github.comその後、2020年にはonce_cellが登場し、マクロを必要としないシンプルなAPIとスレッドセーフな実装、より柔軟な型のサポートを提供することで、遅延初期化の実装が大きく改善されました。github.comそして2024年になると、LazyCell/LazyLockが標準ライブラリに統合され、さらなる最適化と依存関係の削減が実現され、Rustの遅延初期化機能は新たな段階へと進化を遂げています。blog.rust-lang.orgこのように、Rustの遅延初期化は時代とともに進化し、より使いやすく堅牢な実装へと発展してきました。techblog.paild.co.jp問題の理解：なぜ初期処理が必要か？まず、jpostcode_rsライブラリの実装を見てみましょう：use std::sync::LazyLock;static ADDRESS_MAP: LazyLock<HashMap<String, Vec<Address>>> = LazyLock::new(|| {    let data = include_str!(concat!(env!("OUT_DIR"), "/address_data.json"));    let raw_map: HashMap<String, Value> =        serde_json::from_str(data).expect("Failed to parse raw data");    // ...});このコードの重要なポイントは、LazyLockによる遅延初期化を採用することで、JSONデータの初回アクセス時までパースを延期し、必要なタイミングでメモリへの展開を行う設計となっているということです。このコードから分かるように、初回アクセス時のパフォーマンス低下は遅延初期化の仕組みに起因しています。そこで私たちは、この遅延初期化の特性を活用し、ユーザーが実際にアクセスする前に初期化を完了させる戦略を考案しました。解決策：遅延初期化を活用した初期処理従来の初期化パターンfn new() -> App {    let (search_tx, search_rx) = mpsc::channel::<String>();    let (result_tx, result_rx) = mpsc::channel();    thread::spawn(move || {        while let Ok(query) = search_rx.recv() {            // 初回検索時にデータ初期化が発生 = 遅い！        }    });    App { /* ... */ }}改善後：標準ライブラリの機能を活用use std::sync::{LazyLock, Mutex};// グローバルな初期化フラグstatic INITIALIZED: LazyLock<Mutex<bool>> = LazyLock::new(|| Mutex::new(false));impl App {    fn new() -> App {        let (search_tx, search_rx) = mpsc::channel::<String>();        let (result_tx, result_rx) = mpsc::channel();        thread::spawn(move || {            // バックグラウンドで初期化            {                let mut init = INITIALIZED.lock().unwrap();                if !*init {                    // 軽いクエリで事前初期化をトリガー                    let _ = lookup_addresses("100");                    let _ = search_by_address("東京");                    *init = true;                }            }            // 以降の検索は初期化済みのデータを使用            let mut cache: HashMap<String, Vec<String>> = HashMap::new();            while let Ok(query) = search_rx.recv() {                // 通常の検索処理            }        });        App { /* ... */ }    }}この手法の効果とメリットとデメリットこの手法の中核となる標準ライブラリのLazyLockやMutexなどの基本機能は、追加のライブラリを必要としない堅牢な実装を可能にします。既存のRustプログラマーにとって馴染みのある仕組みを使用しているため、コードの理解や保守が容易であり、依存関係も最小限に抑えることができます。また、これらの機能は既にRustチームによって最適化され、徹底的にテストされているため、高いパフォーマンスと信頼性が保証されています。システムの保守性と運用面では、初期化ロジックの集中管理により、状態管理が大幅に簡素化されます。INITIALIZEDフラグを用いた明示的な制御により、初期化状態の追跡が容易になり、デバッグ性も向上します。さらに、初期化処理をバックグラウンドスレッドで実行することで、メインスレッドのブロッキングを避け、UIの即時表示とレスポンシブな操作感を実現できます。スケーラビリティの観点からは、新機能の追加や初期化順序の制御が柔軟に行えるため、システムの成長に合わせた拡張が容易です。Mutexによる適切な同期制御により、複数スレッドからの安全なアクセスが保証され、並行処理との親和性も高くなっています。また、必要なデータの予測的な先読みとメモリ使用の最適化により、効率的なリソース管理が可能です。初期化処理のモジュール化により、新しい機能の追加時も既存コードへの影響を最小限に抑えられ、キャッシュの効果的な活用によって、大規模なアプリケーションでも高いパフォーマンスを維持できます。一方で、この手法にはいくつかの重要な課題も存在します。まず、メモリ使用量の増加が挙げられます。事前初期化アプローチでは、実際には使用されない可能性のあるデータ構造も含めて、すべてのデータをメモリに展開する必要があります。これは特にメモリリソースが限られている環境において深刻な問題となる可能性があり、システムの全体的なパフォーマンスに影響を与える可能性があります。また、起動時のリソース消費も重要な課題です。バックグラウンドでの初期化処理は、システムの起動時により多くのCPUとメモリリソースを必要とします。特にモバイルデバイスやバッテリー駆動の機器では、この追加のリソース消費が電力効率に悪影響を及ぼす可能性があります。ユーザーの使用パターンによっては、この初期化コストが実際の便益を上回ってしまう場合もあります。さらに、実装の複雑性が増加することも大きな課題です。遅延初期化と事前初期化を組み合わせることで、コードベースの複雑性が著しく増加します。特に初期化の順序や依存関係の管理が複雑になり、開発者がシステムの動作を理解し、デバッグすることが困難になる可能性があります。この複雑性は、新しい機能の追加や既存機能の修正時にも影響を及ぼし、開発効率の低下につながる可能性があります。テストの複雑化も見過ごせない問題です。バックグラウンド初期化を含むコードのテストでは、タイミングや状態管理の観点から、適切なテストケースの作成と実行が困難になります。特に並行処理に関連するバグの再現や検証が複雑になり、品質保証のプロセスに追加の負担がかかる可能性があります。最後に、エラーハンドリングの複雑化も重要な課題です。バックグラウンドでの初期化中に発生したエラーの適切な処理と、それに対するユーザーへの適切なフィードバック提供が技術的な課題となります。エラーが発生した場合の回復処理や、部分的な機能提供の実装も複雑になり、システムの信頼性と保守性に影響を与える可能性があります。このように、標準ライブラリの機能を活用した実装は多くの利点をもたらす一方で、システムの要件や制約に応じて、これらのデメリットを慎重に検討する必要があります。実装時には、これらのトレードオフを考慮しながら、適切な設計判断を行うことが重要となります。実装時の注意点デッドロックの防止{  // スコープによるロックの制限    let mut init = INITIALIZED.lock().unwrap();    if !*init {        *init = true;    }}  // ロックの自動解放初期化の冪等性if !*init {    // 複数回実行されても安全な実装に    let _ = lookup_addresses("100");    *init = true;}まとめ私たちは「初回アクセスが遅いなら、事前に必要な処理を済ませておこう」というシンプルながら実用的なアプローチについて、Rustの標準ライブラリの遅延初期化機構を通じて検討してきました。この手法には、メモリ使用量の増加やコードの複雑化といった課題も存在しますが、適切に実装することで大きな効果が期待できます。標準ライブラリの機能を活用し、依存関係を最小限に抑えながら、スレッドセーフな実装を実現することで、効率的かつ安全な初期化処理が可能となります。このように、遅延初期化と事前初期化を組み合わせたアプローチは、システムの特性や要件に応じて検討すべき重要な最適化パターンの一つと言えるでしょう。参考文献The Rust Standard Library - std::sync::LazyLockThe Rust Standard Library - std::cell::LazyCellRust Performance Book]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cloud Deploy で Cloud Run functions に継続的デリバリーする]]></title>
            <link>https://zenn.dev/kimitsu/articles/cloud-deploy-cloud-run-functions</link>
            <guid>https://zenn.dev/kimitsu/articles/cloud-deploy-cloud-run-functions</guid>
            <pubDate>Sat, 14 Dec 2024 01:17:49 GMT</pubDate>
            <content:encoded><![CDATA[Cloud Deploy は継続的デリバリーを行うための Google Cloud のフルマネージドサービスです。標準では Google Kubernetes Engine と Cloud Run (service と job) へのデプロイをサポートしていますが、カスタムターゲットを定義することでそれ以外の対象にもデプロイすることができます。今回はカスタムターゲットを利用して Cloud Run functions へのデプロイを自動化してみます。本記事では Cloud Deploy の基本的な概念（ターゲット、リリース、デプロイパイプラインなど）については説明しません。これら...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[KubeCon NA 2024: Building Resilience: Effective Backup and Disaster Recovery for Vector Databases on Kubernetes のセッションレポート]]></title>
            <link>https://nnaka2992.hatenablog.com/entry/2024/12/13/building_resilienc_effective_backup_and_disaster_recovery_for_database_on_lubernetes</link>
            <guid>https://nnaka2992.hatenablog.com/entry/2024/12/13/building_resilienc_effective_backup_and_disaster_recovery_for_database_on_lubernetes</guid>
            <pubDate>Fri, 13 Dec 2024 08:57:05 GMT</pubDate>
            <content:encoded><![CDATA[この記事は以下アドベントカレンダー13日目の記事です。3-shake Advent Calendar 2024 シリーズ2Kubernetes Advent Calendar 2024 シリーズ2Building Resilience: Effective Backup and Disaster Recovery for Vector Databases on Kubernetes セッションレポートセッション概要:https://kccncna2024.sched.com/event/1i7kn/when-life-gives-you-containers-make-an-open-source-rds-a-kubernetes-love-story-sergey-pronin-perconawww.youtube.comKubeCon + CloudNativeCon North America 2024 のセッション "Building Resilience: Effective Backup and Disaster Recovery for Vector Databases on Kubernetes" は、AI アプリケーションにおけるベクトルデータベースの重要性と、Kubernetes 上での堅牢なデータ保護戦略の必要性を強調した示唆に富む内容でした。マーケティング的な観点や、聴衆の興味を引くためといった理由からかタイトルでベクトルデータベースとなっていますが、バックアップの部分ではあらゆるデータベースやステートフルワークロードに応用ができる内容でした。AI and Kubernetesセッションは、AI がアプリケーションにもたらす変革的な影響についての概説から始まりました。リソース需要予測による動的スケーリング、異常検知によるセキュリティ向上、UX の改善、そして事前の障害予測による可用性向上など、AI はアプリケーションのあらゆる側面を最適化する可能性を秘めています。そして、これらのメリットを実現する上で、Kubernetes が最適なプラットフォームとして位置づけられています。迅速なデプロイ、高可用性とスケーラビリティ、可搬性と柔軟性、分散ワークロード管理の効率化、そして効率的なバックアップとリカバリといった Kubernetes の特徴は、AI ワークロードの運用に不可欠な要素です。特に、データベースを Kubernetes 上で運用する組織が増加しているという Data on Kubernetes のレポートの言及は、AI/ML ワークロードとデータベース運用の密接な関係性を示唆しており、データベースエンジニアとして注目すべき点でした。Kubernetes がステートフルなアプリケーションの運用基盤として成熟しつつあることを改めて認識させられました。Kubernetes上でAIアプリケーションをデプロイする理由セッションでは、Kubernetes上でAIアプリケーションをデプロイする理由として、迅速なデプロイ、高可用性とスケーラビリティ、可搬性と柔軟性、分散ワークロードの管理の効率化、効率的なバックアップとリカバリ、そしてエコシステムとコミュニティの発展が挙げられていました。これらの利点は、クラウドネイティブな開発と運用を目指す上で非常に重要です。特に、マイクロサービスアーキテクチャを採用する際に、Kubernetes はサービスのデプロイと管理を簡素化し、スケーラビリティと可用性を向上させる上で強力なツールとなります。さらに、ベクトルデータベースのようなステートフルなサービスを Kubernetes 上で運用することで、データの永続性と可用性を確保し、AI アプリケーションの信頼性を向上させることができます。Vector Databases and RAGセッションの中核を成すのが、ベクトルデータベースと RAG (Retrieval Augmented Generation) の解説です。非構造化データの増加に伴い、従来のデータベースでは対応が難しくなってきた画像、テキスト、音声といったデータの効率的な処理が求められています。ベクトルデータベースは、これらの非構造化データをベクトル表現に変換し、類似度検索によって関連性の高い情報を高速に取得することを可能にします。Embedding Model を用いたベクトル化によって、意味的な検索が可能になり、AI アプリケーションの精度と効率性が向上する点が強調されていました。特に、生成 AI アプリケーションにおけるハルシネーション軽減とコンテキスト付与におけるベクトルデータベースの役割は重要です。RAG は、ベクトルデータベースを用いて関連情報を取得し、生成 AI の出力に信頼性を与える手法として紹介されており、今後の AI アプリケーション開発において不可欠な要素となるでしょう。ベクトルデータベースのユースケースセッションでは、ベクトルデータベースのユースケースとして、検索エンジン、画像検索、推薦アルゴリズム、異常検知、そしてチャットボットなどの生成 AI アプリケーションが挙げられていました。これらのユースケースは、現代のアプリケーション開発において非常に重要であり、ベクトルデータベースの適用範囲の広さを示しています。特に、マイクロサービスアーキテクチャにおいて、ベクトルデータベースを独立したサービスとして提供することで、様々なサービスから容易にアクセスできるようになり、システム全体の柔軟性と拡張性を向上させることができます。また、DevOps/SRE の実践においては、ベクトルデータベースの監視と運用を自動化することで、システムの信頼性と可用性を向上させることができます。Data Protectionデータ保護は、Kubernetes 上で運用されるベクトルデータベースにとって不可欠な要素です。データの整合性とセキュリティ、災害復旧、コストと時間の効率化、バージョンコントロール、そしてコンプライアンス規制への準拠など、データ保護は多岐にわたるメリットを提供します。セッションでは、Kubernetes 上でのベクトルデータベースのデータ保護方法として、ストレージスナップショット、データサービスを利用したストレージスナップショット、データサービスレベルのスナップショット、そしてこれらの組み合わせが紹介されました。PVC を利用した永続化データの保護は、Kubernetes ネイティブなデータ保護戦略を構築する上で重要なポイントです。Kanister のようなデータ保護ワークフロー管理ツールは、バックアップとリストアの手順を抽象化し、自動化することで、運用効率を大幅に向上させることができます。Kanister の Blueprint、Profile、ActionSet といった CRD を活用することで、柔軟なデータ保護ワークフローを定義し、Kubernetes の宣言的な運用を実現できます。Kanisterの動作Kanister の動作は、ActionSet が Controller に動作を開始するようにトリガーし、Controller が Blueprint を参照して定義されたオペレーションに従ってベクトルデータベースからバックアップを取得し、オブジェクトストレージに保存するという流れで実行されます。動作完了後、Controller は ActionSet に完了を伝え、ActionSet がユーザーに完了を通知します。この自動化されたワークフローは、データベースエンジニアの運用負荷を軽減し、ヒューマンエラーのリスクを最小限に抑える上で非常に有効です。また、バックアップとリストアのプロセスをコード化することで、再現性と信頼性を向上させることができます。Demoデモでは、書籍推薦チャットボット BookNest を例に、PostgreSQL と PGVector を利用したベクトルデータベースのバックアップとリストアのワークフローが紹介されました。提供された図とデモ動画は、Kanister を用いたデータ保護の実践的な方法を理解する上で非常に役立ちました。具体的な構成例を示すことで、視聴者は自身の環境に合わせたデータ保護戦略を検討する際の参考にすることができます。また、デモを通じて Kanister の操作方法やワークフローの定義方法を視覚的に理解することができ、実践的な知識を深めることができます。Kanister の Blueprint は Kubernetes の manifest 内で ShellScript を書くようなイメージでかけるため、すでに Kubernetesを利用している組織であれば利用に大きなハードルは少なそうだと感じました。Operator 化されたデータベースでは大きなメリットはないかもしれないですが、そうでないデータベースのバックアップや、Operator を使っていても複数の種類がある場合オペレーションの使用ツールの共通化という面で十分メリットがあるでしょう。Call to Actionセッションの締めくくりとして、AI アプリケーションとベクトルデータベースの重要性、そしてデータ保護の必要性が改めて強調されました。データ保護を Day 0 Operation と位置づけるというメッセージは、システム設計の初期段階からデータ保護を考慮することの重要性を示唆しています。システムの保守性、スケーラビリティ、セキュリティを確保する上で、データ保護は不可欠な要素であり、アプリケーション開発ライフサイクル全体を通じて考慮する必要があります。まとめこのセッションは、AI アプリケーションにおけるベクトルデータベースの重要性と、Kubernetes 上での堅牢なデータ保護戦略の構築方法について、具体的な例を交えながら分かりやすく解説していました。特に、Kanister のようなデータ保護ツールを活用することで、複雑なバックアップとリカバリのワークフローを簡素化し、自動化できる点が印象的でした。データベースを Kubernetes 上で運用する際には、データ保護を Day 0 Operation として捉え、Kanister のようなツールを活用することで、システムの信頼性と可用性を向上させることができます. セッションで提示された情報は、今後のデータベース運用戦略を検討する上で非常に貴重な示唆を与えてくれました。このセッションで扱われなかった点として、ベクトルデータベースの選択基準やパフォーマンスチューニング、そして異なるベクトルデータベースにおけるデータ保護戦略の差異などが挙げられます。今後のセッションでは、これらの点についても掘り下げて議論されることを期待します。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ｻｯとかざして即起動! 推しグッズを神曲再生アイテムに(*°∀°)]]></title>
            <link>https://zenn.dev/nedoko_dok0dko/articles/9db9d10902ec03</link>
            <guid>https://zenn.dev/nedoko_dok0dko/articles/9db9d10902ec03</guid>
            <pubDate>Thu, 12 Dec 2024 15:00:01 GMT</pubDate>
            <content:encoded><![CDATA[※3-shake Advent Calendar 2024の13日目のエントリー記事です。本日、12月13日は金曜日。世の中では「ジェイソンの日」なんて言われています。とはいえ、生まれてこの方ジェイソンの映画を見ることがなかったためこの手の話についてはかなり縁遠い気がしていします。(JSONの方先に連想しちゃいますし)むしろ「華金だーー＼(^o^)／」くらいしか考えていません。それしかありません。そんな社会人です。さて、今年もやってまいりましたアドベントカレンダー。2024年も引き続き参加させていただく運びとなりました。テーマは前回同様「技術・非技術関係なし!自由!」ということ...]]></content:encoded>
        </item>
    </channel>
</rss>