<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Mon, 18 Dec 2023 18:32:25 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[terraform test: 細かい挙動]]></title>
            <link>https://zenn.dev/kyohei_saito/articles/eac62818b7217d</link>
            <guid>https://zenn.dev/kyohei_saito/articles/eac62818b7217d</guid>
            <pubDate>Mon, 18 Dec 2023 14:58:00 GMT</pubDate>
            <content:encoded><![CDATA[この記事は 3-shake Advent Calendar 2023 19 日目の記事です！ この記事に書いてあることこの記事を含め 3 回に渡って terraform test の機能を紹介します。terraform test: 基本機能terraform test: 応用機能terraform test: 細かい挙動 <- 今ここ はじめに前回の記事では、 terraform test の応用的な機能の紹介をしました。この記事では、 terraform test の挙動について説明します。 terraform test: 細かい挙動 state...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[3-SHAKE SRE Tech Talk #8（k8sの話もたくさん）]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2023/12/18/234306</link>
            <guid>https://shu-kob.hateblo.jp/entry/2023/12/18/234306</guid>
            <pubDate>Mon, 18 Dec 2023 14:43:06 GMT</pubDate>
            <content:encoded><![CDATA[この記事はKubernetes Advent Calendar 202319日目の記事です。私は12月1日に株式会社スリーシェイクに入社した、小渕と申します。kubernetesは初心者ですが、Sreake事業部のSREとしてしっかりキャッチアップして頑張ってまいります。3-shake.connpass.comさて、12月18日に弊社の勉強会「3-shake SRE Tech Talk #8」が行われました。半分以上はKubernetesの話だったので、この勉強会の話題を書きたいと思います。↓開催中メモ代わりにX(旧Twitter)への自分の投稿はこちら（全部スレッドで連なっています）19時から弊社スリーシェイクの勉強会を開催します！お時間のある方は是非ご参加ください！https://t.co/wu271V6Pbw#SRETT— Shu Kobuchi(こぶシュー) (@shu_kob) 2023年12月18日   Xにて#SRETTで検索した投稿(最新)はこちら↓セッション毎に分けて、書いてます。スリーシェイク技術顧問 青山真也さん「KubeCon + CloudNativeCon NA 2023 Sessions for Site Reliability Engineers」最初はメインセッション。スリーシェイク技術顧問で、サイバーエージェントの青山真也さん「KubeCon + CloudNativeCon NA 2023 Sessions for Site Reliability Engineers」kubernetesユーザの方にはお馴染み、日本のkubernetesの第一人者の方です。↓スライドはこちら speakerdeck.com冒頭、ちらっとKubernetes完全ガイド第3版の話が進んでいるという「おお！」となるお話も！↑こちらは第2版です。k8sユーザのバイブルですよね。私も紙書籍版を持っています。楽しみですね！さて、セッションの内容としては、イベントのご紹介、参加者数の推移から、Keynoteで発表された2023年3月のDatadogの障害の話へ。全てのデータセンターで60%のnodeが1時間ダウンした大規模な障害だったそう。恐ろしいですね！！DatadogのK8sクラスタのnodeはUbuntu 22.04にVer. UP Rolloutをしていっているが、20.04と22.04の間にあった必要のないルーティングポリシーを消す変更があり、障害に繋がったとのことです。Auto Scalingが走って、救われた面もあるが、50%強のスケールアウトを一気にしようとすると課題も多々ありました。他人事ではなく、障害時に復旧するレベルでオートスケールを設計する必要がある、というのが教訓でした！二つ目のお話「OpenTelemetry」OpenTelemetryとは、Traceデータを収集するSDKで、YAMLで書くよりも、OTTLで書くと、コードの記述量が少なくて済むメリットも！PrometheusからOpenTelemetry Collectorに置き換えると、約1/5にリソース消費を抑えられるなどのメリットもあるそうです。ただし、Otelは多少バグがあるので使用上は注意とのことでした。他に、Argoの話もしてくださいました。Config Management Plugins(CMP)を使うと、HelmやKustomizeでない任意のツールでArgoCDと連携できるとのこと！青山さんのメインセッションの後は、6名の方のLT！社外の方3名、社内3名です。スリーシェイク高村さん「障害対応のススメ」 speakerdeck.com新人SREはエキスパートSREとペアで障害対応しよう！というお話。ペアで障害対応することにより、新人だけでなく、エキスパートSREも自分だけでは把握しきれない分も把握できます。「ペアプログラミング」ならぬ「ペア障害対応」いいですね！ポストモーテム作成も！私もスリーシェイクの一員として早くやってみたいですね！ペア障害で属人化解消というメリットもあります！incident-response.connpass.com「Incident Response Meetup vol.1」という良さげな勉強会もあるのとのこと！でした！mixi 清水さん「今年1年のEKS運用振り返り」 speakerdeck.commixiさんのサービス「みてね」はEKSを使用しているそうで、運用の苦労話も聞けました。OOMKilledが起こることもあり、CPU、メモリ等リソース調整しないといけないのは大変ですね。Railsアプリはメモリを食い、再起動かからないとメモリ消費が増えてくるそうです。定期的に再起動かけるようにして対応したそうです。手動運用でアップデートが放置されがちだった箇所も、自動アップデートもできるようにしたのはすごいですね。kubectlでPod作業するのを禁止したりだとか。その代わり踏み台からのアクセスできるようにしたり。k8s運用の勉強になりました。スリーシェイク bells17さん「KubernetesとCoreDNS」 speakerdeck.com自分もEKSでCoreDNSのステータス低下問題に悩まされたことがあったので、ありがたいお話でした。bells17さんお得意のK8sのコードリーディングでCoreDNSのロジックに迫っていってました。CoreDNSのデプロイからnameserverにIPアドレスを設定するまでの流れと、CoreDNSによるService/Podの名前解決を解説してもらいました。Kubernetes 側で定義されている DNS の仕様に従って、CoreDNS 側で Kubernetes 用の plugin が実装されてるとのこと。私もkubernetesの力をつけて、bells17さんの話を理解できるように頑張っていきます！ZLab yosshi_さん「Grafana Agent を用いた Continuous Profiling」qiita.comqiita.comGrafana Agentで eBPF が使われているそうです。eBPF だと kernel level で情報がとれるので、より詳細な情報を取れるのではないか、という期待があるとのことでした。Grafana Agentのgolang pullもあり、対象言語はGo言語のみで、取得対象はpprofの情報になるので、CPU以外にもメモリ等の情報も収集可能とのことでした。スリーシェイク まさすずさん「Terraform使いがPulumiに入門する」 speakerdeck.comTerraform(HCL)の記述力に限界を感じていたので、Pulumiを使い始めた。とのことでした。Pulumiとは任意のプログラミング言語でインフラ構築可能なプロビジョニングツールです。TerraformやAnsibleなどインフラのツールって柔軟性に欠けるので、任意のプログラミング言語で柔軟にインフラ構築できるのはいいですよね！Pulumi Cloudは個人で使う分には無料とのことでした！FLUX cstokuさん「へーしゃで起こったGoogle Cloud課金事故事例」Cloud Logging で Log Storage cost が爆増。ログレベル Debug でメッセージが出力されるバッチが (バグで) 何回も呼ばれるようになっていた、とのことでした。Cloud Loggingではログレベルに気をつけましょう！また、Cloud Storageにて、Archive時に大量課金事故が発生したそうです。これはArchiveで費用が嵩むのは仕方がないものの、想定できておらず、予算がつけれてなかったとのことでした。それから、BigQueryをTerraformでLogical StorageからPhysical Storageに変更しようとしたら、変更されておらず、Active Logical Strageでコスト増！原因はドキュメントに乗っていたクエリが間違っており、さらに、知らないうちに正しいものに更新されていた。という大変な思いも。ドキュメントも鵜呑みにはできないですね。課金事故勉強になりました！アンケート参加してくださった方ありがとうございました。アンケートのご記入にもご協力くださいm(._.)mdocs.google.comアドベントカレンダー次回へのバトンタッチKubernetes Advent Calendar 202312月20日はHiroshi Hayakawaさんの記事です。お楽しみに！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[terraform test: 応用機能]]></title>
            <link>https://zenn.dev/kyohei_saito/articles/52ce184522aae9</link>
            <guid>https://zenn.dev/kyohei_saito/articles/52ce184522aae9</guid>
            <pubDate>Sun, 17 Dec 2023 14:58:00 GMT</pubDate>
            <content:encoded><![CDATA[この記事は 3-shake Advent Calendar 2023 18 日目の記事です！ この記事に書いてあることこの記事を含め 3 回に渡って terraform test の機能を紹介します。terraform test: 基本機能terraform test: 応用機能 <- 今ここterraform test: 細かい挙動 はじめに前回の記事では、 terraform test の基本的な機能の紹介をしました。前回の記事の内容でも十分に terraform module のテストを書くことができると思います。しかし、今回紹介する応用的な機能を使...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Step Functionsを利用してAWSリソースの自動起動停止を行う]]></title>
            <link>https://qiita.com/ys1/items/21744f39676286b2c321</link>
            <guid>https://qiita.com/ys1/items/21744f39676286b2c321</guid>
            <pubDate>Sun, 17 Dec 2023 14:55:57 GMT</pubDate>
            <content:encoded><![CDATA[概要本記事ではStep Functionsを利用して、AWSリソースを自動で起動停止する方法について記載します。主にコスト削減のために、開発環境を夜間停止するなどで利用することを想定しています。今回は以下のようなことを実施する方法について説明しま…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Inplace pod vertical Scalingについて調べる]]></title>
            <link>https://qiita.com/ys1/items/2bd32750977960b7ef33</link>
            <guid>https://qiita.com/ys1/items/2bd32750977960b7ef33</guid>
            <pubDate>Sun, 17 Dec 2023 14:53:50 GMT</pubDate>
            <content:encoded><![CDATA[概要この記事ではKubernetes 1.27で新たに導入されたIn-place pod vertical Scalingに関して調べたことを共有しますIn-place pod vertical…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[生成AIについて学んだのでざっとアウトプット]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2023/12/17/005138</link>
            <guid>https://shu-kob.hateblo.jp/entry/2023/12/17/005138</guid>
            <pubDate>Sat, 16 Dec 2023 15:51:38 GMT</pubDate>
            <content:encoded><![CDATA[はじめに3-shake Advent Calendar 2023シリーズ1、17日目の記事です。私は12月1日に株式会社スリーシェイクに入社した、小渕と申します。前職は暗号資産交換所で、AWS上でブロックチェーンフルノードやウォレット基盤の構築・運用を行なってきました。スリーシェイクではSreake事業部のSREとして、インフラをやりつつも、生成AI等のアプリケーション構築も行なっていく予定です。よろしくお願いいたします。生成AIをこれからやっていくにあたり、インプットした情報のアウトプットをしていきます。ポエムになりますが、ご了承くださいm(._.)m生成AIを触ってみるディープラーニング（深層学習）などを用いた従来のAIは基本的にデータの「分析」に使われてきましたが、生成AI（Generative AI）は文字通り「画像」や「テキスト」、「ソースコード」を生成します。2022年春頃からは、ユーザが入力したテキストを元に絵画を描く画像生成AIのサービスが数多く誕生し、2022年11月にベータ版がリリースされたChatGPTのリリースは世界的に注目を集め、今年2023年は生成AIがIT業界で注目の的となった一年でした。ChatGPTを使ったことがない方は無料版を使えますので、ぜひ使ってみましょう。私は以下の使い方をしてみました。私「私はIT企業でクライアントワークをするエンジニアです。顧客に提案するため、生成AIを使う事業企画書を出してください。」もちろんです。生成AIを活用した事業企画書は、顧客への提案を効果的に行うための素晴らしい手段です。以下は、そのような企画書の構成例です。まず、以下の項目を含めることが重要です。導入の背景と目的なぜ生成AIを導入する必要があるのか、それによって解決できる課題や得られるメリットを明確に説明します。生成AIの概要生成AIの基本的な機能や技術について説明し、どのように機能するのかを分かりやすく示します。ビジネスへの価値生成AIがビジネスに与える具体的な価値や影響について示します。例えば、時間の節約、コスト削減、品質向上、顧客満足度の向上などです。導入計画生成AIの導入に関する計画を示します。導入の段階、時間枠、費用、人員配置などを詳細に記載します。リスクと対策導入に伴うリスクや懸念点を列挙し、それに対する対策やリスク軽減策を提示します。成功事例や導入効果他社での成功事例や導入後の具体的な効果、改善された業績などを具体的な数字や事実を交えて提示します。サポートとトレーニング導入後のサポート体制や従業員へのトレーニングプログラムについて説明します。利用者が十分なサポートを受けられるように計画を立てます。導入後の運用と評価生成AIの導入後、どのように運用し、どのような指標で評価するのかを示します。これらの要素を含んだ事業企画書は、顧客に対して生成AIの導入がなぜ重要であるのかを説得力を持って伝えることができます。また、具体的な事例や効果を提示することで、顧客の興味を引きつけ、導入に対する理解を深めることができるでしょう。これだけ見ても、既存のチャットボットよりちゃんとした返しをしているのがお分かりいただけるでしょうか？コンピュータへの指示を「プロンプト」と言いますが、このプロンプトを具体的にすればするほど、AIの返答も精密になっていきます。プロンプトを適切に設計することを「プロンプトエンジニアリング」と言います。生成AIの得意不得意テキストを生成するのは得意ですが、算数・数学の文章題は意外にも苦手です。生成AIが言葉を理解（自然言語処理）するのに、単語の意味や相関性をベクトルを用いて、膨大な蓄積データから確率的に処理しているのですが、文章題もテキスト処理してしまうと文章を確率的に処理して、残念な結果になることも。膨大なデータの蓄積はしているものの、その中にないことには答えられません。例えば、ChatGPTで会社のことを聞くと知らないとのことでした。私「株式会社スリーシェイクについて教えてください。」申し訳ありませんが、2022年の情報までしか私のデータベースにはアクセスできません。そのため、特定の企業に関する最新の情報を提供することはできません。株式会社スリーシェイクについての情報は、公式ウェブサイトやニュース記事、ビジネスディレクトリ、または企業情報を提供するデータベースなどを確認することで最新の情報を入手できるかもしれません。お探しの情報が特定の業界やサービスに関連している場合は、その背景や提供しているサービスについて私がお手伝いできるかもしれません。どのような情報をお探しですか？生成AIをどうビジネスに活用するかまずはChatGPTに聞いてみました。私「生成AIを用いたビジネスアイデアを教えてください」生成AIを活用したビジネスアイデアはさまざまですが、いくつか例を挙げてみましょう。カスタマイズされたコンテンツの提供生成AIを使用して、個々のユーザーに合わせたカスタマイズされたコンテンツを提供するプラットフォームを開発する。例えば、ニュース記事、ブログ投稿、商品レコメンデーションなど。クリエイティブなコンテンツ生成ツール生成AIを活用したクリエイティブツールの開発。例えば、自動生成されたイメージ、デザイン、音楽、または詩の生成ツール。仮想アシスタントやカスタマーサポート会話型AIを活用した仮想アシスタントやカスタマーサポートの提供。顧客とのインタラクションを自動化し、サポート体制を向上させる。製品開発やデザインの支援生成AIを使って、新しい製品のアイデアやデザインの提案を行うツールやプラットフォームを提供。アイデアのブレストや設計プロセスを支援する。自動化されたレポートや分析生成AIを利用して、データ分析やレポート作成を自動化するツール。ビジネスのデータを解釈し、洞察を提供する。これらのアイデアは、生成AIの力を活用して新しいビジネスモデルやサービスを展開する可能性を示しています。AI技術を利用することで、効率性の向上や顧客体験の向上など様々なメリットを生み出すことができます。このように出てきました。ChatGPTだけを使うのであれば、個人が補助的に使用し、生産性を高めていくことはできますが、社内で生成AIを用いたアプリケーションを導入するとなると、業務分析をし、業界や各社の業務に合わせたプロダクトが必要になってくるかと思いました。参考資料生成AIのまとまった知識を頭に入れておこうと思い、ビジネス書を一読しました。小林雅一 著「生成ＡＩ――「ChatGPT」を支える技術はどのようにビジネスを変え、人間の創造性を揺るがすのか？」ダイヤモンド社生成AIに関するビジネス書は数多く出ていて、他のは読んでませんが、読むとしたらご自分にあったのを読むといいと思います。生成AIについて知った後、じゃあビジネスに導入するのはどうすればいいのか？と悩むことになると思いますが、このブログ書いている最中にググったら、以下の書籍が良さげです。（早速Kindle版をポチりました）小澤健祐(おざけん)著「生成AI導入の教科書」ワン・パブリッシング3-shake Advent Calendar 2023シリーズ1、3日目には橋本さんがAI何も知らないSREがGenerative AIで何ができるか考えた in 2023を書いています。こちらもぜひお読みください。スリーシェイクの生成AIの取り組みスリーシェイクでは、Google Cloud向けの生成AIスターターパックというパッケージングサービスを提供しています。sreake.comまた、生成AIを用いたアプリケーション開発、インフラ基盤構築も行います。以下からお問い合わせください。sreake.comアドベントカレンダー翌日の予告12月18日の3-shake Advent Calendar 2023は以下の通りです！シリーズ1は、林愛子さん「5,000円以下で選ぶ！今年のトレンド「ノームコア」をおさえたメンズコーデ3選。」シリーズ2は、@kiyos_1207 さん「terraform test: 応用機能」明日もお楽しみに！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[terraform test: 基本機能]]></title>
            <link>https://zenn.dev/kyohei_saito/articles/a32b5a11c81e97</link>
            <guid>https://zenn.dev/kyohei_saito/articles/a32b5a11c81e97</guid>
            <pubDate>Sat, 16 Dec 2023 14:58:00 GMT</pubDate>
            <content:encoded><![CDATA[この記事は 3-shake Advent Calendar 2023 17 日目の記事です！ この記事に書いてあることこの記事を含め 3 回に渡って terraform test の機能を紹介します。terraform test: 基本機能 <- 今ここterraform test: 応用機能terraform test: 細かい挙動 terraform test とはなにか 概要terraform test は Terraform module を実際に plan / apply して動作を確認するツールです。ドキュメントにも明記されている通り、主な使...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[sbt-github-acitons を使った CI の構築とプロジェクトの publish について]]></title>
            <link>https://zenn.dev/nomadblacky/articles/4c6a03aa5289c4</link>
            <guid>https://zenn.dev/nomadblacky/articles/4c6a03aa5289c4</guid>
            <pubDate>Fri, 15 Dec 2023 03:00:00 GMT</pubDate>
            <content:encoded><![CDATA[この記事は Scala Advent Calendar 2023 15日目 の記事です。 導入Scala プロジェクトを GitHub で開発する際には GitHub Actions を使用して CI を構築することが多いと思います。また、ライブラリの開発の場合は Maven Central に publish することも考えたいです。しかし、プロジェクトそれぞれに対応した GitHub Actions を構築するのは専門知識も必要で手間のかかる作業です。今回は sbt-github-actions という sbt プラグインを使用して、Scala プロジェクトの CI と ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[VPC エンドポイントポリシーで S3 バケットを制限する際の落とし穴]]></title>
            <link>https://zenn.dev/toshikish/articles/e846fa0c3de10f</link>
            <guid>https://zenn.dev/toshikish/articles/e846fa0c3de10f</guid>
            <pubDate>Thu, 14 Dec 2023 22:00:00 GMT</pubDate>
            <content:encoded><![CDATA[状況設定AWS の VPC エンドポイントポリシーで VPC 内部から　Amazon S3 バケットへのアクセスを制限するために，以下のようなエンドポイントポリシーを設定するとします。s3-vpc-endpoint-policy.json{    "Version": "2012-10-17",    "Statement": [        {            "Effect": "Allow",            "Principal": "*",            "Action": "s3:*",            "Resource...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[拝啓、CSSでドット絵を描きたくなったあの日(数週間前)の自分へ]]></title>
            <link>https://zenn.dev/nedoko_dok0dko/articles/c00b941f10501f</link>
            <guid>https://zenn.dev/nedoko_dok0dko/articles/c00b941f10501f</guid>
            <pubDate>Thu, 14 Dec 2023 15:31:58 GMT</pubDate>
            <content:encoded><![CDATA[※ 3-shake Advent Calendar 2023の15日目のエントリー記事です。今年は数年離れていたデータエンジニアを再スタートし、データ基盤構築やGoogleCloudのProfessional試験を受けて合格したり…とテッキーな事に触れることが多い年でした。最近はDBやSRE領域に触れる機会もあり、自分の知識不足に凹みながらも「今は学ぶ時期だ」と1つずつ知識を拾い集めています。そんな盛りだくさんだった2023年も大詰め、アドベントカレンダーを書く機会をいただきました。語ることは勿論データエンジニア……ではなくCSSについての記事です!テーマは「自由」だと偉い人が...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Karpenter を Amazon EKS で使う]]></title>
            <link>https://sreake.com/blog/karpenter-with-amazon-eks/</link>
            <guid>https://sreake.com/blog/karpenter-with-amazon-eks/</guid>
            <pubDate>Thu, 14 Dec 2023 05:17:05 GMT</pubDate>
            <content:encoded><![CDATA[はじめに Kubernetes のノードのオートスケーラーである Karpenter は，Amazon EKS クラスタでの利用を中心に普及しつつあります。 Karpenter を調べてみた・使ってみた系記事はたくさんあ […]The post Karpenter を Amazon EKS で使う first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud Partner Top Engineer 2024 になりました]]></title>
            <link>https://sreake.com/blog/earn-google-cloud-partner-top-engineer-2024/</link>
            <guid>https://sreake.com/blog/earn-google-cloud-partner-top-engineer-2024/</guid>
            <pubDate>Thu, 14 Dec 2023 05:15:38 GMT</pubDate>
            <content:encoded><![CDATA[はじめに 今回、ありがたいことに、 Google Cloud Partner Top Engineer 2024(以降PTE)になりましたのでその軌跡をまとめます。 コチラの資料によって PTE になりたい人が増えてくれ […]The post Google Cloud Partner Top Engineer 2024 になりました first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Fault Injection Service で EKS の障害テストを行う]]></title>
            <link>https://zenn.dev/kyohei_saito/articles/6d1bcc1fe8610e</link>
            <guid>https://zenn.dev/kyohei_saito/articles/6d1bcc1fe8610e</guid>
            <pubDate>Wed, 13 Dec 2023 22:22:00 GMT</pubDate>
            <content:encoded><![CDATA[この記事は 3-shake Advent Calendar 2023 14 日目の記事です！ この記事に書いてあることこの記事では、AWS Fault Injection Service をつかって、EKS 上の Pod の障害テストを行う方法を説明します。この記事を書こうと思ったモチベーションとして、EKS 上のアプリケーションで障害テストをするために AWS Fault Injection Service (以降、「FIS」と記載します) を使用しようとしたところ、導入手順がいまいち分からなかったため、残しておこうと思ったためです。EC2 に障害を注入する場合は導入手順はシ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Kubernetes 1.27] Pod 停止時のフェーズ遷移の変更]]></title>
            <link>https://zenn.dev/toversus/articles/88ce2ea66b532d</link>
            <guid>https://zenn.dev/toversus/articles/88ce2ea66b532d</guid>
            <pubDate>Wed, 13 Dec 2023 00:43:43 GMT</pubDate>
            <content:encoded><![CDATA[Kubernetes 1.27 で KEP-3329: Retriable and non-retriable Pod failures for Jobs の一部として実装された [k/k#115331]: Give terminal phase correctly to all pods that will not be restarted により、Pod 停止時のフェーズが Running から Succeeded か Failed に遷移するようになりました。しかし、この変更が以下の予期せぬ問題を引き起こすことになります。[k/k#117018]: daemonset stuc...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitHub Actions で multi-platform container image を build して ECR に push する]]></title>
            <link>https://qiita.com/yteraoka/items/e1f89d28da4ba5078660</link>
            <guid>https://qiita.com/yteraoka/items/e1f89d28da4ba5078660</guid>
            <pubDate>Tue, 12 Dec 2023 22:01:45 GMT</pubDate>
            <content:encoded><![CDATA[AWS の EKS や ECS では x86_64 も Graviton の arm64 も選択可能です、どちらでも使うかもしれない Container image は multi-platform…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Helmfile でちょっとしたリソースを追加したい]]></title>
            <link>https://zenn.dev/toshikish/articles/5ead548816e618</link>
            <guid>https://zenn.dev/toshikish/articles/5ead548816e618</guid>
            <pubDate>Mon, 11 Dec 2023 10:57:21 GMT</pubDate>
            <content:encoded><![CDATA[動機Helmfile で公式のチャートをインストールしていて，追加で関連リソースを追加したいことがあります。関連リソースの数が多い，内容が環境によって変わるなどの場合は，カスタムチャートを追加することになるでしょう。ただ，そこまで複雑ではない，関連リソースが数個レベルの場合，カスタムチャートだと大げさに感じることがあります。そこでどうすべきか迷っていたところ，同僚の toVersus さんに別の方法を教えていただきました。 extraTemplates 系の変数を使うHelm チャートによっては extraTemplates や extraObjects といった変数が...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Amazon S3 バケットの terraform destroy に注意]]></title>
            <link>https://zenn.dev/toshikish/articles/190fe076cc63f4</link>
            <guid>https://zenn.dev/toshikish/articles/190fe076cc63f4</guid>
            <pubDate>Mon, 11 Dec 2023 09:03:06 GMT</pubDate>
            <content:encoded><![CDATA[TL;DRAmazon S3 バケットを削除する前には，必ずすべてのオブジェクトを削除しよう。aws_s3_bucket リソースの force_destroy 引数 を true にしてもよい。terraform destroy で削除すると，パブリックアクセスできる旨のアラートが出る場合があるので注意しよう。aws_s3_bucket_public_access_block リソースを terraform state rm するとアラートが出ない。マネジメントコンソールから削除してもアラートは出ない。 S3 バケットの terraform dest...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[sqldefとpgrollを利用したPostgreSQLでのスキーマブルーグリーンデプロイメント]]></title>
            <link>https://zenn.dev/nnaka2992/articles/blue_grean_on_postgres_with_sqldeff_and_pgroll</link>
            <guid>https://zenn.dev/nnaka2992/articles/blue_grean_on_postgres_with_sqldeff_and_pgroll</guid>
            <pubDate>Sun, 10 Dec 2023 23:30:00 GMT</pubDate>
            <content:encoded><![CDATA[この記事はこのエントリー以下のアドベントカレンダーの11日目の記事です。3-shake Advent Calendar 2023昨日はtoyb0xによるTODOコメントをチケット管理するためのESLint Custom Ruleでした。PostgreSQL Advent Calendar 2023昨日は@ozozatyによるPostgreSQLのjsonb型でJSONパス式(JSONPath)を使うでした。 はじめにPostgreSQLではDDLはその性質からテーブルレベルでロックを取得してしまいます。SREやPlatform EngineeringなどDev...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[IT勉強会に飯モクおじさん現る]]></title>
            <link>https://shu-kob.hateblo.jp/entry/2023/12/10/222430</link>
            <guid>https://shu-kob.hateblo.jp/entry/2023/12/10/222430</guid>
            <pubDate>Sun, 10 Dec 2023 13:24:30 GMT</pubDate>
            <content:encoded><![CDATA[cryptocurrency.connpass.com12月9日にビットコインとか忘年会を行いました。参加してくださった皆様ありがとうございました。私は12月に本業がブロックチェーンではなくなったものの、勉強会の運営は引き続きやらせてもらってます。今回の勉強会で楽しい面もありましたが、腹立たしいこともありました。飯モクおじさんが紛れ込んでいたのです。懇親会付きで参加費無料にしていたので、紛れることはしょうがなかったのですが、まさか少人数の勉強会にも紛れ込むとは。LT会をやった後にピザパだったのですが、思い返せば、LT中、飯モクおじさんはスマホをずっといじってましたね。発表内容に興味ないのでしょうね。懇親会開始後、ひたすらピザを食べていて、私は性善説的に、初めてだから話す相手いなくて、食い続けているだけかと思い、話しかけました。私「普段、ブロックチェーンに関する何かやられているんですか？」飯モクおじさん「コンピュータ作っています」と噛み合わない謎返答。私は運営ということもあり、他の方との会話もあって、飯モクおじさんだけに注力できませんでしたが、いつの間にか帰ってました。気付かれずに帰るのは忍者並（苦笑）懇親会中は、飯モクおじさんだけに意識を集中できませんでしたが、時が経つにつれ、腹が立ってきました。blog.shoko.devSHOKO SATOさんの「めし目的人間撲滅委員会の活動報告」というタイトルのブログ記事がバズったばかり。IT勉強会運営の方々は、飯モクおじさんは他人事ではなく、身近にいるものだと思って対策した方がいいかも、特にコロナ明けで、懇親会付きオフライン勉強会が増えたでしょうし。うちの勉強会の運営内で、「交通費使ってまで来てコスパ悪くね？」と話をしていたら、「チャリで来るんじゃないの？都心であればいけるっしょ。」とのこと。チャリで来ているかは分かりませんが、なるほどね（苦笑）タイパ（タイムパフォーマンス）も悪い気がするけど、飯モクおじさんにとっては、こういうことが趣味なのかとも思ったり。うちの勉強会は普段オンラインで、ときどきオフラインイベントをやっています。オフラインだとやっぱり懇親会もつけたい、と思いますが、これからは、飯モク対策しつつ、健全な会にしていきたいと思います。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GolangでSQSのメッセージを取得する]]></title>
            <link>https://zenn.dev/tayusa/articles/ef4c30c0449a6e</link>
            <guid>https://zenn.dev/tayusa/articles/ef4c30c0449a6e</guid>
            <pubDate>Sun, 10 Dec 2023 00:00:01 GMT</pubDate>
            <content:encoded><![CDATA[キューの取得特に考えることはなくconfig.LoadDefaultConfig()とsqs.NewFromConfig()で取得できるpackage mainimport (	"context"	"github.com/aws/aws-sdk-go-v2/config"	"github.com/aws/aws-sdk-go-v2/service/sqs"	"log")func main() {	ctx := context.Background()	cfg, err := config.LoadDefaultConfig(ctx)	if err !...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitLab CIでKICSを実行する]]></title>
            <link>https://zenn.dev/tayusa/articles/d28865c5ce49c6</link>
            <guid>https://zenn.dev/tayusa/articles/d28865c5ce49c6</guid>
            <pubDate>Sun, 10 Dec 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[やることTerraformの静的解析を行うKICSの結果をgitlab-commentでMRに出力するhttps://github.com/yuyaban/gitlab-commentKICSの結果を基にMRにReviewdogで指摘するhttps://github.com/reviewdog/reviewdog KICSの実行$ kics scan --config kics.yamlkics.yamlpath: "." # クエリのパスoutput-path: "." # 結果のパスreport-formats: json # 結果を...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Golangでk8s Deploymentを再起動させる]]></title>
            <link>https://zenn.dev/tayusa/articles/a7df40b7d6fd5b</link>
            <guid>https://zenn.dev/tayusa/articles/a7df40b7d6fd5b</guid>
            <pubDate>Sun, 10 Dec 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[やることclient-goを使って複数のDeploymentを同時に再起動させる Golang Deploymentの取得Pod内であればrest.InClusterConfig()でPodのServiceAccountを使用するconfigを取得できるclientset.AppsV1().Deployments(namespace).Get(ctx, deploymentName, metav1.GetOptions{}) でDeploymentを取得NamespaceとDeploymentの名前が必要k8s.gopackage maini...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TypeScript で LangChain の最初の一歩]]></title>
            <link>https://zenn.dev/satohjohn/articles/9415f85be332e6</link>
            <guid>https://zenn.dev/satohjohn/articles/9415f85be332e6</guid>
            <pubDate>Sat, 09 Dec 2023 15:00:00 GMT</pubDate>
            <content:encoded><![CDATA[このエントリーは 3-shake Advent Calendar 2023 の10日目の記事です。今年は Python をガッツリ触ったり、 LLM などの方面に手を出してきており、新しいことにまみれております。その中で LLM のシステム作るんだったら Python だろ？っていう中で TypeScript でもちゃんとできるよーっていうことで紹介していきたいと思います。 私が、あんまり Python でアプリ作っていくのが好きじゃないのもありますもちろん、 Python よりも TypeScript のほうが機能が少なめではありますので、そのあたりは、目をつぶっております。今...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Terraformのsopsプロバイダーを使用するだけで機密情報は守られるのか]]></title>
            <link>https://blog.masasuzu.net/entry/2023/12/09/014230</link>
            <guid>https://blog.masasuzu.net/entry/2023/12/09/014230</guid>
            <pubDate>Fri, 08 Dec 2023 16:42:30 GMT</pubDate>
            <content:encoded><![CDATA[qiita.comこの記事は、3-shake Advent Calendar 2023の9日目の記事となります。sops プロバイダーとはcarlpett/terraform-provider-sops: A Terraform provider for reading Mozilla sops filesDocs overview | carlpett/sops | Terraform | Terraform RegistrysopsプロバイダーはMozilla sopsを使用して暗号化されたファイルから機密情報を取り出して、terraform上で使用できるようにしたものです。暗号化の鍵をAWS KMS等を使うことにより、KMSキーを使う権限を持つ人だけ機密情報にアクセスできるようにするものです。sopsで機密情報を暗号化することにより、平文で機密情報をgitレポジトリに保存することがなくなり安全ということになります。機密情報を管理したい。でも平文では保存したくない。そういう用途にこちらは使用されます。本当に安心?SOPSを使って機密情報を暗号化することによりgitレポジトリには機密情報が平文で残らない。これで安心と言われていますが、よく考えると機密情報をterraform実行時にはリソースに対して平文で与えているはずです。つまり、tfstate上は機密情報が平文で保存されています。例えば、tfstateがS3に保存されているとして、KMSキーへの権限がない人でもS3バケットにアクセスする権限があれば、平文の機密情報が見れてしまいます。あまりないと思いますが、tfstateをlocalに保存するようにしていてそれをgit管理していてらなんのために暗号化しているのか。。。。ということになります。こう考えると組織のポリシーによるが、sopsプロバイダーによる暗号化では不十分ではないかという疑問が生まれます。ドキュメントを調べるまずプロバイダードキュメントを当たってみます。Docs overview | carlpett/sops | Terraform | Terraform RegistryTo prevent plaintext secrets from being written to disk, you must use a secure remote state backend. See the official docs on Sensitive Data in State for more information.これが意味してるのはバックエンドをlocalにした場合平文で機密情報が書かれるので、安全なリモートバックエンドを利用すべきということだと思います。State: Sensitive Data | Terraform | HashiCorp Developer参照しろと言われたドキュメントの該当部分を読んでみましょう。ローカルディスクにtfstateを保存した場合は、機密情報が平文で保存されます。リモートにtfstateを保存する場合、保存時に暗号化されるかはバックエンドに依存します。基本的にリモートステートを使うことを推奨しています。例えば、Terraform Cloudを使う場合、tfstateは暗号化され、転送時もTLSで暗号化されます。S3を使う場合もSSE-S3やSSE-KMS等でサーバサイド暗号化を有効にしておくことで、保管時の暗号化がされます。バケットポリシーでHTTPSを強制することで通信時の暗号化も保証することができます。参考: 暗号化によるデータの保護 - Amazon Simple Storage Service参考: Amazon S3 のセキュリティのベストプラクティス - Amazon Simple Storage Serviceところがですね。保存時、通信時の暗号化をしても、terraform state pullすると平文でtfstateが手に入ってしまうんですよ。。。後述します。挙動を実験する以下のような設定ファイルを作ります。sopsで暗号化したdb_userとdb_passwordをパラメータストアに設定するものになります。tools-versionsterraform 1.5.5sops 3.7.3main.tfterraform {  required_version = "~> 1.5.5"  required_providers {    aws = {      source  = "hashicorp/aws"      version = "~> 5.15"    }    sops = {      source  = "carlpett/sops"      version = "~> 0.7.2"    }  }  backend "s3" {    region  = "ap-northeast-1"    bucket  = "xxxxxxxxxx"    key     = "test.tfstate"  }}provider "sops" {}provider "aws" {  region = "ap-northeast-1"}data "sops_file" "secrets" {  source_file = "secrets.yaml"}resource "aws_ssm_parameter" "db_user" {  type     = "String"  name     = "/test/db_user"  value    = data.sops_file.secrets.data.db_user}resource "aws_ssm_parameter" "db_password" {  type     = "SecureString"  name     = "/test/db_password"  value    = data.sops_file.secrets.data.db_password}暗号化前の secrets.yamldb_user: userdb_password: passwordapply結果がこちらとなります。terraform apply% export SOPS_KMS_ARN=arn:aws:kms:ap-northeast-1:xxxxxxxxx:key/yyyyyyyyyyyyyyyyyy% terraform applydata.sops_file.secrets: Reading...data.sops_file.secrets: Read complete after 1s [id=-]Terraform used the selected providers to generate the following execution plan. Resource actions areindicated with the following symbols:  + createTerraform will perform the following actions:  # aws_ssm_parameter.db_password will be created  + resource "aws_ssm_parameter" "db_password" {      + arn            = (known after apply)      + data_type      = (known after apply)      + id             = (known after apply)      + insecure_value = (known after apply)      + key_id         = (known after apply)      + name           = "/test/db_password"      + tags_all       = (known after apply)      + tier           = (known after apply)      + type           = "SecureString"      + value          = (sensitive value)      + version        = (known after apply)    }  # aws_ssm_parameter.db_user will be created  + resource "aws_ssm_parameter" "db_user" {      + arn            = (known after apply)      + data_type      = (known after apply)      + id             = (known after apply)      + insecure_value = (known after apply)      + key_id         = (known after apply)      + name           = "/test/db_user"      + tags_all       = (known after apply)      + tier           = (known after apply)      + type           = "String"      + value          = (sensitive value)      + version        = (known after apply)    }Plan: 2 to add, 0 to change, 0 to destroy.Do you want to perform these actions?  Terraform will perform the actions described above.  Only 'yes' will be accepted to approve.  Enter a value: yesaws_ssm_parameter.db_password: Creating...aws_ssm_parameter.db_user: Creating...aws_ssm_parameter.db_user: Creation complete after 0s [id=/test/db_user]aws_ssm_parameter.db_password: Creation complete after 0s [id=/test/db_password]Apply complete! Resources: 2 added, 0 changed, 0 destroyed.terraform apply  8.91s user 0.78s system 124% cpu 7.811 totalstate showするとパラメータストアなのでsensitive扱いになっていて、見れません。これはいけるか?terraform state show% terraform state show aws_ssm_parameter.db_password# aws_ssm_parameter.db_password:resource "aws_ssm_parameter" "db_password" {    arn       = "arn:aws:ssm:ap-northeast-1:xxxxxxxxx:parameter/test/db_password"    data_type = "text"    id        = "/test/db_password"    key_id    = "alias/aws/ssm"    name      = "/test/db_password"    tags_all  = {}    tier      = "Standard"    type      = "SecureString"    value     = (sensitive value)    version   = 1}% terraform state show aws_ssm_parameter.db_user    # aws_ssm_parameter.db_user:resource "aws_ssm_parameter" "db_user" {    arn       = "arn:aws:ssm:ap-northeast-1:xxxxxxxxx:parameter/test/db_user"    data_type = "text"    id        = "/test/db_user"    name      = "/test/db_user"    tags_all  = {}    tier      = "Standard"    type      = "String"    value     = (sensitive value)    version   = 1}ここで、terraform state pullをしてみて、tfstateファイルをローカルにダウンロードします。そのtfstateファイルの中の該当部分はこちらとなります。    {      "mode": "managed",      "type": "aws_ssm_parameter",      "name": "db_password",      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",      "instances": [        {          "schema_version": 0,          "attributes": {            "allowed_pattern": "",            "arn": "arn:aws:ssm:ap-northeast-1:xxxxxxxxx:parameter/test/db_password",            "data_type": "text",            "description": "",            "id": "/test/db_password",            "insecure_value": null,            "key_id": "alias/aws/ssm",            "name": "/test/db_password",            "overwrite": null,            "tags": null,            "tags_all": {},            "tier": "Standard",            "type": "SecureString",            "value": "password",            "version": 1          },          "sensitive_attributes": [            [              {                "type": "get_attr",                "value": "value"              }            ]          ],          "private": "bnVsbA==",          "dependencies": [            "data.sops_file.secrets"          ]        }      ]    },tfstateファイルの中身をよく確認するとしっかり平文で見えています。残念。"value": "password",結論sopsプロバイダーを使用することによりgitレポジトリ上に機密情報を平文で保存することはなくなります。しかしながら、tfstateのデータ上では設定値が平文で保存されることを防ぐことはできません。terraform state pullする権限があれば、機密情報が見れてしまいます。運用組織のポリシーで、tfstateへのアクセス権限を適切に権限管理することができるのであれば、選択肢としては取りうります。暗号化のためのKMSキー、tfstateを保存するS3バケットを機密情報をアクセス可能な人のみ権限を与えることが徹底できればよいです。しかしながら、機密情報をいかなる場合でもローカルに平文で保存することが許容されない組織であれば、機密情報は手動で設定することを選択したほうが望ましいと思います。どうしても機密情報をterraformで管理したのであれば、クライアントサイドで暗号化した機密情報をterraformで管理し、アプリ等で使用時にクライアントサイドで復号を行う形も考えられます。安全かどうかは、tfstateの保存場所、tfstateへのアクセス権限、暗号化鍵のアクセス権限それぞれが適切に設定されているかどうかが鍵となります。他に何かうまい方法で機密情報を管理しているという方がいらっしゃれば、ご意見ください。ワークアラウンドこれは自分がよく使う手段となります。リソースの箱だけ作って、作成時にダミーの値を入れておき、実際の値は手動で設定するという手法です。ignore_changesを入れておくことで、手動で値を変更しても、terraform的には差分ができないようにしています。これにより、機密情報をterraformの外に追い出しつつも、機密情報を入れるリソース自体は監理するということが実現できます。resource "aws_ssm_parameter" "db_password" {  type     = "SecureString"  name     = "/test/db_password"  value    =  "Dummy"  lifecycle {    ignore_changes = [value]  }}]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[はんだ付けから始めるEmbedded Rust on Espressif(3)]]></title>
            <link>https://zenn.dev/satoken/articles/rust-on-esp3</link>
            <guid>https://zenn.dev/satoken/articles/rust-on-esp3</guid>
            <pubDate>Thu, 07 Dec 2023 16:40:18 GMT</pubDate>
            <content:encoded><![CDATA[prometheusで値を取得する前回まででESP32をWifiに接続してDHT11から温湿度を返す簡単なAPIサーバが作成できました。JSONを返すのを変更してprometheusでmetricsを取得できるように変更してみます。HTTPのハンドラ部分のURLを/からmetricsにしてpromethuesの書式を返すように変更しました。    let mut server = EspHttpServer::new(&Configuration::default())?;    server.fn_handler("/metrics", Method::Get, ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[はんだ付けから始めるEmbedded Rust on Espressif(2)]]></title>
            <link>https://zenn.dev/satoken/articles/rust-on-esp2</link>
            <guid>https://zenn.dev/satoken/articles/rust-on-esp2</guid>
            <pubDate>Wed, 06 Dec 2023 15:45:17 GMT</pubDate>
            <content:encoded><![CDATA[温湿度の取得前回まではLEDを光らせてきました。光り物はもう十分なので他のことをやります。これは温湿度が取得できるDHT11センサーです。これを利用して温湿度を取得してみます。https://akizukidenshi.com/catalog/g/gM-07003/以下のように回路を組みます。ちょうど同じことをやっている方がいるので新しくプロジェクトを作成してそのままコードをコピペします。https://www.youtube.com/watch?v=5qYswqbZUDshttps://github.com/shanemmattner/ESP32-C3_Rus...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AlloyDB omni on Kubernetesを眺める]]></title>
            <link>https://zenn.dev/nnaka2992/articles/viewing_alloydb_omni_operator</link>
            <guid>https://zenn.dev/nnaka2992/articles/viewing_alloydb_omni_operator</guid>
            <pubDate>Tue, 05 Dec 2023 23:30:00 GMT</pubDate>
            <content:encoded><![CDATA[このエントリーは以下のアドベントカレンダーの6日目の記事です。3-shake Advent Calendar 2023 シリーズ1昨日は@bells17さんによるChainguard imagesについて調べてみたでした。PostgreSQL Advent Calendar 2023 シリーズ2Kubernetes Advent Calendar 2023昨日は@yassan168さんによるRKE2ノードのCiliumを使ったeBPFな帯域制限をする話でした。 背景を眺める2023年10月12日にAlloyDB OmniのGAに併せてAlloyDB Omni o...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[はんだ付けから始めるEmbedded Rust on Espressif]]></title>
            <link>https://zenn.dev/satoken/articles/rust-on-esp1</link>
            <guid>https://zenn.dev/satoken/articles/rust-on-esp1</guid>
            <pubDate>Tue, 05 Dec 2023 16:22:25 GMT</pubDate>
            <content:encoded><![CDATA[はじめに突然ですがここに秋月電子で購入したESP32-C3があります。1個310円と他のESP32と比べても安価でCPUにRISC-Vを使ったチップです。https://akizukidenshi.com/catalog/g/gM-17493/以下のドキュメントはESP32シリーズを製造しているEspressifによるRustのハンズオンドキュメントです。今回これを読みながらESP32-C3でRustを動かして遊んでみます。Embedded Rust on EspressifThe Rust on ESP BookESP32単体ではPCと接続してプログラムを書き込め...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Chainguard imagesについて調べてみた]]></title>
            <link>https://zenn.dev/bells17/articles/chainguard-images</link>
            <guid>https://zenn.dev/bells17/articles/chainguard-images</guid>
            <pubDate>Tue, 05 Dec 2023 03:58:09 GMT</pubDate>
            <content:encoded><![CDATA[※この記事は3-shake Advent Calendar 2023 シリーズ1の12月5日の記事です最近Chainguard imagesというdistrolessコンテナイメージについて知ったので、簡単に調べてみました。 Chainguard imagesとは？Chainguard imagesはChainguard社によって提供されているdistrolessを中心としたセキュアなコンテナイメージ群だ、という理解です。Wolfiという(おそらくこれもChainguard社が開発している)コンテナ・クラウドネイティブ用途向けのLinux undistroなOSを利用して各C...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ECSの可用性設計を4つの軸で整理する]]></title>
            <link>https://sreake.com/blog/ecs-availability-4-factors/</link>
            <guid>https://sreake.com/blog/ecs-availability-4-factors/</guid>
            <pubDate>Tue, 05 Dec 2023 02:48:59 GMT</pubDate>
            <content:encoded><![CDATA[はじめに こんにちは！Sreake事業部 志羅山です。今年3月に3-shakeに入社し、長野県からリモートで仕事をしています（東京にも定期的に行ってます）。 最近、とあるお客様環境におけるECS（AWSのフルマネージド型 […]The post ECSの可用性設計を4つの軸で整理する first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cloud Loggingについて]]></title>
            <link>https://zenn.dev/nedoko_dok0dko/articles/ef07acbb983d01</link>
            <guid>https://zenn.dev/nedoko_dok0dko/articles/ef07acbb983d01</guid>
            <pubDate>Mon, 04 Dec 2023 11:05:41 GMT</pubDate>
            <content:encoded><![CDATA[whatGoogle CloudのCloud Loggingについて基本概要など調べたことをまとめる適宜追記予定 Cloud Loggingとはhttps://cloud.google.com/logging/docs/overview?hl=jaGoogleCloud上のシステム等が生成したログを収集・保管・管理するための仕組み。基本的にGoogleCloud上のサービスが出力するログはCloud Loggingへと集められる。収集されたログはログバケットと呼ばれるストレージで保管され、期間が過ぎたら破棄するといった設定を行うことが可能。ログはコンソールのログ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[吉祥寺.pm35 でLTしてきました。 #kichijojipm]]></title>
            <link>https://blog.masasuzu.net/entry/2023/12/03/161754</link>
            <guid>https://blog.masasuzu.net/entry/2023/12/03/161754</guid>
            <pubDate>Sun, 03 Dec 2023 07:17:54 GMT</pubDate>
            <content:encoded><![CDATA[吉祥寺.pm こと 句会吉祥寺.pm35 に参加して、LTしてきました。kichijojipm.connpass.com資料はこちら。言いたいこととしてはベストプラクティスなんてないよ。一般的によりよいプラクティスやパターンはあるけど、どんなときには適用できる銀の弾丸的なものはないから、自身の組織とサービスに合わせてくみ上げていきましょうということ。正解はひとつ!じゃない!!その上で、ざっくりとどんな選択肢と選択するための観点を述べていきました。まだ全然ブラッシュアップできるのでどこかでまとめてブログに書きたいところです。ちなみに最後に出てくる あなたらしく○○ は同僚のスライドのパロディです。毎回時間オーバーするのでトークで申し込んだ方が良いのでは?というツッコミはごもっともです。懇親会でもTerraformのお悩みとか短いですが話せて楽しかったです。また参加したいですね。]]></content:encoded>
        </item>
    </channel>
</rss>