<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Sat, 15 Feb 2025 22:33:19 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[runwasi の cgroup に関する Issue 調査]]></title>
            <link>https://zenn.dev/z63d/articles/48eb53ca4e8467</link>
            <guid>https://zenn.dev/z63d/articles/48eb53ca4e8467</guid>
            <pubDate>Fri, 14 Feb 2025 13:44:01 GMT</pubDate>
            <content:encoded><![CDATA[概要runwasi で cgroup に関する Issue があり、それについての調査の記録です。忘れないように。OCI Runtime ~ コンテナプロセス周りのデバッグのコツを少しつかめた。cgroup に関しても学ぶことが多かった。 runwasirunwasi は Kubernetes で Ｗasm を動かすための shim をつくるライブラリ & いくつかの Wasm runtime 用の shim です。runwasi については以前 Kubernetes Meetup Tokyo #68 KubeCon NA 2024 Recap で話した時の資料と...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[nwiizo はなぜ同じPlatform Engineeringを語るのに、2つの異なる資料を作ったのか #devsumi #PFEM]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127</guid>
            <pubDate>Thu, 13 Feb 2025 22:11:27 GMT</pubDate>
            <content:encoded><![CDATA[はじめにこんにちは、nwiizoです。2025年2月13日に2つのイベントで登壇する機会をいただきました。これは私が翻訳に関わった「Kubernetesで実践するPlatform Engineering」の発売を記念した販促登壇でしたが、原著者さんが書籍の内容自体について話をされると知っていたので、私はPlatform Engineeringという分野に関する自分なりの考えや経験を共有させていただく内容にしました。Kubernetesで実践する Platform Engineering作者:Mauricio Salatino翔泳社Amazon2つの異なるイベントでの発表同日に性質の異なる2つのイベントで話をさせていただきました。Developers Summitでは「インフラをつくるとはどういうことなのか、あるいはPlatform Engineeringについて」というタイトルで、幅広い技術者の方々に向けてPlatform Engineeringの基本的な考え方から実践的なアプローチまでをお話ししました。 speakerdeck.com一方、PFEM特別回では「Platform Engineeringは自由のめまい - 技術の選択における不確実性と向き合う」というテーマで、より専門的な視点からPlatform Engineeringの課題や可能性について話をしました。ただ、この回は資料作りや登壇などの疲れもピークに達していて、本来伝えたかったことと違う説明をしてしまった部分もあったように思います。 speakerdeck.com翻訳作業から得た気づき今回の発表の背景には、「Kubernetesで実践するPlatform Engineering」の翻訳作業があります。2025年2月19日に翔泳社から発売されるこの本は、"Platform Engineering on Kubernetes"の日本語翻訳版で、3-shake の同僚と一緒に取り組んだプロジェクトです。翻訳作業を通じて、Platform Engineeringの課題や可能性について考える機会を多く得ることができました。原著者のsalaboyさんのハンズオンや過去の発表資料、記事を読む中で、Platform Engineeringに対する彼の考え方を学ばせていただきました。実際に一緒に登壇する機会もいただき、私の拙い英会話力にも関わらず温かく接していただいたことも貴重な経験でした。登壇から学んだこと今回の登壇準備と実践を通じて、技術共有における重要な気づきがありました。最も重要だと感じたのは、聴衆のバックグラウンドに合わせて内容を適切に調整することです。Developers SummitとPFEM特別回では、参加者層が大きく異なりました。Developers Summitでは、DevOpsやPlatform Engineeringに詳しくない参加者が多く、日常的な開発における具体的な問題点から入り、それをPlatform Engineeringの文脈で捉え直すことで基礎的な理解を促しました。一方、PFEM特別回では参加者との間に共通認識があったため、より実践的な課題や技術的解決策について深く掘り下げることができました。この違いは技術資料の作成にも影響しました。資料作成では、「知的な発見」と「理解するためのコスト」のバランスが重要です。知的な発見とは「なるほど、そういう考え方があったのか」という新しい視点を得られる瞬間ですが、その発見に至るまでの説明が複雑すぎると理解へのコストが大きくなりすぎてしまいます。多くの技術プレゼンテーションでは既知の問題とその解決策を列挙することに終始しがちですが、それだけでは予想外の学びには至りません。予想外の学びこそが、聴衆の心に残る知的な発見として認知されやすいのです。ここで重要なのは、単に「よくある課題とその解決策」を並べるだけでなく、「明確には意識していなかったけれど、言われてみれば確かにそうだった」という新たな気づきを提供することです。例えば、日々の開発で感じている不便さを Platform Engineering の文脈で捉え直すことで、それが個人の問題ではなく構造的な課題だったと気づく瞬間を作り出せます。かといって基礎的な前提ばかりでは、聴衆にとって新しい気づきが得られません。Developers Summitでは基礎と新知見のバランスを重視し、PFEM特別回では基礎的な説明を最小限に抑え、より深い技術的な議論に時間を割きました。それ以外の「イライラ」「焦り」「困惑」といった感情は、むしろ読者の集中力を削ぎ、本質的な学びを妨げてしまう。技術資料は、共感と発見のポジティブな体験に徹するべきなのだ。確かに、高度な実装や複雑な概念を詰め込んだ資料を作ることは可能だ。しかし、そのような難解な内容は、読者の理解を遠ざけ、結果として伝えたい本質が埋もれてしまう。読者の多くがこのような否定的な感情を抱く資料は、作成者の自己満足に過ぎないと言えるでしょう。2025年ならではの発見として、Xのアルゴリズム変更により画像が優先表示されるようになった現在、印象に残るスライドを含めることが効果的です。複雑な概念を一枚の図で表現することで、SNS上での共有や議論が促進され、発表後もコミュニティでの対話が継続する可能性が高まります。また、Platform Engineeringという新しい分野では、技術コミュニティにおける「共通言語」の重要性も実感しました。Developers Summitではキーとなる概念を具体例と共に丁寧に説明し、PFEM特別回では既存の共通言語を活用してより専門的な議論を展開しました。知識を一方的に伝えるのではなく、参加者との対話を通じて互いに学び合える場を作ることを心がけ、翻訳者兼登壇者としての過剰な発言は控えました。この経験を通じて、技術を伝えることは単なる知識の転送ではなく、聴衆のコンテキストに寄り添いながら対話を生み出すプロセスだと実感しました。イベントの性質や参加者層によって求められる内容や深さが異なることを学び、今後もこの気づきを活かしながら効果的な技術共有を目指していきます。おわりに2つのイベントでの発表資料は異なる切り口で作成しましたが、どちらも力を入れて準備させていただきました。より詳細な内容についてはぜひ資料をご覧いただければと思います。また、完全版については機会があればお話させていただきたいと考えていますので、ご興味がありましたらぜひご依頼ください。最後に、この経験を通じて得られた知見を今後の活動にも活かしていきたいと考えています。ご清聴いただいた皆様、そして貴重な機会を提供してくださった関係者の皆様に心より感謝申し上げます。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[インフラをつくるとはどういうことなのか、 あるいはPlatform Engineeringについて]]></title>
            <link>https://speakerdeck.com/nwiizo/inhurawotukurutohadouiukotonanoka-aruihaplatform-engineeringnituite</link>
            <guid>https://speakerdeck.com/nwiizo/inhurawotukurutohadouiukotonanoka-aruihaplatform-engineeringnituite</guid>
            <pubDate>Thu, 13 Feb 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2025年02月13日 Developers Summit 2025 13-E-4 にて「インフラをつくるとはどういうことなのか、 あるいはPlatform Engineeringについて - Platform Engineeringの効果的な基盤構築のアプローチ」というタイトルで登壇します。同日にPFEM特別回 でも登壇するのですが資料頑張って作ったのでそっちも読んでください。完全版は機会があればお話するので依頼してください。イベント名:  Developers Summit 2025公式URL: https://event.shoeisha.jp/devsumi/20250213セッションURL: https://event.shoeisha.jp/devsumi/20250213/session/5546登壇ブログ: https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Platform Engineeringは自由のめまい ]]></title>
            <link>https://speakerdeck.com/nwiizo/platform-engineeringhazi-you-nomemai</link>
            <guid>https://speakerdeck.com/nwiizo/platform-engineeringhazi-you-nomemai</guid>
            <pubDate>Wed, 12 Feb 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2025年02月13日 Kubernetesで実践するPlatform Engineering発売記念！ PFEM特別回にて「Platform Engineeringは自由のめまい - 技術の選択における不確実性と向き合う」というタイトルで登壇します。同日にDevelopers Summit 2025 でも登壇したのですが資料頑張って作ったのでそっちも読んでください。イベント名: Kubernetesで実践するPlatform Engineering発売記念！ PFEM特別回公式URL: https://platformengineering.connpass.com/event/342670/登壇ブログ: https://syu-m-5151.hatenablog.com/entry/2025/02/14/071127]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Neovimで始めるGitHub Copilot - copilot.lua による Language Server の設定方法]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/11/183337</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/11/183337</guid>
            <pubDate>Tue, 11 Feb 2025 09:33:37 GMT</pubDate>
            <content:encoded><![CDATA[github.blogこの設定は一時的なものであり、LSPのインストーラーが対応したらそちらで対応してください。github.comはじめに2025年2月10日、GitHubはCopilot Language Server SDKを公開しました。これは、エディタやIDEがLanguage Server Protocol（LSP）を通じてGitHub Copilotと連携できるものです。このリリースは、開発者がより柔軟にCopilotを利用できるようになる重要な一歩です。今までGitHub CopilotはVS Code、Visual Studio、JetBrains IDEs、Vim/Neovim、そして最近ではXcodeでも利用可能でしたが、これらのエディタすべてがCopilot Language Serverを使用して実装されていました。GitHubは開発者の選択肢を重視し、好みのエディタでCopilotを使用できるようにすることを目指しているみたいです。Copilotの進化NeovimでのCopilot利用は、以前はgithub/copilot.vimを通じて行われていました。このVimscriptベースのプラグインは、多くの開発者に利用されてきた公式の実装です。その後、Lua APIを活用したzbirenbaum/copilot.luaが登場しましたが、これも内部的にはcopilot.vimを通じてGitHub Copilotと通信を行っていました。このアーキテクチャでは、copilot.luaがNeovimのモダンなLua APIを活用した柔軟なインターフェースを提供し、バックエンドではcopilot.vimが実際のCopilotサービスとの通信を担当するという二層構造になっていました。そして今回のLanguage Server SDKの公開により、エディタとCopilotの連携方法が標準化され、直接Language Server Protocolを介してCopilotと通信できるようになりました。これにより、中間レイヤーが不要になり、より効率的で安定した実装が可能になりました。前提条件Neovim 0.8.0以上Node.js 18.x以上GitHubアカウント（Copilotのサブスクリプション）インストール手順1. Copilot Language Serverのインストールまず、Neovimの設定ディレクトリにCopilot用のディレクトリを作成し、Language Serverをインストールします。# Copilot用ディレクトリの作成mkdir -p ~/.config/nvim/copilot/# Language Serverのインストールnpm install @github/copilot-language-server -g --prefix ~/.config/nvim/copilot/# 実行権限の付与chmod +x ~/.config/nvim/copilot/bin/copilot-language-server2. Neovimプラグインのインストールlazy.nvimを使用している場合、以下の設定を~/.config/nvim/lua/plugins/copilot.luaに追加します。return {  "zbirenbaum/copilot.lua",  lazy = false,  priority = 1000,  config = function()    require("copilot").setup {      suggestion = { enabled = false },      panel = { enabled = false },      server_opts_overrides = {        trace = "verbose",        cmd = {          vim.fn.expand("~/.config/nvim/copilot/bin/copilot-language-server"),          "--stdio"        },        settings = {          advanced = {            listCount = 10,            inlineSuggestCount = 3,          },        },      },      filetypes = {        yaml = true,        markdown = true,        help = false,        gitcommit = true,        gitrebase = true,        hgcommit = false,        svn = false,        cvs = false,        ["."] = false,        ["*"] = true,      },    }  end,}3. 認証設定Neovimを起動後、以下のコマンドで認証を行います。:Copilot authブラウザが開き、GitHubアカウントでの認証が求められます。認証が完了すると、Copilotが使用可能になります。設定の説明設定の主要なポイントを解説します。この設定は私の設定ファイルなので自由に設定してください。suggestionとpanelenabled = false: デフォルトのサジェスト機能を無効化していますserver_opts_overridescmd: インストールしたLanguage Serverのパスと起動オプションを指定vim.fn.expand("~/.config/nvim/copilot/bin/copilot-language-server"): Language Serverの実行ファイルのパスを指定。vim.fn.expand()関数を使用して~をホームディレクトリに展開"--stdio": Language Serverが標準入出力（stdio）を使用してNeovimと通信することを指定するオプションsettings.advanced:   - settings.advanced:listCount: 候補の表示数（10個）inlineSuggestCount: インラインサジェストの数（3個）filetypes各ファイルタイプでのCopilotの有効/無効を設定["*"] = true: デフォルトですべてのファイルタイプで有効トラブルシューティングLanguage Serverが見つからない場合Error: Language server is not installed or not executableパスが正しいか確認実行権限が付与されているか確認chmod +xコマンドで実行権限を付与認証エラーの場合:Copilot authを再実行GitHubアカウントのサブスクリプション状態を確認まとめGitHub Copilot Language Server SDKの公開により、Neovimでより直接的にCopilotを利用できるようになりました。これまでのcopilot.vimを経由する方式から、直接Language Server Protocolを使用する方式への移行により、より効率的で保守性の高い実装が可能になりました。新しいSDKはnpmjs.comで公開されており、誰でも利用可能です。この変更により、エディタ開発者はより簡単にCopilotを統合でき、ユーザーはより安定した開発体験を得られるようになります。また、この方法は本来であれば不要でありlspconfigにコントリビューションすればよい()。github.com参考リンクGitHub Copilot Language Server SDK announcementCopilot.lua DocumentationLanguage Server Protocol SpecificationGitHub Copilot.vim]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[n週刊アトデ 2025-02-10]]></title>
            <link>https://blog.atusy.net/2025/02/10/atodeyomanakata/</link>
            <guid>https://blog.atusy.net/2025/02/10/atodeyomanakata/</guid>
            <pubDate>Mon, 10 Feb 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[アトデヨム、ウソジャナイ、ヨムノタノシー]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[kubeadmでk8sクラスタを構築する]]></title>
            <link>https://zenn.dev/moz_sec/articles/k8s-by-kubeadm</link>
            <guid>https://zenn.dev/moz_sec/articles/k8s-by-kubeadm</guid>
            <pubDate>Fri, 07 Feb 2025 02:00:09 GMT</pubDate>
            <content:encoded><![CDATA[KubernetesKubernetesとは、複数のコンピュータでコンテナをいい感じに動かしてくれるものです。Kubernetesの説明はいろんなサイトに書いてあるため、そちらを参照してください。公式サイトも参考になります。https://kubernetes.io/docs/concepts/overview/ kubeadmkubeadmは、Kubernetesクラスタを構築するためのツールの１つです。他にも、kopsやkubesprayなどがありますが、kubeadmは最小限の構成でクラスタを構築することができます。https://kubernetes.io/...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GKEのComputeClassに関する調査]]></title>
            <link>https://sreake.com/blog/gke-computeclass/</link>
            <guid>https://sreake.com/blog/gke-computeclass/</guid>
            <pubDate>Fri, 07 Feb 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[はじめに Sreake事業部で長期インターンをしている竜です。 本記事では、GKEのカスタムコンピューティングクラスについて調査を行いました。 カスタムコンピューティングクラスの概要 GKEのカスタムコンピューティングク […]The post GKEのComputeClassに関する調査 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes History Inspector(KHI)を触ってみた]]></title>
            <link>https://speakerdeck.com/bells17/kubernetes-history-inspector-khi-wohong-tutemita</link>
            <guid>https://speakerdeck.com/bells17/kubernetes-history-inspector-khi-wohong-tutemita</guid>
            <pubDate>Wed, 05 Feb 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[スライド内の参考リンク・画像など引用元一覧https://zenn.dev/bells17/scraps/67c852e99ad5a5 https://github.com/GoogleCloudPlatform/khi https://zenn.dev/google_cloud_jp/articles/9a7dc0df5e8906 https://blog.g-gen.co.jp/entry/kubernetes-history-inspector-introduction https://x.com/kyasbal_k/status/1884500133183905976 https://x.com/ryusa_eng/status/1886328704432996463 https://x.com/kkuchima/status/1884503826029228189 https://github.com/GoogleCloudPlatform/khi/blob/main/docs/en/images/gettingstarted-history.pnghttps://github.com/GoogleCloudPlatform/khi/blob/main/docs/en/images/gettingstarted-views.png https://k8s-novice-jp.connpass.com/event/343899/ https://jaguer-cloud-native.connpass.com/event/342024/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[mini.testでNeovimプラグインのテストに入門した]]></title>
            <link>https://blog.atusy.net/2025/02/05/mini-test-nvim/</link>
            <guid>https://blog.atusy.net/2025/02/05/mini-test-nvim/</guid>
            <pubDate>Wed, 05 Feb 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[以前書いた、Budouxを使ったWモーションをE/B/gEに対応させてプラグインにしようかなと思って、atusy/budouxify.nvimを作った。BudouxによりNeovimのWモーションを拡張し、日本語文章の区切りに移動させるhttps://blog.atusy.net/2024/12/27/nvim-budoux-motion/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[滅びゆく「なぜ？」と「どうして？」の学びをどう受け止めればよいのか？新人エンジニアの指導で感じる生成AI時代の指導の難しさ]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/04/203205</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/04/203205</guid>
            <pubDate>Tue, 04 Feb 2025 11:32:05 GMT</pubDate>
            <content:encoded><![CDATA[anond.hatelabo.jpこの記事を読み、その内容は学生だけでなく、ソフトウェアエンジニアの教育にも適用できると考えました。以下、ソフトウェアエンジニア（以降、技術者と表記）の教育について、私見を述べさせていただきます。はじめに新人エンジニアや学生のOJTやハンズオン研修を担当する中で日々実感することがあります。生成AIの台頭により従来の指導方法が大きく揺らいでいるという現実です。特に、表面的な成果物の質と実際の理解度の乖離が、技術者教育における新たな課題として浮き彫りになってきています。この変化は、技術教育に関わる私たち全員に、新たな挑戦と機会をもたらしています。生成AIは確かに技術教育の在り方を根本から問い直すきっかけとなりましたが、それは同時に、より本質的な技術力の育成について考え直す機会でもあります。技術の進化に伴う変化は不可避ですが、その中で私たちにできることは、この変化を前向きに捉え、新しい時代にふさわしい技術教育の形を模索していくことではないでしょうか。このような問題意識のもと、本稿では2025年に向けた技術者教育の新しいアプローチについて考察していきます。変化する学習の風景これまでの技術習得プロセスには、ある種の必然性がありました。ライブラリの使い方で躓き、設計パターンの意図を理解できず悩み、そしてそれらを一つずつ克服していく。この過程で、指導者は学習者の理解度を正確に把握し、適切なサポートを提供することができました。しかし、生成AIの登場により、この学習の構図が大きく変容しています。ある日の出来事が、この変化を象徴的に表していました。新人エンジニアに依頼した簡単なAPIの実装が、驚くほど短期間で、かつ高品質なコードとして提出されたのです。しかし、コードレビューの場での会話は、次のような展開となりました。「このミドルウェアの実装パターンを選択した理由は？」「はい...Copilotが提案したものをそのまま採用しました」「例外処理の設計思想については？」「申し訳ありません。その部分はAIの出力そのままで...」更に印象的だったのは、実装中のトラブルシューティングでの出来事でした。学生がハンズオン研修で詰まっていたため、私がエラーメッセージを確認して原因を特定し、問題のファイルを開こうとした瞬間、そのファイルは既にCopilotによって修正されました。本来であれば、エラーの原因を一緒に探り、解決策を考えることで、貴重な学びの機会となるはずでした。私たちはどう学んでいるのか　――創発から見る認知の変化 (ちくまプリマー新書)作者:鈴木宏昭筑摩書房Amazon理解を伴わない実装力技術者として、私自身も生成AIを積極的に活用しています。それは現代のソフトウェア開発において、もはや必須のスキルといえるでしょう。しかし、「理解を伴わない実装力」という新たな現象が、技術者教育に大きな課題を投げかけています。最近経験した出来事が、この課題を端的に表していました。新人エンジニアが実装したAPIは、一見すると申し分のない出来栄えでした。しかし、設計の意図を問うと「ChatGPTやCopilotの提案をそのまま採用した」という答えが返ってきます。エラーが発生した際も、その原因を一緒に探ろうとした矢先、Copilotが自動的に修正を施してしまう。こうした状況は、技術者としての本質的な成長機会を失わせる危険性をはらんでいます。具体的な例として、複雑なマイクロサービスアーキテクチャを構築できるのに、RESTful APIの基本原則が説明できない。網羅的なユニットテストを実装できるのに、テストピラミッドの考え方が理解できていない。Kubernetesのマニフェストが書けるのに、コンテナ化の利点を説明できない。このような状況が増えています。しかし、ここで注目すべきは「理解を伴わない実装力」にも異なるタイプが存在することです。生成AIに依存した実装を行うエンジニアと、知識はあるが実践との紐付けが発展途上のエンジニアです。前者は、高度なアーキテクチャのコードを書けるように見えても、その設計思想を説明できず、エラーが発生すると即座にAIに解決を委ねます。コードレビューでの「なぜ」という問いに対して、「AIが提案したから」や「はぁ？」という支離滅裂な回答に終始し、自身の実装に対する責任感や当事者意識が希薄です。一方後者は、デザインパターンやアーキテクチャの理論的理解はあるものの、それを実践に活かしきれていない段階にいます。しかし、レビューで指摘されると「あ、確かにそうですね」と納得し、エラーに直面しても自分なりの仮説を立てて解決を試みます。不完全でも自分の言葉で説明しようとする姿勢があり、試行錯誤を重ねながら、徐々に知識と実践を紐づけていっています。これまでの教育現場では、学習者の成長過程が自然と把握できていました。エラーメッセージと格闘し、設計パターンの意図を咀嚼し、少しずつ理解を深めていく。その過程で、「基礎概念は理解できている」「応用に課題がある」といった具合に、理解度の段階が明確だったのです。しかし今や、生成AIの支援により、理解度と実装力の相関が著しく弱まっています。特に前者のようなタイプの場合、表面的な成果物の品質だけでは、技術力を測ることが困難になっているのです。後者のような「知識はあるが実践が追いついていない」エンジニアの場合、時間とともに着実な成長が期待できますが、AIに依存した実装では、その成長機会自体が失われてしまう危険性があります。技術者教育の本質を見つめ直す私たちが目指すべきは、単なる「実装力」の向上ではありません。なぜその技術が必要とされるのか、どのような文脈で使用されるべきか、実装による影響をどう評価するか。そういった本質的な理解力を持つエンジニアの育成こそが重要です。「動くコード」を書けることは、技術者としての第一歩に過ぎません。技術力とは、技術選択の理由を説明できること、その技術がもたらす長期的な影響を予測できること、そしてプロジェクト全体における個々の実装の位置づけを理解できることです。これは単にコードを書けるということとは本質的に異なる能力です。syu-m-5151.hatenablog.comしかし、生成AIの存在は、この「理解のプロセス」を大きく変えつつあります。AIの出力を適切に編集することで「完成」にたどり着けてしまう現状は、技術習得における重要な学びの機会を奪っているかもしれません。エラーとの格闘、設計の試行錯誤、レビューでの指摘と修正—これらの経験は、表面的には非効率に見えても、実は技術者としての成長に不可欠なプロセスなのです。さらに重要なのは、技術の進化に対する適応力です。特定の実装パターンやツールの使い方を覚えることよりも、新しい技術が登場した際にその本質を理解し、適切に評価できる力を養うことが重要です。この適応力は、深い理解と経験に裏打ちされた「考える力」からしか生まれません。syu-m-5151.hatenablog.comこれからの技術者教育2025年に向けたエンジニア育成の新しいアプローチ1. 生成AIとの対話力を含めた包括的な技術教育カリキュラムの構築生成AIを効果的に活用するスキルそのものを技術教育の重要な要素として位置づける必要があります。AIへの適切なプロンプト作成能力はもはやエンジニアの基礎スキルとして不可欠です。しかし、ここで重要なのは単にAIに答えを求めることではありません。具体的には、AIに実装方針を提案させる際も、その根拠となる設計原則や参考文献を確認し、実装の背景にある理論や概念について理解を深めていく必要があります。さらに、特定の実装パターンのメリット・デメリットを比較検討させることで、技術選択の判断力を養うことができます。また、エラーが発生した際は、その原因と対処法についての理解を深めるための質問を重ねることで、問題解決力を育てていきます。つまり、AIを「答えを得るためのツール」ではなく、「理解を深めるための対話相手」として活用する姿勢が求められます。生成AIとの対話を通じて、技術の本質的な理解を深める習慣を身につけることが重要です。また、AIが出力したコードやドキュメントを適切に評価・検証する力も重要な要素となっています。プロンプトエンジニアリングの技術に加えて、AIと人間それぞれの得意分野を理解し、適切な役割分担ができる判断力が必要です。特に、AIの出力を鵜呑みにせず、常に批判的に検証し、その背景にある原理原則を理解しようとする姿勢を育むことが重要です。2. 実装スキルから設計思考力へのフォーカスシフトコーディングスキルの習得以上に、システム設計の原則や思想を理解することが重要になってきています。実装の詳細は生成AIに任せられる時代だからこそ、私たちはより本質的な設計思考力の育成に注力すべきです。システム設計において重要なのは、ビジネス要件を技術要件に適切に変換する力です。スケーラビリティ、可用性、保守性といった非機能要件をどのように満たすのか。開発効率と運用コストのバランスをどう取るのか。こうしたトレードオフを適切に判断し、プロジェクト全体の成功に導く力が、これからのエンジニアには求められます。個々の実装の詳細は生成AIにある程度任せられる一方で、システム全体を俯瞰する力は2025年においては人間にしか培えない能力なのです。この力を育むためには、実際のプロジェクトの中で判断が必要な場面に直面させ、その経験を積ませることが効果的です。例えば、新しい機能追加の要件を受けた際に、既存システムへの影響範囲を分析させたり、将来の拡張性を考慮した設計を検討させたりすることで、システム全体を見渡す視点を養うことができます。3. プロセスと思考を重視した評価方法への転換技術者の評価においても、成果物の完成度だけでなく、そこに至るまでの思考プロセスを重視する必要があります。なぜその設計を選択したのか、どのような代替案を検討したのか、想定されるリスクにどう対処するのか。こうした意思決定の過程とその根拠を、自分の言葉で説明できる力が極めて重要です。特に注目すべきは、長期的な視点での判断力です。目の前の実装だけでなく、その選択が将来的なシステムの保守性や拡張性にどのような影響を与えるのか。技術負債との向き合い方や、チーム全体での知識共有の方法など、持続可能な開発を実現するための視点も評価の重要な要素となります。この文脈で懸念されるのが、表面的な成果や「スムーズな進捗」を演出しようとする風潮です。これは特定の層に限った問題ではなく、現代の開発環境が生み出す構造的な課題といえます。重要なのは、そうした見せかけの生産性を求めない組織文化の醸成です。真摯な試行錯誤やチャレンジを認め、失敗から学ぶことを奨励する環境づくりこそが、本質的な技術力の向上につながります。結局のところ、私たちが目指すべきは、表面的な実装の速さや完成度ではなく、持続可能な開発を実現するための思考力と判断力を備えたエンジニアの育成なのです。そのためには、短期的な成果だけでなく、プロセスの質を重視する評価体系への転換が不可欠です。これは単なる評価方法の変更ではなく、組織全体で取り組むべき文化的な転換といえるでしょう。おわりに生成AI時代における技術者教育は、まさに過渡期にあります。単純な「できる/できない」の二元論では測れない、技術力をどう育成し、評価していくのか。これは私たち指導者自身にとっても、大きな学びの機会となっています。この課題に対する明確な解答は、業界全体としてもまだ模索段階にあります。しかし、技術教育の在り方を根本から見直し、新しい時代に適応した指導方法を確立していく必要性は明らかです。エンジニアの評価や育成に関する従来の常識は、生成AIの台頭により大きく揺らいでいます。多くの組織や教育機関が同様の課題に直面している中、重要なのは個々の取り組みや知見を共有し、業界全体として解決策を模索していく姿勢です。エンジニア育成は組織の壁を超えた共通の課題であり、オープンな対話と試行錯誤を通じてこそ、新しい時代にふさわしい技術教育の形が見えてくるのではないでしょうか。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Terraform使いがOpenTofuについて入門してみる]]></title>
            <link>https://blog.masasuzu.net/entry/2025/02/04/185305</link>
            <guid>https://blog.masasuzu.net/entry/2025/02/04/185305</guid>
            <pubDate>Tue, 04 Feb 2025 09:53:05 GMT</pubDate>
            <content:encoded><![CDATA[この記事はSRETT #11で発表されたものに加筆修正したものです。OpenTofuに関して調べたこととなります。3-shake SRE Tech Talk #11 オンサイト - connpass speakerdeck.com先日KubeCon + CloudNativeCon North America 2024に行ってきてました。その中で共同開催されていたOpenTofu Dayを見てOpenTofuに関して興味を持ちました。普段はTerraformを利用しており、あまりOpenTofuについては触ってきてないので、この機会に深堀りをしてみたいと思いました。参考: OpenTofu Dayまた、社内活動として技術検証を行っており、私の検証テーマとしてTerraformを中心としたIaC周りの技術調査を行ってるので、ちょうどいい機会だとも思いました。おことわりOpenTofuとはライセンス問題HashiCorp社の言い分コミュニティの懸念OpenTofuとTerraformの違いコマンドファイルRegistryremovedブロックState Encryptionbackendブロックの変数参照バージョン管理Security checkLinterCI/CDまとめ参考リンクライセンス変更フォークソースコード問題OpenTofuを使うためにHachiCorp買収おことわりこの記事はTerraformを知っている前提で書かれています。そのため細かい説明を省略している箇所があります。また筆者は普段はTerraformをメインで使用しており、OpenTofuを業務利用はしていません。OpenTofuとは2023年8月にTerraformを含めたHashiCorp製品のライセンスの変更を発表したことにより、これを懸念した企業やコミュニティによりOpenTFとしてフォークされます。その後OpenTFの名称はHashiCorp社の商標権への懸念からOpenTofuに改名されます。そのときの議論はissueを見るとたどることができます。参考: https://github.com/opentofu/opentofu/issues/2962023年9月にLinux Foundation傘下となります。参考: Linux Foundation Launches OpenTofu: A New Open Source Alternative to TerraformTerraformをフォークしたものなので基本的な使い勝手は同じです。コマンド名が terraform から  tofu に差し替えられています。ライセンス問題前項でさらっとライセンス変更と言いましたが、HashiCorp社は2023年8月に今後のリリースに関してライセンスを変更する旨を発表しました。これはオープンソースライセンスであるMozilla Public License（MPL） v2.0から商用サービスでの利用を制限するBusiness Source License（BUSLあるいはBSL） v1.1に変更するものです。参考: HashiCorp adopts Business Source Licenseこれに対して、利用企業およびコミュニティが懸念を示し、OpenTofuをフォークしたという流れになります。HashiCorp社の言い分従来BSLは本番使用(production use)が制限されます。ただし、ライセンスのParameterとして追加使用許可(Additional Use Grant)をすることによりTerraformと「競合製品」でなければ本番利用の制限はないとしてます。参考: https://github.com/hashicorp/terraform/blob/v1.11/LICENSE「競合製品」とは、有料サポート契約を含む第三者に販売される製品で、HashiCorp のライセンス対象製品の有料版の機能と大幅に重複する製品を指します。TerraformでいうところのHCP Terraform(Terraform Cloud)を想定しているのかと思います。また組織内でTerraformをホストして利用することは「競合製品」とはみなされなません。そのため利用者としては基本的には問題なく利用できるとしてます。参考: HashiCorp Licensing FAQ問題となるのはTerraformの機能を有償で提供しているSaaSと読み取れます。コミュニティの懸念HashiCorp社が説明したBSLと追加使用許可はあいまいであるとしてます。そのため、自身の行動が許諾範囲内か判断が困難である。「競合製品」の定義やライセンス自体が今後変更されるか不確実であると懸念を示してます。また、TerraformはOSSの恩恵を受けて成長してきてため、これからもオープンソースソフトウェアであるべきだと信じていると表明しています。参考: OpenTofu FAQOpenTofuのスポンサー企業としては以下のとおりです。HarnessGruntworkSpaceliftenv0ScalrHarnessはCI/CDまわりのSaaS製品、Gruntworksはterragruntの開発元、Specelift、env0、ScalrはTerraformをホストするSaaSサービスを運営しています。OpenTofuとTerraformの違いこの項ではそれぞれの違いについて説明していきます。OpenTofuはTerraform1.6-alphaからフォークされているのでそれまでに実装されていたものは互換があります。また、Terraform 1.6以降に追加された機能に関しても随時取り込まれています。そのため、1.5までの機能を使っているのであれば素直に移行できるかとは思います。バージョンごとに移行ガイドがあるので細かくはそれを参照すると良いです。参考: https://opentofu.org/docs/intro/migration/ただし、別のコードベースで開発がされているので、OpenTofuのみの独自実装もあります。ここではいくつか個人的に気になる違いについてあげていきます。コマンド基本的には terraform を tofuに置き換えていただければよいです。サブコマンドは一緒です。# Terraformterraform initterraform planterraform applyterraform destroy# OpenTofutofu inittofu plantofu applytofu destroyファイルterraform由来の .tf または .tofu の拡張子のファイルを設定ファイルとして認識します。json形式の .tf.json または .tofu.json の拡張子のファイルも同様です。同じディレクトリ内に.tf と .tofu の両方のファイルがあった場合、.tofu ファイルだけ認識して、.tf ファイルは無視されます。foo.tf  # <=== このファイルは無視されるfoo.tofuRegistryTerraform同様OpenTofuにもプロバイダーやモジュールのレジストリがあります。Terraform: https://registry.terraform.io/OpenTofu: https://registry.opentofu.orgOpenTofu Registryが登場したときに存在したTerraform Providerは反映されています。反映されていないものに関してもissueを立てれば反映されるようですhttps://github.com/opentofu/registryremovedブロックremovedブロックは既存のリソースを削除することなく、stateから削除することができます。それぞれ下記のように記述できます。下記の例ではAWSインスタンス自体は削除せず、stateから外すことを意図してます。# Terraformremoved {  from = aws_instance.example  lifecycle {    destroy = false  }}# OpenTofuremoved {  from = aws_instance.example}Terraformではlifecyleブロックでdestroy=falseの記述が必須です。参考: https://developer.hashicorp.com/terraform/language/resources/syntax#removing-resourcesOpenTofuではremovedブロックを書くだけで stateから削除されます。参考: https://opentofu.org/docs/language/resources/syntax/#removing-resourcesremovedブロックでやりたいことはstateから削除することなので、単純にリソースを削除したいなら対象resouceブロックを削除すればいいので、Terraformの記述方法のほうがへんな気がします。State EncryptionTerraformでは平文でStateに保存されてしまうという問題がありましたが、OpenTofuではクライアントサイドで暗号化する機能が追加されてます。クラウドプロバイダーの KMSキーなどを利用してStateを暗号化することができます。参考: State and Plan Encryption | OpenTofuTerraformではたとえsopsプロバイダーで機密情報を暗号化しても、Stateファイルには平文で保存されているので権限があれば機密情報が見えてしまう状態にありました。State自体が暗号化されることにより機密情報をよりセキュアに扱えるようになります。参考: Terraformのsopsプロバイダーを使用するだけで機密情報は守られるのか - 目の前に僕らの道があるbackendブロックの変数参照OpenTofuではbackendブロックで変数参照ができます参考: https://opentofu.org/docs/language/settings/backends/configuration/#variables-and-localsvariable "env" {  type    = string}locals {  path = "${var.env}/terraform.tfstate"}terraform {  backend "local" {    path = local.path  }}tofu init -var="env=dev" -reconfiguretofu plan -var="env=dev"Terraformで同じことをしたい場合、-backend-configを渡さないといけないため、backendを切り替える際に不便となります。terraform init -backend-config=./envs/dev/terraform.backend -reconfigureterraform plan -vars-file=./envs/dev/terraform.tfvarsOpenTofu DayのLTで紹介されてた環境名だけを渡して挙動を切り替えるパターンが現状だとterraformでは使えません参考:On Best Practices with OpenTofu Structuringバージョン管理複数プロジェクトでTerraform or OpenTofuを使う場合、プロジェクトごとに使用バージョンを管理する必要があります。いくつか選択肢を見ていきます。Terraformのバージョン管理ツールとしてよく使われるtfenvはOpenTofuには対応しません。参考:https://github.com/tfutils/tfenv/issues/409代わりにTerraformとOpenTofuに対応したtenvができました。こちらを利用すると良さそうです。https://github.com/tofuutils/tenv私はTerraformも合わせてプロジェクト内のツールのバージョン管理をまとめてasdfでやってますが、こちらは対応しています。https://github.com/virtualroot/asdf-opentofu自分はあまり使わないのですが、同じようなツールのaquaやmiseも両対応しています。https://aquaproj.github.io/https://github.com/jdx/miseSecurity checkTerraformだとtfsec(現 trivy config)がセキュリティチェックとして使われてるかと思います。ディスカッションはされており優先順位をつけて対応するとのことです。参考: https://github.com/aquasecurity/trivy/discussions/5069LintertflintはOpenTofuをサポートしないようです。参考: https://github.com/terraform-linters/tflint/issues/2037Linterの議論自体はissueで続いているようです。参考: https://github.com/opentofu/opentofu/issues/2213CI/CDHCP Terraform(旧Terraform Cloud)に相当するSaaSとしては、OpenTofuスポンサーのSpacelift、env0、Scalrなどがあります。tfactions、atlantis、diggerもOpenTofuに対応している模様です。まとめ現時点でOpenTofuに移行するするべきか?の問については、利用者側として現状では引き続き様子見かと思います。足回りも概ね揃ってきているが、まだ足りないエコシステムもあります。気になるところではIBM社にHashiCorp社の買収による統合完了の様子も追っていきたいところです。予定では2025年の1-3月期に統合完了するとのことなので、その後なにか動きがあるかもしれません。参考: IBM社によるHashiCorp社買収についてとはいえ、1つのツールが使えなくなることで業務が止まるのは避けたいので常に選択肢は複数取っておきたいところです。エンジニアとしてはOpenTofuに限らず、Pulumi、CDK(AWS)なども選択肢として取っておきたいです。それはそれとして、OpenTofuはTerraformとは違う独自進化をしているので、変更を追っていきたいところです。個人的にはState暗号化とかBackendの変数参照とかTerraformに入ってほしいです。それでは良い豆腐ライフを!、、、。ここまで書いてきたのですが、minamijoyoさんのTerraform職人のためのOpenTofu再入門2024がものすごく詳しいので、この記事以上に参考になるかと思います。参考リンクライセンス変更HashiCorp adopts Business Source LicenseHashiCorp | The Infrastructure Cloud CompanyHashiCorp、全製品のライセンスを商用利用に制限があるBSLライセンスに変更すると発表 － PublickeyTerraformのライセンスの変更とその影響何故、TerraformのBUSL-1.1へのライセンス変更は反発を受けたのか？ – Shuji SadoTerraform のライセンス変更についての考察 #Azure - QiitaフォークTerraformのフォークが「OpenTofu」としてLinux Foundation傘下で正式ローンチ。OpenTFから改名 － Publickeyソースコード問題【Infostand海外ITトピックス】ライセンスをめぐって対立　HashiCorpと「Terraform」派生のOpenTofu - クラウド WatchHashiCorp、TerraformをフォークしたOpenTofuに対しコードの不正コピーを警告。OpenTofuは完全否定 － PublickeyOpenTofuを使うためにTerraform職人のためのOpenTofu再入門2024 #Terraform - QiitaTerraform職人のためのOpenTofu入門 #Terraform - QiitaOpenTofuopentofu/opentofu: OpenTofu lets you declaratively manage your cloud infrastructure.Migrating to OpenTofu 1.7.x from Terraform | OpenTofuHachiCorp買収IBMがHashiCorpを64億ドルで買収、TerraformとAnsibleのシナジー効果などを見込む | IT LeadersIBM Japan Newsroom - ニュースリリースIBM社によるHashiCorp社買収について]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スリーシェイク、「Developers Summit 2025」にて出展・登壇、および書籍「Kubernetesで実践するPlatform Engineering」の先行販売・サイン会を実施]]></title>
            <link>https://sreake.com/blog/developers-summit-2025/</link>
            <guid>https://sreake.com/blog/developers-summit-2025/</guid>
            <pubDate>Tue, 04 Feb 2025 01:00:00 GMT</pubDate>
            <content:encoded><![CDATA[株式会社スリーシェイク（本社：東京都新宿区、代表取締役社長：吉田 拓真、以下スリーシェイク）は、2025年2月13日（木）・14日（金）に開催される「Developers Summit 2025」にSRE総合支援サービス「Sreake（スリーク）」のブースを出展します。The post スリーシェイク、「Developers Summit 2025」にて出展・登壇、および書籍「Kubernetesで実践するPlatform Engineering」の先行販売・サイン会を実施 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[技術記事のレベル低下は誰のため？ - 楽して学べる幻想と戦うためにもしくはバズるという快楽に対する防衛術]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/04/094857</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/04/094857</guid>
            <pubDate>Tue, 04 Feb 2025 00:48:57 GMT</pubDate>
            <content:encoded><![CDATA[はじめにバズっている技術ブログやSNSの投稿を見ていて「今さらこんな基本的なTipsが数千いいねされるのか」と感じることはありませんか。「とりあえずDockerを使ってみよう」「React超入門」といった手取り足取り系の投稿がバズり続け、タイムラインには毎日のように初心者向けコンテンツが流れています。同じような入門記事が異なる執筆者によって際限なく生み出されるこの状況は、技術情報の共有における興味深い現象と言えるでしょう。では、なぜこのような現象が続いているのでしょうか。「学習」に対する一般的な認識多くの普通の人にとって「学習」は快適な体験であるべきだという認識があります。自分が理解できる範囲の内容を読み、既存の知識と結びつけて徐々に理解を深めていく。分からないことがあれば基礎的な内容に立ち返る。実際、人間の脳は安全な環境で学習することを好む傾向にあり、多くの人は「コンフォートゾーン」の中で学習を進めていきたいという自然な欲求を持っています。これは特に新しい技術やプログラミングのような複雑な分野においても顕著に表れます。このような学習パターンは、人間の認知的な特性とも合致しています。新しい情報は、既存の知識体系の中に無理なく組み込めるときに最も効果的に定着するからです。そのため、急激な学習曲線や理解が追いつかない内容は、多くの人にとってストレス要因となり、学習意欲を低下させる原因となり得ます。自己啓発の教科書　禁欲主義からアドラー、引き寄せの法則まで作者:アナ・カタリーナ・シャフナー日経ナショナル ジオグラフィックAmazon現実の技術学習との乖離しかし実際の技術習得のプロセスはもっと異なるものです。理解できない内容を何度も読み返し、エラーと格闘しながら少しずつ理解を積み重ねていく必要があります。分からない用語を調べながら文脈を理解していくという地道な作業が求められます。時には数時間かけてもエラーが解決できず、徹底的にドキュメントを読み込んだり、ソースコードを追いかけたりする忍耐も必要です。このような現実の学習プロセスは、多くの人が求める「快適な学習体験」とは大きくかけ離れています。つまり、技術習得には「コンフォートゾーン」を意図的に離れ、混乱や不確実性と向き合う覚悟が必要なのです。このギャップこそが「お手軽入門記事」が無限に生産され続ける根本的な理由の一つと言えるでしょう。人々は常により優しい入り口、より分かりやすい説明を求め続けているのです。私たちはどう学んでいるのか　――創発から見る認知の変化 (ちくまプリマー新書)作者:鈴木宏昭筑摩書房Amazon需要と供給の関係バズっている技術ブログやSNSでは特徴的な循環が生まれています。チュートリアル的なコンテンツへの大きな需要があり、入門記事の方が読者数やフォロワーを獲得しやすい傾向にあります。複雑な技術解説や深い考察よりも、「とりあえず動くものを作る」といった実践的なコンテンツの方が、圧倒的に高いエンゲージメントを得られるのです。このような状況下では、執筆者もまた市場原理に従わざるを得ません。高度な技術記事を書いても読者が少なければ、自然と入門コンテンツにシフトしていくでしょう。結果として、さらに多くの基礎的なハウツー記事が生み出され、SNSのタイムラインを埋め尽くしていく循環が続いています。これは技術情報の生態系における一種の「自然淘汰」とも言えるかもしれません。上級者向けコンテンツの価値と課題上級者向けコンテンツには確かに大きな価値があります。業界全体の技術力向上に貢献し、特定の問題に対する深い洞察を共有することで、エンジニアとしてのキャリアアップにも役立ちます。しかしこれらのコンテンツは必然的に読者層が限定されます。前提知識が必要で理解に時間がかかり、即座に実践できない場合が多いためです。視点の多様性と技術記事の価値重要な点として、技術記事の「難易度」は極めて相対的です。ある人にとっての入門記事が、別の人にとっては上級者向けのコンテンツとなるという状況は珍しくありません。私たちは往々にして自分の知識レベルをベースラインとして記事の価値を判断しがちですが、技術学習においてはそれぞれが異なる文脈や背景を持っているのです。この認識は、技術記事を書く際の重要な視点となります。プラットフォームと個人の戦略技術記事プラットフォームにはトレンドとは別に普遍的な価値を持つ記事が確実に存在します。分散システムの設計原則やスケーラビリティの考察、セキュリティアーキテクチャの分析など、時代を超えて参照される価値のある記事です。しかしそれらの記事はトレンド入りしづらく、時として埋もれてしまいます。質の高い技術記事が、読者の多様な技術レベルや興味に応じて適切に届けられる仕組みづくりがプラットフォーム側には求められています。一方で個人の執筆戦略としては、より包括的なアプローチが有効です。時にはトレンドに乗った入門記事を書きつつ、自分の技術的な知見や経験を活かした深い考察も定期的に発信していく。理想的な技術ブログの運営には、読者の多様性を意識したバランスが重要です。入門的なコンテンツから実践的な応用記事、さらにはアーキテクチャ設計や性能改善といった本質的な議論まで、幅広い層に価値を提供することができます。このような多層的なアプローチは、技術コミュニティ全体の成長に貢献します。それぞれの記事が、異なる段階にいる読者にとって「次のステップ」となる可能性を持っているからです。執筆者は自身の経験を共有しながら、同時に読者それぞれの文脈での学びをサポートすることができるのです。Science Fictions　あなたが知らない科学の真実作者:スチュアート・リッチーダイヤモンド社Amazonまとめ表層的な入門記事が無限に存在する現状は決して悪いことではありません。むしろそれは多くのエンジニアが学習意欲を持っている証であり、業界の健全性を示すものとも言えます。執筆者としては読者の「コンフォートゾーン」を少しずつ広げていけるような段階的な難易度設定と丁寧な説明を心がけることが重要でしょう。そうすることで読者の成長を支援しながら、技術コミュニティ全体の発展に貢献できるはずです。アメリカは自己啓発本でできている作者:尾崎俊介平凡社Amazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[WebAssembly を開発する為にTrunkビルドツールを試してみました。]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/02/01/120804</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/02/01/120804</guid>
            <pubDate>Sat, 01 Feb 2025 03:08:04 GMT</pubDate>
            <content:encoded><![CDATA[はじめにWebAssemblyの進化により、RustでWebアプリケーションを構築する機会が増えています。特にYewフレームワークは、React風の使い勝手とRustの堅牢性を組み合わせた開発が可能です。本記事では、Yewアプリケーション開発をスムーズにするビルドツールTrunkについて、セットアップから実践的なテクニックまで解説します。yew.rsTrunkとはTrunkは、WebAssemblyアプリケーションに特化したビルドツールです。そして、以下のような特徴を持ちます。ホットリロードによる高速な開発体験アセット管理の自動化（画像、CSS、その他静的ファイル）最小限の設定で開発環境の構築が可能プロダクションビルドの最適化機能trunkrs.dev環境構築まず、必要なツールをインストールします：# WebAssemblyターゲットの追加rustup target add wasm32-unknown-unknown# Trunkのインストールcargo install trunktrunkrs.devプロジェクトの作成以下のコマンドで新規プロジェクトを作成します：cargo new yew-appcd yew-appCargo.tomlに必要な依存関係を追加：[dependencies]yew = { git = "https://github.com/yewstack/yew/", features = ["csr"] }yew.rsシンプルなカウンターアプリの実装src/main.rsにカウンターアプリのコードを実装します：use yew::prelude::*;#[function_component(App)]fn app() -> Html {    let counter = use_state(|| 0);    let onclick = {        let counter = counter.clone();        move |_| {            let value = *counter + 1;            counter.set(value);        }    };    html! {        <div>            <button {onclick}>{"+1"}</button>            <p>{ *counter }</p>        </div>    }}fn main() {    yew::Renderer::<App>::new().render();}yew.rsHTMLテンプレートの準備index.htmlをプロジェクトルートに作成：<!DOCTYPE html><html>    <head>        <meta charset="utf-8" />        <title>Yew Counter App</title>    </head>    <body></body></html>開発サーバーの設定と起動Trunk.tomlで開発サーバーの設定をカスタマイズできます：[serve]# 開発サーバーのアドレスaddress = "127.0.0.1"# ポート番号port = 8080# アセットディレクトリassets = ["public"]# プロキシ設定（APIサーバーなど）[[proxy]]backend = "http://localhost:3000/api/"開発サーバーを起動：trunk serve --openこれでhttp://localhost:8080にアプリケーションが立ち上がります。アセット管理のベストプラクティス静的ファイルはpublicディレクトリで管理します：public/  ├── images/      # 画像ファイル  ├── styles/      # CSSファイル  ├── fonts/       # フォントファイル  └── favicon.ico  # ファビコンtrunkrs.devプロダクションビルドの最適化本番環境向けのビルドでは、以下の最適化が可能です：# リリースビルドtrunk build --release# WebAssemblyコードの最適化trunk build --release --filehashデバッグとトラブルシューティング開発中によくあるトラブルの対処法：ビルドエラー時はtrunk cleanでキャッシュをクリアアセットが反映されない場合はtrunk serve --watchで監視を強化WebAssemblyのデバッグには開発者ツールのConsoleを活用(フロントエンド開発初心者で学びが多かった⋯)おわりにTrunkを活用することで、Yewアプリケーションの開発体験が大幅に改善されます。特にホットリロードとアセット管理の自動化は、開発効率を向上させる重要な機能です。参考リンクTrunk GitHubYew GitHubWebAssembly]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2025-01-31 吉祥寺.pm 37 初めての海外カンファレンス]]></title>
            <link>https://speakerdeck.com/masasuzu/2025-01-31-ji-xiang-si-dot-pm-37-chu-metenohai-wai-kanhuarensu</link>
            <guid>https://speakerdeck.com/masasuzu/2025-01-31-ji-xiang-si-dot-pm-37-chu-metenohai-wai-kanhuarensu</guid>
            <pubDate>Fri, 31 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[KubeCon NA 2024に行ってきたのでその経験を話します。吉祥寺.pm 37で話しました。https://kichijojipm.connpass.com/event/339040/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Lambda Web Adapter の Function URL を Cloudfront で公開する]]></title>
            <link>https://blog.1q77.com/2025/01/aws-lambda-web-adapter-with-cloudfront/</link>
            <guid>https://blog.1q77.com/2025/01/aws-lambda-web-adapter-with-cloudfront/</guid>
            <pubDate>Thu, 30 Jan 2025 15:01:24 GMT</pubDate>
            <content:encoded><![CDATA[これまでのおさらい前回、AWS Web Adapter を用いた AWS Lambda に Function URL を使って公開することはできた。今回はこれをカスタムドメインで公開するべく CloudFront と連携させます。OAC (Origin Access Control)2024年4月に CloudFront と Function URL の間を OAC (Origin Access Control) を使って Function URL への直アクセスを防ぐことができるようになっていたのでこれも試します。Amazon CloudFront が Lambda 関数 URL オリジンのオリジンアクセスコントロール (OAC) を新たにサポート]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Lambda Web Adapter でお手軽 Web Service 公開]]></title>
            <link>https://blog.1q77.com/2025/01/aws-lambda-web-adapter/</link>
            <guid>https://blog.1q77.com/2025/01/aws-lambda-web-adapter/</guid>
            <pubDate>Wed, 29 Jan 2025 15:40:00 GMT</pubDate>
            <content:encoded><![CDATA[ずっと AWS にも Cloud Run が欲しいなあと思っていました。AppRunner はコレじゃない…そんなある日、あれ？ AWS Lambda でいけんじゃね？と思い検索すると]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RustとYewでポモドーロタイマーを作ってみた]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/01/29/120446</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/01/29/120446</guid>
            <pubDate>Wed, 29 Jan 2025 03:04:46 GMT</pubDate>
            <content:encoded><![CDATA[はじめにイベントで定期的に登壇をしていて休日出勤したのに消化しきれなかった代休が余っていたので、3連休爆誕させて以前から興味のあったWebAssemblyの学習に時間を使ってみることにしました(いくつか本も読んだのでいつか紹介します。)。「とりあえず何か作ってみる」のが一番の近道だと考え、日々の私生活でも使えそうなポモドーロタイマーを実装することにしました。WebAssemblyのエコシステムを調べていく中で、RustのYewというフレームワークが目に留まりました。ReactライクなAPIでWebAssemblyアプリケーションが作れるとのことで、ちょっと開発することにしました。github.com使用技術の選定理由Rust：WebAssemblyのための優れたツールチェーンを持っており、学習コストは高めですが、型安全性と高いパフォーマンスが魅力でしたYew：ReactライクなAPIで、コンポーネントベースの開発が可能。フロントエンド開発者にとって親しみやすい設計になっていますTrunk：ビルドツールとして採用。trunk serveだけで開発サーバーが立ち上がる手軽さが気に入りました技術スタックRust (v1.75.0)Yew (v0.21)WebAssemblyTrunk (Bundler)プロジェクトの概要ポモドーロテクニックは25分の作業時間と5分の休憩を交互に行う時間管理手法です。今回実装したアプリケーションでは、以下の機能を提供します：基本的なタイマー機能25分のカウントダウン開始/停止/リセット制御視覚的なフィードバックタスク管理機能タスクの記録実際の作業時間の追跡完了したタスクの履歴管理データエクスポート機能マークダウン形式での出力クリップボードへのコピー機能実装の詳細プロジェクトのセットアップまず、必要なツールとターゲットをインストールします：rustup target add wasm32-unknown-unknowncargo install trunk主要なデータ構造タスクとタイマーの状態管理のための構造体：#[derive(Clone, Debug)]struct Task {    description: String,    completed_at: DateTime<Local>,    duration: i32,}pub struct PomodoroTimer {    time: i32,    running: bool,    interval: Option<Interval>,    current_task: String,    completed_tasks: Vec<Task>,    initial_time: i32,    markdown_visible: bool,    markdown_content: String,}タイマー機能の実装Yewのコンポーネントシステムを利用して、タイマーの制御を実装しました：fn update(&mut self, ctx: &Context<Self>, msg: Self::Message) -> bool {    match msg {        Msg::Start => {            if !self.running {                let link = ctx.link().clone();                self.interval = Some(Interval::new(1000, move || {                    link.send_message(Msg::Tick);                }));                self.running = true;            }            true        }        // 他のメッセージハンドラ...    }}クリップボード機能の実装WebAssemblyからブラウザのクリップボードAPIを利用する実装：Msg::CopyToClipboard => {    if let Some(window) = window() {        let navigator = window.navigator();        let clipboard = navigator.clipboard();        let _ = clipboard.write_text(&self.markdown_content);    }    true}開発で直面した課題と解決策WebAssemblyとブラウザAPIの連携課題：クリップボード機能の実装で型の不一致が発生解決：web-sysクレートの適切な機能を有効化し、型の変換を正しく処理状態管理とライフタイム課題：コンポーネントの状態管理でライフタイムエラーが発生解決：use_stateとuse_mut_refを適切に使い分けて実装セットアップと実行方法プロジェクトの作成：cargo new --lib yew-pomodorocd yew-pomodoro依存関係の追加（Cargo.toml）：[dependencies]yew = { version = "0.21", features = ["csr"] }gloo-timers = "0.3"web-sys = { version = "0.3.64", features = ["console", "HtmlInputElement", "Window", "Navigator", "Clipboard"] }wasm-bindgen = "0.2"chrono = "0.4"アプリケーションの実行：trunk serve開発を通じて学んだことWebAssemblyの基本概念JavaScriptとの連携方法パフォーマンスの最適化ポイントRustの特徴的な機能所有権システム型安全性の恩恵コンパイル時のエラーチェックの強力さフロントエンド開発での新しい視点パフォーマンスを意識したコンポーネント設計WebAssemblyならではの制約と利点所感代休を使って新しい技術に触れる時間が作れたのは、とても良い経験になりました。特に、JavaScriptで書いているような処理をRustで書き直してみることで、言語の特性や設計の違いについて深く考える機会になりました。WebAssemblyは確かにまだエコシステムが発展途上ですが、Yewのような成熟したフレームワークを使えば、実用的なアプリケーションを比較的スムーズに開発できることが分かりました。ソースコードプロジェクトのソースコードはGitHubで公開しています。コメントや改善案があれば、お気軽にIssueやPull Requestを送ってください。次のステップ今回の学習を通じて、WebAssemblyの可能性を実感できました。次は以下のような発展的な内容に挑戦してみたいと考えています：Rustの非同期処理を活用した機能拡張WebAssemblyのパフォーマンス測定と最適化より大規模なアプリケーションでの実践参考リンクRust公式ドキュメントYewドキュメントRustで始めるWebAssemblyMDN WebAssemblyガイド休暇を使って新しい技術に触れることで、普段の業務にも新しい視点を持ち込めそうです。皆さんも、空き時間を見つけて興味のある技術に触れてみてはいかがでしょうか。読んだ書籍Rustで学ぶWebAssembly――入門からコンポーネントモデルによる開発まで エンジニア選書作者:清水 智公技術評論社AmazonProgramming WebAssembly with Rust: Unified Development for Web, Mobile, and Embedded Applications (English Edition)作者:Hoffman, KevinPragmatic BookshelfAmazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Renovate を手元の repository に対して debug 実行する]]></title>
            <link>https://blog.1q77.com/2025/01/renovate-local-debug/</link>
            <guid>https://blog.1q77.com/2025/01/renovate-local-debug/</guid>
            <pubDate>Tue, 28 Jan 2025 10:45:08 GMT</pubDate>
            <content:encoded><![CDATA[renovate の設定を手元で試行錯誤したい時のメモです。Local Platform--platform=local を指定して実行すると local filesystem を対象として renovate を実行することができます。https://docs.renovatebot.com/modules/platform/local/手元の working copy の root directory で実行します。(npx は使わなくても良いが install からやってくれるので)]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[論文紹介 ”Long-Context LLMs Meet RAG: Overcoming Challenges for Long Inputs in RAG” @GDG Tokyo]]></title>
            <link>https://speakerdeck.com/shukob/lun-wen-shao-jie-long-context-llms-meet-rag-overcoming-challenges-for-long-inputs-in-rag-at-gdg-tokyo</link>
            <guid>https://speakerdeck.com/shukob/lun-wen-shao-jie-long-context-llms-meet-rag-overcoming-challenges-for-long-inputs-in-rag-at-gdg-tokyo</guid>
            <pubDate>Tue, 28 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[https://gdg-tokyo.connpass.com/event/340671/大規模言語モデル（LLM）は、外部の知識源を利用することで、より強力な応答を生成できるようになります（これをRetrieval-Augmented Generation: RAGと呼びます）。LLMが処理できる入力テキストの長さが長くなるにつれて、より多くの関連情報をRAGで与えられるようになり、生成される回答の質が向上することが期待されます。一般的には、取得する情報が多いほど関連情報（高い再現率）も増え、結果として性能が向上すると考えられます。しかし、長文処理LLMにおけるRAGの性能が、取得する情報が増えすぎると逆に低下する現象を明らかにし、その原因が「ハードネガティブ」な情報にあることを示しました。そして、その問題を解決するために、効果的な学習不要および学習を伴うアプローチを提案しています。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vim-jpラジオ#27・#28聞いた - 実はEmacs30年選手！t-wadaさん登場！]]></title>
            <link>https://blog.atusy.net/2025/01/28/vim-jp-radio-27/</link>
            <guid>https://blog.atusy.net/2025/01/28/vim-jp-radio-27/</guid>
            <pubDate>Tue, 28 Jan 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[分かるところからやってけ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rのloggerパッケージで構造化ログを出力する時にメタフィールドの名前を変更する]]></title>
            <link>https://blog.atusy.net/2025/01/27/r-logger-rename-metafield/</link>
            <guid>https://blog.atusy.net/2025/01/27/r-logger-rename-metafield/</guid>
            <pubDate>Mon, 27 Jan 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[loggerパッケージはRのログ出力に使います。ログはプログラムの進捗確認や、問題発生時のデバグなどに便利なので、ぜひ活用したいところですね。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Site Reliability Engineering on Kubernetes]]></title>
            <link>https://speakerdeck.com/nwiizo/site-reliability-engineering-on-kubernetes</link>
            <guid>https://speakerdeck.com/nwiizo/site-reliability-engineering-on-kubernetes</guid>
            <pubDate>Sun, 26 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2025年01月26日 10:35-11:05（ルーム A）にて「Site Reliability Engineering on Kubernetes」というタイトルで登壇します。イベント名: SRE Kaigi 2025公式URL: https://2025.srekaigi.net/セッションURL: https://fortee.jp/sre-kaigi-2025/proposal/a75769d1-7835-4762-a1f6-508e714c8c8e登壇ブログ: https://syu-m-5151.hatenablog.com/entry/2025/01/26/005033]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fishシェルでターミナルのタイトルをプロジェクトルートからの相対パスっぽくする]]></title>
            <link>https://blog.atusy.net/2025/01/26/fish-title-relative-to-projroot/</link>
            <guid>https://blog.atusy.net/2025/01/26/fish-title-relative-to-projroot/</guid>
            <pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[たとえば、git管理しているプロジェクトとかで、foo/appとかにするイメージ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SRE Kaigi 2025 で登壇してきます。 #srekaigi]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/01/26/005033</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/01/26/005033</guid>
            <pubDate>Sat, 25 Jan 2025 15:50:33 GMT</pubDate>
            <content:encoded><![CDATA[はじめにnwiizoです。2025年1月26日のSRE Kaigi 2025にて「Site Reliability Engineering on Kubernetes」というタイトルで登壇させていただきます。本イベントは「More SRE !」をテーマに、SREの知見共有と技術者の交流を目的とした技術カンファレンスです。2025.srekaigi.netこの発表資料を作成するきっかけとなったのは、私が翻訳に関わった「Kubernetesで実践する Platform Engineering」（2025年2月19日出版予定）の仕事でした。本書の翻訳作業を通じて、SREとPlatform Engineeringの密接な関係性、そしてKubernetesがこれらを実現する優れた基盤となることを改めて実感しました。Kubernetesで実践する Platform Engineering作者:Mauricio Salatino翔泳社Amazon発表資料 speakerdeck.com発表資料はSpeaker Deckで公開しています。イベントのテーマである「さらにSREを広めよう」に沿って、SREやKubernetesの未経験者でも理解しやすい実装例やアーキテクチャパターン、参考資料を用意しました。紹介したものは一例であり、これだけが唯一の正解ではありません。また、イベントにおける最初の発表なのでSREについての部分も多めに説明しています。こちら、Xでのポストなのでリポストなどしてもらえれば幸いです。👻SRE Kaigi 2025 にて「Site Reliability Engineering on Kubernetes」というタイトルで登壇します。こちら、資料になります。https://t.co/SLoohm83jy#srekaigi #srekaigi_a— nwiizo (@nwiizo) 2025年1月26日   今回の発表内容は、以下のような幅広いトピックをカバーしています：基本的な概念と実装SREの本質：システムの信頼性を制御する技術としてのSREKubernetesにおけるSRE原則の実践方法Cloud Nativeアプローチによる実装戦略具体的な実装手法包括的な可観測性の実現GitOpsを活用した変更管理の自動化と標準化Progressive Deliveryの実装と運用ノウハウインシデント対応と自動復旧の仕組み化最新ツールの活用事例CloudEventsによるイベント基盤の構築Keptn Lifecycle Toolkitを用いた品質管理Argo Rolloutsによるデプロイメント制御Crossplaneを活用したリソース管理の自動化プラットフォームの発展成熟度モデルに基づく段階的な改善開発者の認知負荷軽減に向けた取り組みデータドリブンな運用改善の実現方法手を動かすオススメハンズオン発表内容をより深く理解し、実践的なスキルを身につけるために、以下のハンズオンをお勧めします：github.comCloud Native Days主催のハンズオン教材です。KubernetesやCloud Nativeツールの基本的な使い方から応用まで、段階的に学べます。実際の運用シナリオに基づいた実践的な内容となっていますgithub.comPlatform Engineering on Kubernetesの実践的なガイドです。本書の著者が作成した、実装例とベストプラクティスを含むリポジトリです。一つ一つのコンポーネントを実際に動かしながら、プラットフォームの構築方法を学べます。これらのハンズオンを通じて、セッションで紹介する概念や技術を実際に試してみることをお勧めします。理論と実践を組み合わせることで、より深い理解と実装スキルを得ることができます。また、これらの教材は常にアップデートされているため、最新のベストプラクティスも学ぶことができます。おわりに本セッションは、かなり雑多な内容を30分に詰め込んだ欲張りな構成となっています。これは、現場によって異なるSREの課題や取り組みを幅広く共有したいという思いを反映したものです。特に強調したい点は以下の3つです：SREは単なるツールの導入ではなく、組織が信頼性を制御するための包括的な取り組みであることKubernetesは優れた基盤を提供するが、適切な設計と運用が必要不可欠であること適切なオープンソースツールを組み合わせることで、本格的なSRE実装が可能になることこのセッションが「さらにSREに関わる技術者の活躍の場を増やす」「さらにSREを理解し、興味を持っていただける技術者を増やす」という本イベントの目標に貢献できれば幸いです。セッションは2025年1月26日 10:35-11:05、ルームAで行われます。SREに関わる技術者の方々はもちろん、SREに興味を持ち始めた方々のご参加もお待ちしています。詳細は公式サイトでご確認いただけます。イベントに関する最新情報は、X（旧Twitter）の @srekaigi で発信されていますので、ぜひフォローしてください。多くの方々とSREについての知見を共有できることを楽しみにしています。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スリーシェイクにおけるOSSの取り組み]]></title>
            <link>https://speakerdeck.com/bells17/surisieikuniokeruossnoqu-rizu-mi</link>
            <guid>https://speakerdeck.com/bells17/surisieikuniokeruossnoqu-rizu-mi</guid>
            <pubDate>Fri, 24 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[3-shake SRE Tech Talk #11 オンサイトの登壇資料です。https://3-shake.connpass.com/event/339212/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[OpenClarityを覗いてみる]]></title>
            <link>https://speakerdeck.com/kojake_300/openclaritywosi-itemiru</link>
            <guid>https://speakerdeck.com/kojake_300/openclaritywosi-itemiru</guid>
            <pubDate>Fri, 24 Jan 2025 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[2025-01-24-SRETT11-OpenTofuについてそろそろ調べてみるか]]></title>
            <link>https://speakerdeck.com/masasuzu/2025-01-24-srett11-opentofunituitesorosorodiao-betemiruka</link>
            <guid>https://speakerdeck.com/masasuzu/2025-01-24-srett11-opentofunituitesorosorodiao-betemiruka</guid>
            <pubDate>Fri, 24 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[OpenTofuについて調べてみた内容SRETT #11 https://3-shake.connpass.com/event/339212/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[論文紹介 ”Long-Context LLMs Meet RAG: Overcoming Challenges for Long Inputs in RAG”]]></title>
            <link>https://speakerdeck.com/shukob/lun-wen-shao-jie-long-context-llms-meet-rag-overcoming-challenges-for-long-inputs-in-rag</link>
            <guid>https://speakerdeck.com/shukob/lun-wen-shao-jie-long-context-llms-meet-rag-overcoming-challenges-for-long-inputs-in-rag</guid>
            <pubDate>Tue, 21 Jan 2025 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[https://genai-users.connpass.com/event/341391/大規模言語モデル（LLM）は、外部の知識源を利用することで、より強力な応答を生成できるようになります（これをRetrieval-Augmented Generation: RAGと呼びます）。LLMが処理できる入力テキストの長さが長くなるにつれて、より多くの関連情報をRAGで与えられるようになり、生成される回答の質が向上することが期待されます。一般的には、取得する情報が多いほど関連情報（高い再現率）も増え、結果として性能が向上すると考えられます。しかし、長文処理LLMにおけるRAGの性能が、取得する情報が増えすぎると逆に低下する現象を明らかにし、その原因が「ハードネガティブ」な情報にあることを示しました。そして、その問題を解決するために、効果的な学習不要および学習を伴うアプローチを提案しています。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[現代システムの三体問題「技術」「組織」「戦略」を巡る戦い - Architecture Modernization の読書感想文]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/01/21/124130</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/01/21/124130</guid>
            <pubDate>Tue, 21 Jan 2025 03:41:30 GMT</pubDate>
            <content:encoded><![CDATA[そう、どこなのか知ったら、世界が一枚の地図みたいに小さくなってしまう。どこなのか知らないほうが、世界を広く感じられる。(引用:三体 黒暗森林〈上〉P152)はじめに「Architecture Modernization」は、一見すると整然と並べられた章立てと体系的な解説を持つアーキテクチャ現代化のガイドブックのように見えます。しかし、その内実は現代のソフトウェア開発が抱える混沌とした課題に真正面から向き合い、そこから組織の持続的な競争力を構築するための、書籍です。本書は、アーキテクチャ現代化を単なる技術的な刷新を超えて、組織全体の変革を必要とする戦略的な取り組みとして位置付けています。それは時として、既存の組織構造や慣習との軋轢を生み出し、チームの価値観や働き方の根本的な見直しを迫ることにもなります。著者はそうした困難な課題に対して、EventStorming、Wardley Mapping、Team Topologiesといった手法を、その本質的な価値を深く理解した上で、実践的な知見と共に提示します。手法それぞれは、世の中で広く知られているものばかりですが、本書の真価は、これらの手法を組織の現代化という大きな文脈の中で有機的に結びつけ、包括的なアプローチを形作っている点にあります。どの章も一つの主題に対する深い考察と実践知に裏打ちされており、表面的な解説で済ませることはありません。それでいて、各章は独立した価値を持ちながら、全体として一つの強力な変革の方法論を形作っています。それは、著者がこの混沌とした現代のソフトウェア開発の課題に対して、明確な指針を示そうとする強い意志の表れでもあるのです。learning.oreilly.com現代化の重要性と課題私たちが直面するソフトウェア開発の課題は、年々複雑さを増しています。そしてシステムの複雑性は今後さらに加速度的に増大するでしょう。2024年に見られた生成AIの急速な進展は、技術革新がもたらす変化の速度と規模を如実に示しています。このような状況下で、レガシーシステムの制約は組織の存続を脅かすリスクとなり得ます。一方で、現代的なアーキテクチャは大きな競争優位性をもたらす可能性があります。新興企業の中には、最新のアーキテクチャを採用することで、わずか数ヶ月で大規模なプラットフォームを構築し、急成長を遂げた例も存在します。クラウドネイティブなアーキテクチャの採用により、市場投入までの時間を大幅に短縮し、迅速な価値提供を実現しているのです。しかし、技術革新それ自体が自動的に社会全体や組織の繁栄をもたらすわけではありません。過去1000年の歴史を振り返ると、技術革新の恩恵は往々にして一部の組織や個人に集中し、広く行き渡らないケースが多かったことがわかります。現代のソフトウェア開発においても、技術革新の成果をいかに組織全体で共有し、持続可能な価値創造につなげていくかという課題に向き合う必要があります。技術革新と不平等の1000年史　上作者:ダロン アセモグル,サイモン ジョンソン早川書房Amazon技術革新と不平等の1000年史　下作者:ダロン アセモグル,サイモン ジョンソン早川書房Amazon本書のアプローチ本書の独自性は、技術的な側面だけでなく、組織とビジネスの文脈でアーキテクチャを捉える包括的な視点にあります。特に重要なのは、Better Value Sooner Safer Happier (BVSSH)という概念を通じて、現代化がもたらす多面的な価値を評価するフレームワークを提供している点です。また、本書はDomain-Driven Design、Event Storming、Wardley Mappingなど、実践で検証された手法を効果的に組み合わせながら、組織の現代化を実現するための具体的なアプローチを提供します。特に注目すべきは、コラボレーティブな手法とチームの自律性を重視する現代的なアプローチが、今日のソフトウェア開発の最前線で求められる実践と整合している点です。読み進めていくと、一見すると「知っている」と思っていた概念や手法であっても、それらが体系的に整理され、より深い文脈の中で位置付けられていることに気づかされます。例えば、EventStormingやDDDといった手法については、多くの開発者が知っているものの、それらを組織の変革やビジネス価値の創出と結びつけて理解している人は少ないかもしれません。本書は、これらの「知っているつもりだった」内容に新しい光を当て、より実践的で戦略的な視点を提供してくれます。特筆すべきは、本書が扱う「技術」「組織」「戦略」の3つの柱のうち、「戦略」には技術戦略だけでなく、ビジネス戦略も深く含まれている点です。アーキテクチャの選択がビジネスモデルや市場での競争優位性にどのように影響するのか、という視点は、技術リーダーが経営層と建設的な対話を行う上で非常に有用です。また、本書の独自性は、技術的なベストプラクティスを単に羅列するのではなく、それらを他の文脈の中で捉え直している点にあります。読者は自身の経験を振り返りながら、「あのとき、こういう視点があれば...」という新しい発見を数多く経験することになるでしょう。以下、各章の分析を通じて、本書が提供する実践的な知見と、その現場での適用方法について詳しく見ていきましょう。Architecture Modernization: Socio-technical alignment of software, strategy, and structure (English Edition)作者:Tune, Nick,Perrin, Jean-GeorgesManningAmazon1 What is architecture modernization?第1章「What is architecture modernization?」は アーキテクチャ現代化の本質的な価値とその戦略的重要性を包括的に論じています。この章を通じて著者は アーキテクチャ現代化が単なる技術刷新ではなく ビジネスの競争優位性を確立するための戦略的な活動であることを具体的な事例とともに示しています。特に現代化への投資を躊躇することで発生する負のスパイラルと その打開策としての進化的アプローチの重要性は 実務者として強く共感できる内容です。ソフトウェアファースト第２版　あらゆるビジネスを一変させる最強戦略作者:及川 卓也日経BPAmazonアーキテクチャ現代化の必要性とリスクアーキテクチャ現代化の重要性は、ある大手航空会社の事例によって象徴的に示されています。2022年に発生した数十年前のスケジューリングシステムの障害は、1万4千便以上のフライトのキャンセルを引き起こし、ブランドに甚大なダメージを与えました。このような重大なインシデントは、時代遅れのレガシーアーキテクチャがビジネスリスクであり、競争上の不利益をもたらすことを如実に示しています。ソフトウェアアーキテクチャの基礎 ―エンジニアリングに基づく体系的アプローチ作者:Mark Richards,Neal FordオライリージャパンAmazon一方で、英国のある自動車販売スタートアップは、サーバーレスなどの現代的なアーキテクチャを採用することで、わずか90日でオンライン中古車販売プラットフォームを構築し、英国で最速のユニコーン企業となりました。この成功は、レガシーの制約がない状態で最新のテクノロジーを活用できることの価値を示しています。両社の対比は、現代的なアーキテクチャがもたらす競争優位性を鮮明に示しています。Figure 1.1 The negative cycle of declining architecture health より引用Figure 1.1は アーキテクチャ現代化への投資を先送りすることで発生する負のスパイラルを示しています。システムの健全性が低下し 現代化のコストが増大することで さらに経営層の投資判断が躊躇われるという悪循環です。この問題の深刻さは Adam TornhillとMarkus Borgの研究「Code Red: The Business Impact of Code Quality」によって定量的に示されています。彼らの調査では システムの技術的負債により開発者の時間の最大42%が無駄になっていると指摘しています。arxiv.orgさらに IoTデバイスの急増に象徴されるように システムの複雑性は年々増大しており この問題は今後さらに深刻化すると予想されます。2019年に86億台だったIoTデバイスは 2030年には300億台近くまで増加すると予測されています。このような複雑性の増大は 古いアーキテクチャの欠点と現代的なアーキテクチャの利点をさらに顕著にすると考えられます。learning.oreilly.comアーキテクチャ現代化の本質と価値創造著者は アーキテクチャの現代化を 社会技術的なアプローチとして捉えることの重要性を強調しています。これは NetflixのCTOであったAdrian Cockroftの言葉に端的に表れています。「四半期ごとのリリースしかできない企業は 日次デプロイメントを実現している競合他社に大きく引き離される」という彼の警告は 現代化の遅れが存在的な脅威となりうることを示しています。Netflixは2009年に モノリシックなアーキテクチャから数百のクラウドベースのマイクロサービスへと移行し オンラインストリーミング市場での競争優位性を確立しました。この事例は 確立された企業であっても適切な現代化戦略によって イノベーションのスピードを加速できることを証明しています。Figure 1.3 Better Value Sooner Safer Happier. (Source: Smart et al., Sooner Safer Happier: Antipatterns and Patterns for Business Agility [Portland, OR: IT Revolution 2020]) より引用Figure 1.3で示されるBetter Value Sooner Safer Happier (BVSSH)モデルは アーキテクチャ現代化が組織にもたらす価値を多面的に表現しています。Betterは品質改善による効率化と手戻りの削減 Valueは収益改善や顧客維持率の向上などのビジネス成果 Soonerは学習と価値提供の迅速化 Saferはガバナンス リスク セキュリティ コンプライアンスの確保 Happierは従業員満足度の向上を表します。このモデルは ステークホルダーのニーズをバランスよく考慮し 現代化の効果を包括的に評価するフレームワークとして機能します。独立した価値ストリームの重要性アーキテクチャ現代化の核となる概念が 独立した価値ストリーム (IVS) です。Figure 1.5は IVSの4つの主要特性を示しています。ドメイン整合性は特定のビジネスサブドメインとの整合 成果志向はビジネス成果への貢献 チームの権限委譲はプロダクトと技術の意思決定の自律性 ソフトウェアの疎結合は独立した開発・デプロイの実現を意味します。これらの特性が重要である理由は BVSSHの実現に直結するためです。適切なドメイン境界の設定は ビジネスにおける結合度を低減し 関連する概念をグループ化します。これにより ソフトウェアとチーム間の依存関係が減少し チーム間の調整や待ち時間が最小化されます。結果として 新機能の開発がより迅速になります。成果志向のアプローチは より良い価値の創出につながります。著名なプロダクトマネジメントの専門家であるMarty Caganが指摘するように「エンジニアをコーディングだけに使っているなら その価値の半分しか活用できていない」のです。チームにチューニングされた要件を与えるのではなく 達成すべき成果を示し 解決策の発見を委ねることで エンジニアの創造的な才能を最大限に引き出すことができます。著者は IVSを実現するための重要な手法として EventStorming を提唱しています。Figure 1.7は ドメインエキスパート 開発者 プロダクトマネージャー UXスペシャリストなど多様な関係者が協力してドメイン境界を特定するプロセスを示しています。このコラボレーティブなアプローチは 従来の中央集権的なアーキテクチャ設計からの大きな転換を意味します。多様な参加者の知見を活用することで より質の高いドメイン境界の特定が可能になります。進化的なアプローチとポートフォリオ思考アーキテクチャ現代化は 数年にわたる長期的な取り組みですが 著者は ポートフォリオ駆動の進化的アプローチを提唱しています。これは 現代化を単なる古いシステムの書き換えとしてではなく UX 製品機能、ビジネスプロセス、ドメインモデルを根本的に見直す機会として捉える考え方です。Figure 1.10 Identifying the optimal modernization return on investment per subdomain with the Modernization Strategy Selector より引用Figure 1.10で示される現代化戦略セレクターは 各サブドメインに対する最適な現代化投資を特定し 優先順位付けを行うためのツールです。すべてのサブドメインで同じレベルの投資が必要なわけではなく むしろそれは最高価値の現代化機会の実現を遅らせる原因となります。このツールは 各領域の特性に応じて適切な戦略を選択することを可能にします。Figure 1.11 Architecture modernization is parallel streams of work (not phases) supported by continuous learning and upskilling. より引用著者は 現代化を【発見】【設計】【実装】の3つの並行ストリームとして捉えることを提案しています。Figure 1.11は これらのストリームが相互に影響を与えながら継続的に進化していく様子を示しています。この並行性こそが進化的アプローチを可能にする要因です。あるストリームでの発見が次の四半期の実装に影響を与え 実装での学びが次の設計に反映されるという具合です。特に 継続的な学習とスキル向上を現代化の基盤として位置付けている点は注目に値します。これは チームが新しい考え方や手法を習得し 実践する時間と機会を確保することの重要性を示しています。学習と実践の機会が不足すると 古い思考パターンのまま新しいアーキテクチャを設計してしまい その欠陥が引き継がれるリスクがあります。著者は この進化的なアプローチを支援するために Architecture Modernization Enabling Team (AMET) の設置を推奨しています。AMETは従来のアーキテクチャチームとは異なり 意思決定を行うのではなく 他のチームを支援し 現代化の持続的な改善を促進する役割を担います。これは 現代化のモメンタムを維持し 現代化終了後も持続可能な改善を実現するための重要な施策です。まとめ第1章は アーキテクチャ現代化を包括的な視点で捉え その本質と実践的なアプローチを示しています。とある組織の対比を通じて現代化の重要性を示し BVSSHモデルによって現代化の多面的な価値を明確化しています。IVSという概念を通じて現代化を実現するための具体的な方法論を提供し 進化的アプローチとポートフォリオ思考の重要性を強調することで 現代化を持続可能な取り組みとして位置付けています。本章は 現代のソフトウェア開発組織がアーキテクチャ現代化に取り組む際の 実践的かつ戦略的なガイドラインを提供していると評価できます。アーキテクチャ現代化が 技術的な刷新を超えて 組織の競争力を根本的に強化する戦略的な取り組みであることを 説得力をもって示している点は 特に印象的です。また コラボレーティブな手法とチームの自律性を重視する現代的なアプローチは 今日のソフトウェア開発の最前線で求められる実践と整合しています。2 Preparing for the journey第2章「Preparing for the journey」は アーキテクチャ現代化の旅を始める前に考慮すべき重要な準備と課題について包括的に論じています。著者は 組織の準備状況の評価から新しいアーキテクチャ思考の導入 そしてリーダーシップの重要性に至るまで 現代化への取り組みを成功に導くための具体的なガイダンスを提供しています。リーダーシップの準備著者は まず リーダーシップの準備状況 を評価することの重要性を強調しています。新機能の開発を一時的に減速させてまで現代化に投資する覚悟 レガシーシステムの複雑さと変更の困難さの理解 予期せぬ遅延やコスト増加への対応 資金調達モデルや優先順位付けプロセスの変更への準備など リーダーシップチームが直面する重要な課題を詳細に説明しています。特に重要なのは 学習と能力開発への投資です。著者は 現代化が一時的なワークショップやトレーニングコースではなく 継続的な財務的・時間的投資を必要とすることを強調しています。これは 必要なスキルを持つ人材を大量に雇用することでも解決できない問題です。新しい従業員は会社のドメイン システム 文化を学ぶ必要があり それには数ヶ月を要します。スタッフエンジニア　マネジメントを超えるリーダーシップ作者:Will Larson日経BPAmazon新しいアーキテクチャ思考の導入著者は コンウェイの法則 の重要性を強調しています。システムの設計は それを設計・構築する組織のコミュニケーション構造を反映するという原則です。Figure 2.1は 緩やかに結合されたドメイン境界が緩やかに結合されたソフトウェアアーキテクチャを可能にすることを示しています。これは チームが単一のビジネスサブドメインに整合した単一のコードベースで作業できることを意味します。Figure 2.1 Fast flow requires loosely coupled software architecture, which requires loosely coupled domains. より引用コラボレーティブなアーキテクチャ実践の採用も重要な課題です。著者は イベントストーミングなどの現代的な手法を早期に導入し その受け入れ状況を理解することを推奨しています。これらの手法は 伝統的なトップダウンのアプローチとは大きく異なり あらゆる分野の関係者が協力してドメイン境界を特定し 最適なソリューションを選択します。銀の弾丸及び金槌への警告著者は 「ボルトオン現代化」への警告を発しています。これは 根本的なアーキテクチャ上の課題に取り組まず システムの表面的な部分だけを変更するアプローチです。著者は政府サービスの構築での経験を引用し レガシーシステムやデータベースとの統合が残されたままでは 真の改善が実現できないことを示しています。情報を正しく選択するための認知バイアス事典作者:情報文化研究所フォレスト出版Amazon同様に 構造とプロセスの誤謬にも注意を促しています。組織構造の変更や新しいプロセスの採用だけでは 深い変化なしには大きな改善は望めません。チームワークの促進 製品決定の権限委譲 ビジネス・IT間の壁の解消 資金調達モデルの変更 技術品質への投資など 包括的な変更が必要です。ICEの事例から学ぶ成功要因著者は ICEの現代化事例を通じて 実践的な成功要因を示しています。ICEは ドメイン駆動設計とEventStormingを活用してドメインを理解し ストラングラーパターンを用いた段階的な移行を計画しました。その結果 データ取り込み処理時間の80%削減 新規サービスプロバイダーのオンボーディング時間の大幅短縮 マッチング生産性の5倍向上など 顕著な成果を達成しました。www.iceservices.com重要なのは この成功が技術的な側面だけでなく 社会的な側面への取り組みによって実現されたことです。チームの権限委譲 クロスファンクショナルな協力 製品中心の資金調達モデルへの移行など 組織的な変革が成功の鍵となりました。リーダーシップの多層的な展開最後に著者は あらゆるレベルでのリーダーシップの重要性を強調しています。ビジネス戦略の理解と貢献 現代化戦略の定義 アーキテクチャの設計と進化 組織構造の確立 ビジョンと進捗の伝達など 現代化のリーダーには多くの責任があります。これらの責任は単一のスーパーヒーローや小グループだけでは担えません。著者は Architecture Modernization Enabling Team (AMET) の設置を提案し リーダーシップの育成と支援の具体的な方法を示しています。AMETは 組織全体の現代化能力を高め 持続的な改善を確立することに焦点を当てます。リーダーの仮面――「いちプレーヤー」から「マネジャー」に頭を切り替える思考法作者:安藤 広大ダイヤモンド社Amazonまとめ第2章は 現代化の旅を成功に導くための準備と課題を包括的に論じています。リーダーシップの準備、新しいアーキテクチャ思考の導入、銀の弾丸への警告 そして多層的なリーダーシップの重要性という4つの主要な側面から 具体的なガイダンスを提供しています。特に印象的なのは ICEの事例を通じて これらの原則が実践でどのように機能するかを示している点です。現代化は技術的な変革を超えた組織全体の取り組みであり その成功には包括的な準備と持続的な支援が不可欠であることを 説得力を持って論じています。3 Business objectives第3章「Business objectives」は アーキテクチャ現代化の投資判断とビジネス成果の関係性について包括的に論じています。本章を通じて著者は 設計の選択がビジネスの競争優位性と成長戦略にどのように影響するかを 具体的な事例とともに示しています。この章で議論されている「アーキテクチャ現代化の投資判断とビジネス成果の関係性」は、日本のIT業界ではあまり明示的に語られてこなかった文脈です。日本では技術的負債の解消や保守性の向上といった技術的な観点からの議論が中心で、ビジネスの競争優位性や成長戦略との結びつけは比較的最近になって注目され始めた領域と言えます。日本だとこの本を思い出した。みずほ銀行システム統合、苦闘の19年史　史上最大のITプロジェクト「3度目の正直」作者:日経コンピュータ,山端 宏実,岡部 一詩,中田 敦,大和田 尚孝,谷島 宣之日経BPAmazonビジネス観点からの現代化の必要性著者は現代化投資の判断基準として7つのビジネスシナリオを提示しています。市場におけるスピード競争の激化への対応や ビジネス成長の阻害要因の解消 出口戦略の実現など 経営視点に立った明確な指標が示されています。特に印象的なのは より速く動く競合他社への対応に関する指摘です。成功体験による慣性が イノベーションへの意欲を低下させる一方で 新規参入者は最新技術とアプローチを活用し 大胆なリスクテイクが可能です。この非対称性が大企業にとって脅威となることを著者は警告しています。戦略の要諦 (日本経済新聞出版)作者:リチャード・Ｐ・ルメルト日経BPAmazon金融サービス企業の事例では この課題が具体的に示されています。市場リーダーだった同社は セキュリティと安定性を重視するあまり リスクを回避する文化が定着していました。しかし 新興企業の参入により 優れたユーザー体験を持つサービスが登場し 市場シェアを脅かされる事態となりました。最終的に同社は新CTOを迎え 現代化への投資を決断しましたが その過程では多くの組織的な課題に直面しています。著者は 一度成功した企業が陥りやすい罠も指摘しています。成功体験による慣性は イノベーションへのモチベーションを低下させ 結果として技術的負債の蓄積を加速させます。これは 技術的負債の負のスパイラルと呼ぶべき状況を生み出します。一方で OpenTableの事例は この課題に対する前向きな取り組みを示しています。同社は競合の脅威を早期に認識し 全面的な現代化投資を実行することで 開発生産性の大幅な向上を実現しました。www.opentable.comUXと内部プロセスの現代化著者は 現代化の必要性がユーザー体験にも直結することを指摘しています。特に重要なのは 信頼性の欠如がブランドに与えるダメージです。レンタカー予約システムの事例では 技術的な問題が原因で同じ予約が3回重複して行われ 顧客の信頼を大きく損なう結果となりました。内部システムの非効率性も深刻な課題です。従業員が複数のレガシーシステムを使い分けざるを得ない状況は 業務効率の低下だけでなく 従業員の満足度にも悪影響を及ぼします。さらに 新規採用した従業員の教育コストも増大し 組織の成長を阻害する要因となります。成長戦略と現代化の関係性著者はマトリクスを用いて 4つの成長戦略と現代化の関係性を整理しています。既存市場での新製品開発では 共有機能の抽出とシステム統合が重要な課題となります。欧州の海洋機器メーカーの事例は この課題を端的に示しています。同社はIoTプラットフォームの開発を目指しましたが レガシーシステムの制約により 目標とする処理性能を達成できない事態に陥りました。既存製品での市場浸透では システムの最適化と運用コスト削減が焦点となります。ラテンアメリカのチャレンジャーバンクの事例は この視点からの現代化を示しています。同社は優れたUXにより市場での地位を確立しましたが 事業の拡大に伴いカスタマーサポートのコストが線形に増加する課題に直面しました。現代化は この課題を解決するための戦略的な投資として位置づけられています。戦略的指標としてのノーススター著者は戦略目標を表す指標として ノーススターメトリクス(NSM)の活用を提案しています。NSMは顧客への本質的な価値を表現し 組織の戦略と整合する数値目標です。これは単なる技術指標ではなく ビジネス成果と直結した指標である必要があります。Figure 3.2 Amplitude’s north star framework より引用Figure 3.2は Amplitudeのノーススターフレームワークを示しています。このフレームワークは インプットメトリクスからノーススターメトリクスを経て ビジネス成果に至る価値の流れを可視化します。これにより 現代化の取り組みと事業価値の関係を明確にすることが可能となります。DanseBank社の事例では このフレームワークを活用して PSD2対応の本質的な価値を「取引履歴に基づく迅速な与信判断」と定義しています。同社はエンジニアを含む横断的なチームで エンパシーマップを活用した顧客理解を進め 規制対応という表面的な目標を超えて 顧客価値の創造という本質的な目標を見出すことに成功しています。M&Aと現代化の課題現代化の文脈で特に重要なのが M&Aへの対応です。Salesforceの事例は この課題を端的に示しています。同社はSlackやGitHubなど 複数の大規模な買収を実行していますが それぞれの企業が異なる技術スタックとインフラを持つため システム統合に大きな課題を抱えています。このような状況では ドメイン境界の再定義が重要な課題となります。単なるシステム統合を超えて 製品やドメインの本質的な再定義が必要となるケースも少なくありません。これは技術的な課題であると同時に 組織的な挑戦でもあります。出口戦略としての現代化著者は 出口戦略を目指す企業における現代化の特殊性も指摘しています。IPOや買収を目指す企業では 2-3年という限られた時間軸での投資判断が求められます。この場合 長期的な技術的負債の解消よりも 短期的な価値の創出が優先される傾向があります。しかし著者は このアプローチにも一定の合理性があることを認めています。投資の時間軸を明確にすることで 優先順位の設定が容易になり より効果的な現代化が可能になる場合もあります。重要なのは 短期的な価値創出と長期的な技術的健全性のバランスを適切に取ることです。まとめ本章は 現代化への投資判断をビジネスの文脈で捉え 具体的な評価基準と実践方法を提示しています。特に ノーススターメトリクスの活用は 技術的な取り組みとビジネス成果を結びつける効果的な手法として注目に値します。また各種事例は 現代化が組織全体の変革として成功するための具体的なアプローチを示しています。著者の主張の本質は アーキテクチャ現代化を単なる技術刷新ではなく 組織の戦略的な変革として捉える点にあります。その成功には ビジネス戦略との整合性 投資判断の明確な基準 そして組織全体での価値共有が不可欠です。特に重要なのは 現場のエンジニアが顧客価値を深く理解し その実現に向けて主体的に取り組める環境の構築です。DanseBank社のエンパシーマップの活用は この理想的な姿を具体的に示しています。読者は 本章を通じて アーキテクチャ現代化を戦略的な投資として位置づけ その判断基準と実践方法を学ぶことができます。特に 技術的な観点とビジネス的な観点を結びつける具体的な手法は 実務での活用価値が高いと考えられます。今日のソフトウェア開発組織において アーキテクチャ現代化は避けて通れない課題となっています。本章は その取り組みを成功に導くための実践的なガイドラインを提供しているといえるでしょう。4 Listening and mapping tours第4章「Listening and mapping tours」は アーキテクチャ現代化の始め方に焦点を当てています。著者は まず聞くこと（listening）から始めるという基本姿勢を強調し その実践的なアプローチを提示しています。この章を通じて 組織全体の状況を把握し 実行可能な現代化戦略を策定するための体系的な手法が示されています。この構成は、アーキテクチャ現代化が本質的に技術的な課題である以上に、人々の協力と理解を必要とする社会的な取り組みであることを示唆しています。技術的な解決策がいかに優れていても、それを実現する人々の協力が得られなければ、現代化の取り組みは成功しないという現実を反映しています。「変化を嫌う人」を動かす:魅力的な提案が受け入れられない4つの理由作者:ロレン・ノードグレン,デイヴィッド・ションタル,船木 謙一(監修)草思社Amazonリスニングツアーの本質と準備著者は アーキテクチャ現代化の開始時に陥りがちな罠を指摘しています。多くの組織では 事前に用意した解決策を提案し その説得に注力しがちです。しかし このアプローチは組織の実態を十分に理解しないまま 表面的な解決策に走るリスクがあります。著者は この罠を回避するために リスニングツアーという手法を提案しています。リスニングツアーは 経営層から現場の開発者まで幅広い関係者と対話を行い 組織の課題と可能性を深く理解するプロセスです。特に重要なのは 単なるヒアリングではなく 関係者との信頼関係を構築し 組織の本質的な課題を浮き彫りにする点です。リスニングツアーの実施主体として 著者は AMET（Architecture Modernization Enabling Team）の設置を推奨しています。AMETは 技術とビジネスの両方を理解するメンバーで構成され 現代化のビジョン策定から実行支援までを担います。特に重要なのは チーム内で得られた知見を共有し 一貫した理解を構築する能力です。効果的なリスニングの実践リスニングツアーの成功には いくつかの重要な要素があります。最も基本的なのは 安全な対話の場の創出です。著者は 威圧的な空間ではなく 自由な対話が可能な環境づくりの重要性を説いています。これは カジュアルな場所の選択や 適切なタイミングの設定など 細かな配慮の積み重ねによって実現されます。同様に重要なのが 質問のデザインです。著者は 直接的な質問だけでなく より深い洞察を引き出すための多様な質問形式を提案しています。例えば「Complete the sentence（文章の完成）」では「私の仕事で現在最も腹が立つことは_____です」といった形式で 感情的な側面も含めた本音を引き出すことができます。問いの編集力 思考の「はじまり」を探究する作者:安藤昭子ディスカヴァー・トゥエンティワンAmazonまた「Choose an emotion（感情の選択）」では 感情のホイールから特定のトピックに対する感情を選ぶことで より深い理解を促進します。「Pick an image（画像の選択）」では 視覚的な表現を通じて 言葉では表現しにくい認識や感覚を共有することが可能になります。ツールボックスの活用効果的なリスニングツアーには 適切なツールの活用も重要です。著者は Impact Mappingを用いてビジネス目標とその実現手段の関係を可視化することを提案しています。これにより 戦略的な優先順位付けと 具体的な施策の選定が容易になります。Figure 4.4 A C4 container diagram with multiple risks identified より引用Risk Stormingは システムのリスクを特定し評価するための効果的なツールです。C4モデルをベースに システムの構造とリスクの関係を可視化することで 技術的な課題とビジネスインパクトの関連をより明確に理解できます。各リスクは 発生確率とインパクトの観点から評価され 優先度付けが行われます。グループワークショップと組織的な展開個別の対話に加えて 著者は グループワークショップの重要性も強調しています。臨床腫瘍学分野の非営利組織の事例では 参加者が自身のモダナイゼーションジャーニーを選択できるようなワークショップを設計しています。この中で ダブルダイヤモンドやデザインスクィグルといったモデルが活用され 参加者の主体的な関与を促進しています。特に興味深いのは ワークショップの段階的なアプローチです。最初にジャーニーのメタファーを選択し 次にドメインの境界を探索し 最後に具体的なアクションを計画するという流れは 参加者の理解と合意を段階的に構築する効果があります。キックスターターワークショップの実践現代化の実行フェーズへの移行には 3日間のキックスターターワークショップが効果的です。スカンジナビアの大規模企業の事例では このワークショップを通じて モノリシックなシステムからの段階的な移行戦略を策定しています。ワークショップの成功には 事前の準備が重要です。第1日目は ビジネスビジョンの共有と現状の分析に充てられ 第2日目は ドメインの探索とEventStormingによるプロセスの理解 第3日目は具体的なアーキテクチャ設計と実行計画の策定に焦点を当てます。この段階的なアプローチにより 参加者全員が共通の理解を持ちながら 具体的な行動計画を策定することが可能になります。ドメイン駆動設計をはじめよう ―ソフトウェアの実装と事業戦略を結びつける実践技法作者:Vlad KhononovオライリージャパンAmazon継続的な改善と展開著者は ワークショップの成果を継続的な改善につなげる重要性も強調しています。キックスターターワークショップで得られた勢いを維持するために AMETが重要な役割を果たします。AMETは 単なる技術支援チームではなく 組織の現代化能力を継続的に向上させるためのファシリテーターとして機能します。また 定期的なフィードバックと振り返りの機会を設けることで 現代化の取り組みを継続的に改善することが重要です。これには アンケートやフォローアップセッションの活用が効果的です。著者は これらのフィードバックを通じて 組織全体の学習と進化を促進することを推奨しています。まとめ本章は アーキテクチャ現代化の開始フェーズにおける実践的なアプローチを提示しています。特に重要なのは 聞くことから始めるという基本姿勢です。これは 単なるヒアリングを超えて 組織の本質的な課題と可能性を理解するための戦略的なアプローチです。著者が提案する手法は 理論的な枠組みと実践的なツールの巧みな組み合わせによって特徴づけられます。リスニングツアー グループワークショップ キックスターターワークショップという段階的なアプローチは 組織の現状を深く理解し 実行可能な現代化戦略を策定する上で効果的なフレームワークを提供しています。これらの手法の成功には 適切な環境作りと継続的なサポート体制が不可欠です。AMETの設置はその一つの解決策ですが より本質的には 組織全体が現代化の重要性を理解し その実現に向けて協力する体制を構築することが求められます。アーキテクトとして この組織的な側面への理解と対応が 現代化の成功に不可欠な要素といえるでしょう。5 Wardley Mapping第5章「Wardley Mapping」は ビジネス戦略とアーキテクチャ戦略を結びつけるための実践的なフレームワークとして Wardley Mappingを紹介しています。この章を通じて 著者はビジネスランドスケープの可視化と進化の理解が アーキテクチャ現代化の意思決定において重要な役割を果たすことを示しています。learnwardleymapping.com日本だと「Wardley Mapping」はあまり聞き馴染みのない言葉だと思います。実践例みたいなのもあまり聞いたことがありませんでした。blog-smatsuzaki.hatenablog.comengineer.crowdworks.jp戦略的思考とWardley MappingWardley Mappingは 単なる可視化ツールを超えて ビジネスとテクノロジーの戦略的統合を実現する手法です。この手法の特徴は バリューチェーンと進化という2つの軸で ビジネスランドスケープを表現する点にあります。これは従来の2x2マトリックスのような静的なフレームワークとは一線を画します。著者は 戦略サイクルという概念を用いて その実践プロセスを説明しています。このサイクルは 目的 ランドスケープ 気候 ドクトリン リーダーシップの5つのフェーズで構成されます。Figure 5.1は このサイクルの相互関係を示しています。特に重要なのは このサイクルが単なる一方向のプロセスではなく 継続的な学習と適応のループとして機能する点です。Figure 5.1 The Strategy Cycle (Source: Simon Wardley) より引用ただし 戦略サイクルは単なるプロセスモデルではありません。このフレームワークは 組織がどのように戦略を実践し 学習し 適応していくかという包括的な視点を提供します。例えば 目的の定義では 単なるミッションステートメントの作成を超えて 組織の存在意義と未来への展望を深く掘り下げることが求められます。マッピングの実践Wardley Mapの作成プロセスは 6つのステップで構成されます。まず目的を定義し スコープを設定し ユーザーを特定します。次にユーザーニーズを明確にし バリューチェーンを構築し 最後に各コンポーネントの進化段階を評価します。Ben MosiorのWardley Mapping Canvasは この一連のステップをガイドする効果的なツールです。特に重要なのは スコープの設定です。マッピングの範囲を適切に定義することで 意味のある議論と洞察が可能になります。スコープが広すぎると表面的な分析に終わり 狭すぎると重要な関係性を見落とす可能性があります。著者は この判断をサポートするための具体的な指針を提供しています。実際のマッピングでは オンラインフードデリバリー企業の例を用いて具体的な適用方法が示されています。このケースでは レストランと顧客をつなぐマルチサイドプラットフォームのビジネスモデルに焦点を当てています。段階的なマッピングプロセスを視覚的に示しています。この事例で特に注目すべきは バリューチェーンの構築プロセスです。コンポーネント間の依存関係を可視化することで 技術的な選択がビジネス価値にどのように影響するかが明確になります。例えば クラウドプラットフォームのような基盤的なコンポーネントが いかに上位のサービスの可能性を規定するかが理解できます。進化の理解と評価Wardley Mappingにおける進化の概念は 単なる技術的な成熟度を超えた意味を持ちます。Genesis Custom Built Product Commodityという4つのステージは それぞれ異なる特性と戦略的意味を持ちます。著者は この評価を支援するための15の基準を提示しています。例えば Ubiquity（普及度）とCertainty（確実性）は 進化段階を評価する重要な特性です。さらに 市場の成熟度やユーザーの認識など 12の一般的な特性も評価の基準として提示されています。これらの基準を用いた評価は 必ずしも一意的な結果をもたらすわけではありません。むしろ 異なる視点からの評価結果の違いが 重要な戦略的議論のきっかけとなります。著者は この曖昧性を否定的に捉えるのではなく 組織の学習機会として活用することを推奨しています。気候変動の理解と対応著者は 競争環境の変化を「気候」として捉え その重要性を強調しています。特に すべては進化するという原則は 戦略策定の基本的な前提となります。この原則は 単なる観察結果ではなく 戦略的な対応を要求する動的な状況を示しています。特に重要なのは コンポーネントの共進化という概念です。技術やビジネスモデルは単独で進化するのではなく 相互に影響を与えながら進化します。例えば リモートワークの普及は Zoom SlackなどのコラボレーションツールとWi-Fi接続性の進化が組み合わさることで可能になりました。戦略的対応のパターン著者は 環境変化への対応として アクセラレーターとデセラレーターという2つのパターンを提示しています。アクセラレーターには オープンソース化やネットワーク効果の活用が含まれます。一方 デセラレーターには 知的財産権の保護やFUDの活用があります。特に注目すべきは オープンアプローチの戦略的活用です。著者は GoogleやMicrosoftの事例を引用し オープンソース化が競争優位性の獲得につながる可能性を示しています。例えば TensorFlowのオープンソース化は 機械学習の分野でGoogleの影響力を強化することに貢献しました。組織的な実践への示唆Wardley Mappingの実践では 技術的な側面だけでなく 組織的な側面も重要です。特に チーム間のコラボレーションと共通言語としてのマッピングが重要な役割を果たします。著者は AMETなどの組織的な枠組みの活用も提案しています。この手法の導入には 段階的なアプローチが有効です。著者は まずキーとなるステークホルダーとの小規模なマッピングセッションから始め 徐々に範囲を拡大していくことを推奨しています。これにより 組織全体での理解と受容が促進されます。まとめWardley Mappingは アーキテクチャ現代化の文脈で 特に重要な3つの価値を提供します。第一に ビジネスとテクノロジーの統合的な理解を促進します。第二に 進化という視点を通じて 長期的な戦略立案を支援します。第三に 具体的な意思決定のフレームワークを提供します。本章で示された手法は 特にアーキテクチャの意思決定において実践的な価値があります。技術選択やシステム構造の決定を ビジネス戦略との整合性を保ちながら行うことが可能になります。さらに 継続的な環境変化に対応する能力も強化されます。アーキテクトとして この手法を活用する際は 単なる技術マッピングに終始せず ビジネス価値との結びつきを常に意識することが重要です。また 組織全体での共通言語としてWardley Mappingを活用することで より効果的な戦略的対話が可能になるでしょう。最後に 著者は この手法の習得には継続的な実践が不可欠であることを強調しています。理論的な理解だけでなく 実際のビジネス課題への適用を通じて その効果的な活用方法を学んでいく必要があります。特に 気候変動の理解と戦略的対応のパターンは 実践を通じて深い理解が得られる領域といえるでしょう。6 Product taxonomy第6章「Product taxonomy」は アーキテクチャ現代化の基盤となる製品分類の枠組みを提示しています。タクソノミー（taxonomy）とは もともと生物学で用いられる分類体系のことで 生物をその特徴によって分類し 体系化する方法を指します。この考え方をソフトウェア開発組織に適用したのが プロダクトタクソノミーです。著者は この枠組みを通じて 組織構造とアーキテクチャの整合性を実現するための具体的なアプローチを示しています。プロダクトマネジメントのすべて 事業戦略・IT開発・UXデザイン・マーケティングからチーム・組織運営まで作者:及川 卓也,小城 久美子,曽根原 春樹翔泳社Amazonタクソノミーの意義と基本概念プロダクトタクソノミーは 組織のアーキテクチャを製品視点で体系化するためのフレームワークです。従来の組織構造やシステム構成が必ずしも効率的な開発を実現できていない現状に対して タクソノミーという視点で再構築することで より効果的な組織とアーキテクチャの形を見出すことができます。特に重要なのは タクソノミーがただの分類ではなく 価値提供の単位を定義する点です。これは 単なる技術的な構造化ではなく ビジネス価値の創出を中心に据えた組織設計を可能にします。実際の適用では 既存の組織構造や技術的な制約との調整が必要になりますが タクソノミーという視点があることで より戦略的な判断が可能になります。独立した価値ストリームプロダクトタクソノミーの核となるのが 独立した価値ストリームという概念です。著者は Figure 6.1と6.2を用いて この概念を説明しています。価値ストリームは ユーザーニーズの特定から解決策の提供まで 一連の開発活動を表します。Figure 6.1 The high-level activities in an independent value stream より引用Figure 6.2 The four key characteristics of an independent value stream より引用価値ストリームの独立性を実現するには 4つの重要な特性が必要です。1つ目は ビジネスサブドメインとの整合性です。これは 特定のビジネス領域に焦点を当てることで 明確な価値提供を可能にします。2つ目は 明確なビジネス成果への焦点です。具体的な成果指標を持つことで チームの方向性が明確になります。3つ目は 自律的なチームによる所有権です。チームが自律的に意思決定できることで 開発のスピードと質が向上します。4つ目は デカップルされたソフトウェアアーキテクチャです。技術的な独立性が チームの自律性を支えます。スコープとドメインの階層構造著者は Ruth MalanとDana Bredemeyerのアーキテクチャスコープレベルを参照しながら 組織の階層構造に応じた3つのスコープレベルを定義しています。スコープ1は 単一のチームが所有する小規模なドメイン スコープ2は 複数のチームが必要な中規模なドメイン スコープ3は さらに大きな組織的な複雑さを持つドメインを表します。この階層構造は 組織の規模や複雑さに応じた適切な分類を可能にします。例えば 小規模な組織では スコープ1と2で十分かもしれません。一方で Salesforceのような大規模組織では より多くのスコープレベルが必要になることもあります。ドメインとプロダクトの関係性ドメインは 関連するサブドメインをグループ化したものです。Figure 6.3の例では fulfillmentドメインが availability last mile warehousing logisticsという4つのサブドメインで構成されています。各サブドメインは独立した価値ストリームを持ち それぞれが特定の業務機能に焦点を当てています。プロダクトは より広い概念として定義されています。著者は Melissa Perriの定義を引用し プロダクトを「市場に提供可能な 繰り返し可能なソリューションで 特定のニーズや要求を満たすもの」と定義しています。この定義の重要な点は プロダクトが単なる機能の集合ではなく 顧客への完全な価値提供を実現する単位だという点です。プラットフォームの戦略的活用プラットフォームは 複数のプロダクトで共有される機能を提供する重要な要素です。著者は ドメインプラットフォームと内部開発プラットフォームの2種類を定義しています。Figure 6.6は これらの関係性を視覚的に示しています。Figure 6.6 Platforms provide reuse across multiple products より引用ドメインプラットフォームは ビジネスドメインに関連する共有機能を提供します。例えば 予約システムや認証システムなどが該当します。一方 内部開発プラットフォームは チームの開発活動を支援する機能を提供します。CI/CDパイプラインやモニタリングツールなどがこれにあたります。NAVの事例は プラットフォーム戦略の実践を示す良い例です。ノルウェーの行政機関であるNAVは 内部開発プラットフォームを複数のサブプラットフォームに分解することで スケーラビリティの課題に対応しています。特に重要なのは プラットフォームをプロダクトとして扱う「Platform as a Product」というアプローチです。これにより 利用者であるチームのニーズに適切に対応できる体制を維持しています。タクソノミーの設計と進化プロダクトタクソノミーの設計には、いくつかの重要な原則があります。これらの原則は、組織の現状を踏まえながら、段階的に理想的な状態へと進化させていくためのガイドラインとなります。第一の原則：容易な部分からの段階的アプローチまず重要なのは、容易な部分から始めることです。既存の製品ラインナップを整理・分類することから着手し、現在の組織構造を出発点として活用します。特に、チームが理解しやすい領域から取り組みを開始し、小さな成功を積み重ねて徐々に範囲を拡大していくことが効果的です。このアプローチにより、組織全体の理解と受容を促進しながら、段階的な改善を進めることができます。第二の原則：適切な技術・手法の活用効果的なタクソノミー設計には、状況に応じた適切な手法の選択が重要です。EventStormingはドメインの理解と境界の特定に、Wardley Mappingは価値連鎖と進化の段階の可視化に効果的です。さらにドメインストーリーテリングは具体的なユースケースの理解を深め、インパクトマッピングはビジネス目標との整合性を確認するのに役立ちます。これらの手法を組み合わせることで、表面的な理解を超えた深い洞察を得ることができます。第三の原則：継続的な進化の実践タクソノミーは静的なものではなく、継続的に進化させる必要があります。現状のアーキテクチャと目標とする価値ストリームの差異を定期的に評価し、四半期ごとのタクソノミー見直しと更新を実施することが求められます。ビジネス環境の変化や新たな要件への適応も重要な要素です。特に重要なのは、不整合の特定から始まり、段階的な改善を経て、定期的な評価とフィードバックの収集までの一連のプロセスです。現状と目標のギャップを明確にし、優先順位付けされた課題に取り組み、進捗を確認しながら方向性を調整していきます。このような継続的な改善サイクルを通じて、組織の成長と技術の進化に適応したタクソノミーを維持することができます。実践のためのガイドライン効果的な実践のためには、定期的なレビューセッションの開催が重要です。ステークホルダーからのフィードバックを収集し、成功事例と課題を文書化します。さらに、学習した内容を組織全体で共有することで、タクソノミーを組織の実態に即した、実用的なツールとして育てていくことができます。このような体系的なアプローチにより、タクソノミーは単なる分類システムを超えて、組織の変革と成長を支える重要な基盤となります。継続的な改善と適応を通じて、組織全体の効果的な進化を支援する枠組みとして機能していくのです。ソフトウェアアーキテクトのための意思決定術　リーダーシップ／技術／プロダクトマネジメントの活用作者:Srinath Perera,島田 浩二インプレスAmazonマクロレベルの戦略的課題マクロレベルでの重要な課題として 再利用の戦略があります。Figure 6.12は この課題を視覚的に表現しています。特に グローバル企業において 各地域市場で機能を複製するか 中央集権的なプラットフォームを構築するかという選択は 重要な戦略的決定となります。この選択には いくつかの重要な考慮点があります。ユーザー体験の一貫性 優先順位付けの方法 資金モデル 依存関係の管理 効率性と市場投入速度のバランスなどです。これらの要素を総合的に評価し 組織に適した戦略を選択する必要があります。Stripeの事例は この課題への実践的なアプローチを示しています。同社は Treasury機能の開発において 最初は独立した実装を行い 市場での検証後に既存のインフラストラクチャへの統合を進めました。このアプローチは 短期的な市場投入速度と長期的な効率性のバランスを取る良い例といえます。プロダクトモードへの移行従来のプロジェクトモードが スコープ コスト 期間の制約のもとで一時的なチームが成果を出すのに対し プロダクトモードは 長期的な継続的改善にフォーカスし 安定したチームによる自律的な開発を重視します。この移行は 単なる開発プロセスの変更ではありません。資金モデル チームの責任範囲 成功の定義など 組織全体の文化とマインドセットの変革が必要です。著者は この変革が一夜にして達成されるものではないと指摘しつつ その実現がアーキテクチャ現代化の成功には不可欠だと主張しています。まとめプロダクトタクソノミーは アーキテクチャ現代化を実現するための戦略的なフレームワークです。その核となる価値ストリームの独立性と プラットフォームの適切な活用は 組織の効率性と革新性を両立させる鍵となります。特に重要なのは タクソノミーが静的な分類ではなく 継続的に進化する生きた構造だという点です。定期的な見直しと更新を通じて 組織の成長と技術の進化に対応していく必要があります。アーキテクトとして この章から学ぶべき重要な点は タクソノミーが単なる構造の定義ではなく チームの自律性と技術的な進化を支える枠組みだということです。その設計と進化を適切にガイドすることが 現代化の成功に不可欠な要素といえるでしょう。組織の規模や状況に応じて 適切なアプローチを選択し 段階的な実現を目指すことが 実践的な戦略となります。7 Big picture EventStorming第7章「Big picture EventStorming」は、アーキテクチャ現代化において最も重要な「ゆっくり考える」フェーズを実現するための手法を紹介しています。著者は性急な意思決定の危険性を指摘し、その解決策としてEventStormingというコラボレーティブな技法を提示しています。現代化プロジェクトの多くは、「すばやく考え、ゆっくり動く」というパターンに陥りがちです。予算、工期、便益の3点全てを満たすプロジェクトは例外中の例外（0.5%）であり、その主な原因は初期の理解と計画が不十分なままプロジェクトを開始してしまうことにあります。BIG THINGS　どデカいことを成し遂げたヤツらはなにをしたのか？作者:ベント・フリウビヤ,ダン・ガードナーサンマーク出版AmazonEventStormingは、この課題に対する具体的な解決策を提供します。ドメインの深い理解を得るために十分な時間を確保し、関係者全員で慎重に検討を重ねることで、後続のフェーズで迅速な実行を可能にします。これは「ゆっくり考え、すばやく動く」という成功プロジェクトに共通する特徴を体現しています。本章では、この手法の実践的な適用方法と、組織全体での価値創造について、体系的な説明を展開していきます。特に重要なのは、人の心理や組織の力学が初期の理解フェーズを軽視させがちだという点への対処です。EventStormingは、この人間的な側面も考慮に入れた、実践的で効果的なアプローチを提供します。EventStormingの本質EventStormingは 2010年代半ばにAlberto Brandoliniによって考案された ドメイン探索のための手法です。その最大の特徴は シンプルな表記法と高い包摂性にあります。ドメインイベントという概念を用いて 業務の流れを左から右への時系列で表現します。Figure 7.1は その基本的な構造を示しています。Figure 7.1 Using domain events to map out a business on a timeline from left to right より引用特に重要なのは この手法が特別なトレーニングを必要としない点です。製品開発に関わる全ての人々（開発者 テスター プロダクトマネージャー UXデザイナー カスタマーサポート担当者など）が 自然に参加できるよう設計されています。これは 組織内の知識を最大限に活用し より深いドメイン理解を得るために不可欠な特性といえます。私自身の経験でも EventStormingの価値を実感する場面は多くあります。例えば あるプロジェクトで開発者が「この機能は重要ではない」と考えていた問題について カスタマーサポート担当者から「今朝も2件の問い合わせがあった」という指摘があり 認識のズレが明らかになった事例があります。このような気づきは 個別のインタビューでは得られにくいものです。手法の実践EventStormingの実践には いくつかの重要な要素があります。まず 会場の準備です。8メートル以上の壁面スペースと 付箋やペンなどの文具が必要です。Figure 7.8が最高なのでぜひ書籍を読んでみて下さい。また、テーブルや椅子は最小限にし 参加者が自由に動き回れる環境を整えることが重要です。セッションの進め方も重要です。著者は カオス的な探索という概念を提唱しています。これは 最初から整然とした構造を求めるのではなく 参加者全員が思いつくままにドメインイベントを書き出していく方法です。Figure 7.2は この過程を視覚的に示しています。Figure 7.2 An EventStorm runs from left to right but does not need to be neatly and precisely laid out. より引用私の実践では この「カオス」の許容が非常に重要だと感じています。整然とした構造を早期に求めすぎると 重要な気づきが失われる可能性があります。特に レガシーシステムの現代化では 表面には現れていない依存関係や制約が多く存在するため この探索的なアプローチが効果的です。ファシリテーションの技術EventStormingのファシリテーションには 高度なスキルが要求されます。著者は Figure 7.17など用いて いくつかの重要な原則を示しています。特に重要なのは 抽象度のバランスです。過度に抽象的なイベントは 重要な詳細を隠してしまい 過度に具体的なイベントは 全体像の理解を妨げます。Figure 7.17 Overly abstract events より引用実践的なテクニックとして ピボットイベントの活用があります。これは タイムライン全体を適切なサイズに分割し 理解を促進するための手法です。Figure 7.11は この手法の適用例を示しています。このような構造化により 複雑なドメインでも理解しやすくなります。Figure 7.11 Using pivotal events to sort the timeline より引用私の経験では このピボットイベントの選定が セッションの成否を分ける重要な要素となることが多いです。適切なピボットイベントは ドメインの本質的な変化点を表現し より深い議論のきっかけを提供します。問題とチャンスの発見著者は EventStormingが 単なるプロセスの可視化ではなく 問題とチャンスの発見ツールとしても機能することを強調しています。Figure 7.15は ユーザーのドロップアウトポイントを示す例です。このような視覚化により 業務上の課題がより明確になります。Figure 7.15 A customer dropping out of the funnel, resulting in lost revenue より引用特に興味深いのは 知識の欠落や争点の発見です。著者は 2017年の金融アドバイス業界での事例を紹介しています。この事例では メトリクスの計算方法について 開発者とマーケティング責任者の間で認識の不一致が発見されました。このような発見は 組織の意思決定の質を向上させる重要な機会となります。リモートでの実践パンデミック以降 リモートでのEventStormingの実践が急速に広がっています。著者は この変化を単なる代替手段としてではなく 新たな可能性として捉えています。Miroなどのデジタルツールでは 物理的な制約なく無限のモデリングスペースを使用でき コピー＆ペーストなどの効率的な操作も可能です。私の実践でも リモートならではの利点を多く発見しています。例えば 複数のセッションを時間をかけて実施できることや グループワークでの素早い複製と比較が可能なことは 大きな価値です。ただし 参加者の集中力維持や 非言語コミュニケーションの制限には 十分な注意が必要です。まとめEventStormingは アーキテクチャ現代化において 不可欠なツールです。その価値は 単なるプロセスの可視化を超えて 組織の知識の統合と 深い洞察の獲得にあります。特に 現代のソフトウェア開発において重要な ドメイン駆動設計の実践を支援する強力なツールとなります。一方で この手法の効果的な活用には 適切なファシリテーションスキルと 組織文化の醸成が必要です。Discovery mindsetの確立や bikesheddingの回避など 実践上の課題にも注意を払う必要があります。アーキテクトとして この手法を活用する際は 単なるテクニックとしてではなく 組織の知識を統合し 現代化の方向性を見出すための戦略的なツールとして位置づけることが重要です。特に レガシーシステムの現代化において その価値は極めて高いといえるでしょう。8 Product and domain modernization第8章「Product and domain modernization」は、アーキテクチャ現代化における製品とドメインの重要性に焦点を当てています。この章を通じて、著者は現代化が単なる技術的な刷新を超えて、ユーザー体験、製品価値、ドメインモデルの根本的な見直しを必要とすることを示しています。DDD（Domain-Driven Design）という言葉をよく耳にしますが、「DDDって結局クリーンアーキテクチャのことですか？」といった質問を受けることも多く、その本質的な理解が十分に広まっているとは言えない状況です。本章は、DDDの核心である「ドメインモデリング」について体系だった説明を提供しており、その点だけでも大きな価値があります。特に、ドメインモデルが単なる技術的な設計パターンではなく、ビジネスの本質を理解し表現するための手法であることが、具体的な事例とともにわかりやすく解説されています。ドメイン駆動設計入門 ボトムアップでわかる！ドメイン駆動設計の基本作者:成瀬 允宣翔泳社Amazon製品現代化の本質製品現代化の本質は、単なる技術的なアップデートではありません。著者は、多くの組織が陥りがちな 古いシステムを新技術で再構築するという罠 について警鐘を鳴らしています。現代化は、長年抱えてきた問題に向き合い、不要な複雑性を排除する機会です。リファクタリング 既存のコードを安全に改善する（第2版）作者:ＭａｒｔｉｎＦｏｗｌｅｒオーム社Amazonこの点は、英国政府のデジタルサービス（GDS）の事例で端的に示されています。GDSは、政府サービスの現代化において、ユーザー中心設計と継続的デリバリーを重視する方針を採用しました。その結果、数十年にわたって変更されていなかった政策やプロセスの見直しにまで踏み込んだ改革を実現しています。Figure 8.1が示すように、現代化は製品スタック全体に影響を与えます。UIの改善はユーザーの生産性向上につながり、ソフトウェアの改善はドメインとの整合性を高めます。さらに、概念的なドメインモデルの改善は、組織全体のコミュニケーションと革新を促進します。Figure 8.1 Full-stack modernization, from business domain up to user interface より引用要件の再定義プロセス製品要件の特定において、著者は 既存コードの単純な逆エンジニアリングを避けるべきと主張します。その理由は明確です。既存システムには、もはや不要な機能や、当初から有用性の低かった機能が含まれている可能性が高いからです。Citibank社の事例は、この問題の深刻さを示す象徴的な例です。1990年代スタイルのユーザーインターフェースが原因で、5億ドルの損失を被った事例は、内部向けシステムのUX軽視がもたらすリスクを如実に示しています。特に重要なのは 継続的なディスカバリー の実践です。著者はTeresa Torresの「Continuous Discovery Habits」を引用しながら、週次でのユーザー接点を持つことの重要性を強調しています。これは単なる検証ではなく、共創のマインドセットに基づく早期フィードバックの獲得を意味します。agnozingdays.hatenablog.comドメインモデルの現代化ドメインモデルの現代化は、組織のコミュニケーションと協働に直接的な影響を与えます。著者は、同じ用語に対する異なる解釈が引き起こす問題を、North American Smart Citiesの事例で示しています。「activated」という単語の解釈の違いが、品質エンジニアとソリューションアーキテクトの間で深刻な対立を引き起こした事例は、共通言語の重要性を端的に示しています。Figure 8.3は、同じフレーズが異なるドメイン概念を指す場合に発生する問題を視覚化しています。このような曖昧性は、コラボレーションの効率低下とコードの複雑化を招く原因となります。Figure 8.3 Problems arise when the same phrase is used to describe different domain concepts. より引用プロセスモデリングの実践著者は、プロセスモデリングEventStormingを、将来のドメイン状態を設計するための効果的なツールとして提案しています。この手法の特徴は、その構造化されたアプローチにあります。Figure 8.4は、アクター、アクション、システム、ドメインイベント、ポリシー、情報という基本的な要素を示しています。Figure 8.4 Process modeling EventStorming notation and syntax より引用この手法の実践では、良い質問をすることが重要です。著者は、「この役割を担う人数は何人か」「一人が複数の役割を担えるか」といった質問を通じて、機会の規模と最適化のポイントを特定することを推奨しています。Figure 8.8は、この質問アプローチの実践例を示しています。Figure 8.8 Asking questions about people in the domain to unlock valuable conversations より引用ドメインストーリーテリングの活用ドメインストーリーテリングは、EventStormingと並ぶ重要なモデリング手法です。著者はこの手法の特徴として、「ストーリー」を中心に据えた探索的なアプローチを挙げています。Figure 8.10は、この手法の基本的な表記法を示しています。Figure 8.10 The five basic notation elements of the Domain Storytelling pictographic language より引用特に注目すべきは、この手法が 一度に一つのフローに集中する アプローチを取る点です。これはEventStormingの多面的なアプローチとは異なりますが、特定のシナリオを深く理解する上で効果的です。実践的な成果と課題英国のDepartment for Levelling Up, Housing, and Communities の事例は、これらのアプローチの実践的な価値を示しています。彼らは継続的なディスカバリーアプローチを採用し、ユーザー研究を通じて段階的な改善を実現しました。その結果、単なる規制対応を超えて、政策立案者への新たな価値提供まで実現しています。この事例で特に興味深いのは、文脈的探査（contextual inquiry）とユーザビリティテストの組み合わせです。文脈的探査によってユーザーの本質的なニーズを理解し、ユーザビリティテストで具体的な解決策を検証するという二段階のアプローチは、効果的な現代化戦略の好例といえます。まとめ製品とドメインの現代化は、アーキテクチャ現代化の中核を成す要素です。その成功は、技術的な刷新だけでなく、ユーザー体験、製品価値、ドメインモデルの包括的な見直しに依存します。特に重要なのは、現代化を単なる「古いものの置き換え」ではなく、組織の価値創造能力を根本的に強化する機会として捉えることです。この章で示された手法と事例は、現代のソフトウェア開発組織が直面する課題に対する実践的な解決策を提供しています。特に、継続的なディスカバリーとコラボレーティブなモデリング手法の組み合わせは、現代化プロジェクトの成功に不可欠な要素といえるでしょう。私たちアーキテクトは、これらの知見を活かし、技術とビジネスの架け橋となる現代化戦略を策定していく必要があります。9 Identifying domains and subdomains第9章「Identifying domains and subdomains」は、アーキテクチャ現代化における最も重要な課題であるドメインとサブドメインの識別について論じています。著者はドメイン境界の設計がチームの効果的な構造化とルースカップリングなアーキテクチャの実現に不可欠であることを示し、その実践的なアプローチを提示しています。新版　考える技術・書く技術　問題解決力を伸ばすピラミッド原則作者:バーバラ・ミントダイヤモンド社Amazonドメイン境界の本質と価値良いドメイン境界の設計は、単なる技術的な課題を超えた組織的な価値を持ちます。Figure 9.2が示すように、適切なドメイン境界は依存関係の削減による開発の高速化とチームの幸福度向上をもたらします。関連する概念のまとまりは明確な目的意識を生み、チームの動機付けと持続可能な実践を促進します。Figure 9.2 Well-designed domain boundaries maximize cohesion and minimize coupling, contributing to higher-performing teams and better products. より引用この価値は特にレガシーシステムの現代化において顕著です。私が過去に担当した金融機関のプロジェクトでは、明確なドメイン境界の欠如が開発の遅延と品質の低下を引き起こしていました。チーム間の依存関係が複雑に絡み合い、小さな変更でも多数のチームの調整が必要になる状況でした。結果として、1行のコード変更に数週間の調整期間を要することもありました。ドメイン境界設計の実践例BBCの事例は、ドメイン境界の進化を示す典型的な例です。当初BBCはニュース・スポーツ・天気予報といった垂直方向のサービスごとに境界を設定していました。各サービスは独自の発展を遂げ、週間数百万のアクセスを誇る規模に成長しました。しかしこの構造は、サービス間での一貫した体験の提供を難しくしていました。そこでBBCは、記事・検索・トピックといった水平方向のドメインへと再構成を行いました。この変更により、共通コンポーネントの再利用が促進され、パーソナライゼーションや分析といった横断的な機能の実装が容易になりました。現代化の具体的アプローチFigure 9.12は、大規模航空会社におけるドメイン分割の具体例を示しています。予約・ロイヤルティ・チェックイン・旅程管理といった明確な責任範囲を持つドメインが識別されています。各ドメインは複数のサブドメインで構成され、独立したチームによる開発を可能にしています。Figure 9.12 Domains and subdomains identified at the airline (Source: Javiera Laso) より引用この事例で興味深いのは、同じ名前のサブドメインが異なるドメインに存在する点です。一般的なアーキテクトの直感に反するこの決定は、各ドメインにおける意味的な違いに基づいています。私の経験でも、一見同じに見える概念でも、ビジネスコンテキストが異なれば別々に扱うべき場合が多々あります。評価と発展のフレームワークFigure 9.21のサブドメイン概要キャンバスは、ドメイン境界の妥当性を評価するための実践的なツールです。このキャンバスは目的・主要概念・イベント・ポリシーなど、多面的な視点からドメインを分析します。私はこのキャンバスを使って、チームとステークホルダー間の対話を促進し、境界の設定に関する合意形成を図っています。Figure 9.21 The subdomain overview canvas より引用特に重要なのは、このキャンバスを通じて見えてくる依存関係の評価です。Vlad Khononovの提案する Pain = Strength * Volatility * Distance という公式は、依存関係の問題を定量的に評価する枠組みを提供します。私のプロジェクトでは、この公式を使って優先順位付けを行い、最も問題のある依存関係から順に解消していく戦略を採用しています。継続的な進化の実践ドメイン境界の設計は一回限りの活動ではありません。新機能の追加や事業環境の変化により、継続的な見直しが必要になります。最近のプロジェクトでは、マイクロサービスへの移行過程で、想定外の依存関係が発見され、境界の再設計が必要になりました。この課題に対して私たちが採用している手法は、四半期ごとのドメインレビューです。このレビューでは、変更頻度・依存関係のコスト・チームの生産性などの指標を評価し、必要に応じて境界の調整を行います。この定期的なフィードバックループが、境界設計の持続的な改善を可能にしています。まとめドメインとサブドメインの識別は、アーキテクチャ現代化の成功を左右する重要な要素です。技術的な側面だけでなく、組織の目標達成のための戦略的な活動として捉えることが重要です。BBCや航空会社の事例が示すように、適切なドメイン境界は組織の革新能力と開発効率を大きく向上させます。今後、マイクロサービスアーキテクチャの普及とともに、この課題の重要性は更に増すでしょう。私たちアーキテクトは、この章で示された原則と手法を実践に活かしながら、組織の持続的な進化を支援していく必要があります。10 Strategic IT portfolio第10章「Strategic IT portfolio」は、アーキテクチャ現代化における戦略的なIT投資の重要性とその実践方法について論じています。著者はアーキテクチャをポートフォリオとして捉え、ビジネス価値に基づいた投資判断を行うことの重要性を示し、その具体的なアプローチを提示しています。良い戦略、悪い戦略 (日本経済新聞出版)作者:リチャード・Ｐ・ルメルト日経BPAmazon戦略的ITの本質Martin Fowlerが提唱する「Utility versus Strategic IT」の二分法は、ITの戦略的価値を評価する基本的なフレームワークを提供します。ビジネスの差別化に寄与するソフトウェアは戦略的ITとして、単なるビジネスコストとしてのソフトウェアはユーティリティITとして分類されます。私の経験でも、この分類は実践的な価値があります。ある物流企業のプロジェクトでは、貨物の積載最適化や動的なETA計算の機能は戦略的ITとして位置付けられました。これらの機能は競合他社との差別化につながり、顧客維持率と運用効率の向上に貢献しました。一方で請求システムはユーティリティITとして扱われ、より洗練された機能を追加しても市場での優位性にはつながらないと判断されました。特に重要なのは、この分類が単なる理論的な枠組みではなく、具体的な投資判断と運用モデルの指針となる点です。チームの規模、メンバー構成、コラボレーションの方法、優先順位付け、アーキテクチャの選択など、多くの実務的な意思決定に影響を与えます。私の経験では、この分類を明確にすることで、組織全体の方向性が揃い、より効果的な資源配分が可能になりました。コアドメインチャートの活用著者は戦略的ITの評価ツールとして「Core Domain Charts」を提案しています。Figure 10.4に示されるように、このツールはビジネスの差別化度とモデルの複雑性という2つの軸でドメインを評価します。特に重要なのは、この評価が単なる分類に留まらず、投資判断と運用モデルの具体的な指針となる点です。Figure 10.4 A blank Core Domain Chart より引用電子スクーター企業の事例（Figure 10.5）は、このアプローチの実践を示しています。配車計画のドメインは高い差別化可能性と複雑性を持つため、コアドメインとして位置付けられました。このドメインには長期的な投資とシニアエンジニアの配置、高度なアーキテクチャパターンの採用が必要とされました。Figure 10.5 Core Domain Chart for the hypothetical shared scooter company より引用モデルの複雑性の評価には、ユーザーニーズの発見、製品設計、ドメインモデル設計、ソフトウェアの実装と進化、運用サポートなど、多面的な要素が含まれます。私の経験では、この包括的な評価アプローチにより、技術的な観点だけでなく、ビジネス価値の創出に必要な投資の全体像を把握することが可能になりました。戦略的パターンの認識著者は、コアドメインチャート上に現れる典型的なパターンとその含意を解説しています。特に興味深いのは決定的コア（Decisive Core）と隠れたコア（Hidden Core）の概念です。決定的コアは高い差別化と複雑性を持ち、市場での決定的な優位性をもたらす可能性を持ちます。隠れたコアは、ソフトウェア外の複雑性をソフトウェア化することで戦略的価値を生み出せる可能性がある領域です。また、疑わしいサポート（Suspect Supporting）というパターンは、差別化度が低いにも関わらず高い複雑性を持つドメインを示します。このパターンは多くの場合、技術的負債の蓄積を示唆しており、複雑性の低減が必要となります。私のプロジェクトでも、このパターンの特定が技術的負債への取り組みの優先順位付けに役立ちました。継続的な進化の重要性Vintedの事例は、戦略的ITポートフォリオの継続的な進化の重要性を示しています。カテゴリー管理という一見単純な領域が、実は戦略的な価値を持つコアドメインであることが、Core Domain Chartsを通じて明らかになりました。この発見は、組織の投資判断と技術戦略に大きな影響を与えました。特に注目すべきは、この発見が製品戦略との整合性を取る過程で得られた点です。ドメインの境界や技術的な実装の選択は、より大きな戦略的文脈の中で決定される必要があります。私の経験でも、技術的な決定を製品戦略と結びつけることで、より説得力のある提案が可能になりました。まとめ第10章は、アーキテクチャ現代化における戦略的な投資判断の重要性と、その実践的なアプローチを提供しています。特に重要なのは、アーキテクチャをポートフォリオとして捉え、ドメインごとに適切な投資と運用モデルを選択する視点です。この章で示された手法と知見は、現代のソフトウェア開発組織が直面する課題に対する具体的な解決策となります。私たちアーキテクトは、これらの知見を活かし、技術的な卓越性だけでなくビジネス価値の創出を重視した戦略的な判断を行っていく必要があります。特に、Core Domain Chartsを活用した投資判断の枠組みは、組織の現代化戦略を具体化する上で重要なツールとなるでしょう。11 Team Topologies第11章「Team Topologies」は、アーキテクチャ現代化における組織とソフトウェアの共進化の重要性に焦点を当てています。著者はMatthew SkeltonとManuel Paisが提唱するTeam Topologiesのフレームワークを基に、独立した価値ストリームを実現するためのチーム設計と進化のアプローチを提示しています。チームトポロジー　価値あるソフトウェアをすばやく届ける適応型組織設計作者:マシュー・スケルトン,マニュエル・パイス日本能率協会マネジメントセンターAmazonチーム設計の基本原則効果的なアーキテクチャ現代化には組織とソフトウェアの共同最適化が不可欠です。Figure 11.1が示すように、チーム間の依存関係の最小化とフローの最大化は現代化の中核的な課題です。Figure 11.1 Refining and validating domain boundaries with Team Topologies より引用私の経験でも、チーム構造とアーキテクチャの不整合は深刻な問題を引き起こします。以前関わったある金融機関のプロジェクトでは、チーム間の境界が不明確だったため、同じコードベースに複数のチームが介入し頻繁な調整が必要になりました。結果として、小さな変更にも数週間の時間を要する状況に陥りました。Team Topologiesは持続可能な高速フローを実現するための原則を提供します。この持続可能性が重要です。私が経験した多くの組織では、短期的な速度を追求するあまり技術的負債を蓄積し、最終的にはフローが著しく低下する結果となりました。 speakerdeck.com4つのチームタイプと3つの相互作用モードFigure 11.3は、Team Topologiesが提唱する4つのチームタイプを示しています。ストリーム整合型チームは製品機能の開発に直接関わり、プラットフォームチームは共通基盤を提供します。複雑サブシステムチームは特殊な専門知識を要する領域を担当し、イネーブリングチームは他のチームの成長を支援します。Figure 11.3 The four team types of Team Topologies より引用チーム間の相互作用には3つのモードがあります。コラボレーションは共通の目標に向けて密接に協力する形態で、X-as-a-Serviceは一方のチームが他方のサービスを利用する形態です。ファシリテーションは一時的な支援を提供する形態となります。私の実践では、これらのパターンを固定的に捉えるのではなく、状況に応じて柔軟に組み合わせることが重要でした。特に、プラットフォームチームとストリーム整合型チームの関係は、初期段階では密接なコラボレーションを行い、gradually X-as-a-Serviceに移行していく例が多くありました。コグニティブロードの管理Figure 11.2は、コグニティブロードの観点からチーム境界を評価する方法を示しています。内在的認知負荷はタスクの本質的な複雑さを、外在的認知負荷は環境要因による追加の負荷を、学習的認知負荷は新しい概念の習得に関する負荷を表します。Figure 11.2 Identifying potential high cognitive load on a Core Domain Chart より引用私の経験では、特に外在的認知負荷の管理が重要です。以前参加したプロジェクトでは、レガシーコードの複雑性により、新機能の開発に必要な本質的な作業以外の負荷が大きく、チームの生産性が著しく低下していました。この問題に対し、段階的なリファクタリングと適切なドメイン境界の設定で改善を図りました。チームの進化と再編成著者は、チーム構造を静的なものではなく、継続的に進化するものとして捉えています。Figure 11.10に示されるDiscover to Establishパターンは、その典型的な例です。新しい領域での探索段階では密接なコラボレーションを行い、理解が深まるにつれて相互作用のモードを変化させていきます。Figure 11.10 The discover to establish pattern より引用Heidi HelfandのDynamic Reteamingの概念も重要です。チームの構成は固定的であってはならず、組織の成長、新しい優先順位の発生、知識の共有、学習機会の創出などの理由で適切に変化させる必要があります。私のプロジェクトでも、月次でのメンバーの交代を制度化し、知識の共有と新鮮な視点の導入を図りました。独立した価値ストリームの検証独立した価値ストリームの実現には、Independent Service Heuristics (ISH)が有効です。このツールは、ビジネスインパクト、プロダクト決定の自律性、チームの認知負荷、コスト追跡、依存関係などの観点から、価値ストリームの独立性を評価します。私の経験では、ISHは特にレガシーシステムの現代化において有効でした。ある製造業のプロジェクトでは、ISHを使用して複数の候補となる価値ストリームを評価し、最も効果的な現代化の開始点を特定することができました。コンウェイの法則への対応コンウェイの法則は、組織のコミュニケーション構造がソフトウェアアーキテクチャに反映されることを示しています。著者は、この法則を避けるのではなく、積極的に活用することを提案しています。私が経験した失敗例では、マーケティング部門とIT部門の対立関係がアーキテクチャの複雑化を招いた事例があります。両部門の協力関係の欠如が、データの同期やシステムの整合性の問題を引き起こしました。この経験から、組織構造とアーキテクチャの整合性を意識的に設計することの重要性を学びました。フロントエンドとバックエンドのチーム構成著者は、フロントエンドとバックエンドのチーム構成について、3つの主要なパターンを提示しています。一つ目は「フロントバックチーム」パターンで、各チームがUIとバックエンドの両方を担当します。このパターンでは、一つの機能に関する変更を単一のチームで完結できる利点があります。二つ目は「ドメインごとの専門チーム」パターンです。フロントエンドチームとバックエンドチームは存在しますが、特定のドメイン領域に特化しています。これにより、ドメインの専門性を維持しながら、技術的な専門性も確保できます。三つ目は「完全分離」パターンです。フロントエンド開発を担当するチームとバックエンド開発を担当するチームが完全に分かれています。このパターンでは、技術的な専門性は高まりますが、機能開発時のチーム間調整コストが増大します。私の経験では、この選択は技術的な観点だけでなく、チームメンバーのキャリア志向や組織の文化も考慮する必要があります。ある製品開発組織では、フロントエンドとバックエンドの完全な分離を採用し、専門性の向上を図りましたが、コミュニケーションコストの増大という代償を払うことになりました。特に新機能の開発時には、フロントエンド・バックエンド間のインターフェース設計に多くの時間を要することになりました。まとめTeam Topologiesは、アーキテクチャ現代化における組織とソフトウェアの共進化のための実践的なフレームワークを提供しています。特に重要なのは、チーム構造を静的なものではなく、ビジネスの進化に応じて継続的に適応させていく視点です。私たちアーキテクトは、技術的な設計だけでなく、組織の構造とその進化にも注意を払う必要があります。特に、チームの認知負荷の管理、適切な相互作用モードの選択、そして組織全体としての学習能力の向上が、現代化の成功には不可欠です。この章で示された原則とパターンは、現代のソフトウェア開発組織が直面する複雑性に対する具体的な解決策となります。ただし、これらのパターンを機械的に適用するのではなく、組織の文脈に応じて適切にカスタマイズし、継続的に改善していくことが重要です。著者の提案する「持続可能な高速フロー」という概念は、短期的な生産性と長期的な健全性のバランスを取る上で、私たちに重要な示唆を与えています。アーキテクトとして、この視点を常に意識しながら、組織とアーキテクチャの共進化を導いていく必要があるでしょう。12 Loosely coupled software architecture第12章「Loosely coupled software architecture」は 独立した価値ストリームを実現するために不可欠な疎結合アーキテクチャについて論じています。この章を通じて著者は結合度という抽象的な概念を具体的な設計原則へと落とし込み ソフトウェアアーキテクトが実践で活用できる知見を提供しています。A Philosophy of Software Design, 2nd Edition (English Edition)作者:Ousterhout, John K. Amazon改訂新版　良いコード／悪いコードで学ぶ設計入門 ―保守しやすい　成長し続けるコードの書き方作者:仙塲 大也技術評論社Amazon結合度の本質と戦略的重要性著者は結合度を「一方のコンポーネントが他方のコンポーネントについてどれだけ知っているか」という観点から整理しています。Vlad Khononovの分類によれば 結合度は強い順に「侵襲的結合」「機能的結合」「モデル結合」「契約的結合」の4種類に分類されます。この分類は従来の抽象的な結合度の議論を具体的な評価基準へと昇華させた点で 実務上極めて有用です。最も強い結合である侵襲的結合では プライベートメソッドへのアクセスやデータベーススキーマの共有など あらゆる内部詳細が露出します。この状態では変更の影響範囲が予測不可能となり リスクの高い変更を強いられます。その一方で最も弱い契約的結合では インターフェイスを介した相互作用のみが許可されます。内部の実装詳細が隠蔽されているため 変更の影響を最小限に抑えることができます。Figure 12.1 This chapter covers the software architecture aspect of independent value streams. より引用Figure 12.1 はこれらの結合タイプが価値ストリームの独立性に与える影響を視覚的に表現しています。結合度が強いほどリスクが高くなり 弱いほど安全な変更が可能になることを明確に示しています。特に注目すべきは契約的結合の効果です。インターフェイスの背後にある実装は自由に変更できるため 迅速な進化が可能となります。局所的複雑性と大域的複雑性のバランスアーキテクチャ設計において 著者は局所的な複雑性と大域的な複雑性のバランスを取ることの重要性を指摘しています。マイクロサービス開発の初期には「100行以下のシンプルなサービス」という極端な設計指針が提唱されることがありました。しかしこのアプローチは局所的な複雑性を下げる一方で システム全体の複雑性を大幅に増大させる結果となりました。Figure 12.5 Balancing local and global complexity より引用Figure 12.5 は局所的複雑性と大域的複雑性のトレードオフを示しています。サービスを小規模に保つことで理解や変更は容易になりますが その分サービス間の相互作用が増加し システム全体の複雑性は増大します。私の経験でも 極端な分割は必ずしも最適な選択ではありませんでした。あるプロジェクトでは データの同期や整合性維持のために大量のボイラープレートコードが必要となり 結果として開発者の生産性を低下させる事態となりました。著者はVlad Khononovのフレームワーク「Pain = Strength * Volatility * Distance」を用いて このトレードオフを定量的に評価することを提案しています。このフレームワークは結合の強さ 変更頻度 社会的・技術的な距離という3つの要素から結合がもたらす痛みを評価します。これにより アーキテクト間で客観的な議論が可能となります。アーキテクチャフローのモデリング手法著者は EventStorming Domain Message Flow Modeling Software Design EventStormingといった視覚的なモデリング手法を紹介しています。これらの手法は複数のサブシステム間の相互作用を可視化し 結合度を評価・改善するための効果的なツールです。Eric Evansが提唱するモデル探索の渦巻きは ドメインモデルを継続的に評価・改良するプロセスを示しています。具体的なシナリオをもとに視覚的なモデリングを行い 必要に応じてコードの検証も実施します。私は特にこのアプローチを評価しています。抽象的な議論では見落とされがちな実装上の課題が 具体的なシナリオを通じて早期に発見されるためです。Domain Message Flow Modelingの事例として オンライン車両販売プラットフォームの検査プロセスが示されています。ユーザーの行動に基づいてイベントとコマンドを特定し ドメイン概念とデータフローを可視化します。特に重要なのはイベントとコマンドの使い分けです。コマンドは送信者が次のアクションを決定するのに対し イベントは受信者が判断を行います。このように意思決定の所在を明確化することで 将来の変更容易性が向上します。サブシステム設計の実践著者は個々のサブシステムの設計を評価するためのツールとして Bounded Context Canvas を提案しています。このキャンバスは名前 説明 戦略的分類 ドメインロール コミュニケーションパターンなど 8つのセクションでサブシステムを多面的に評価します。私の実践では このキャンバスを使うことでステークホルダー間の認識の齟齬を早期に発見できました。特に「domain roles」セクションは チームの責任範囲を明確化する上で有効でした。また「inbound/outbound communication」セクションは 依存関係の可視化に役立ち 不必要な結合の特定を容易にしました。より詳細な設計フェーズでは Software Design EventStorming が効果的です。この手法は従来のEventStormingにアグリゲートという概念を追加し より実装に近いレベルでモデリングを行います。視覚的な表現により 関係者全員がドメインモデルを共有・議論することが可能となります。サブシステムの現代化戦略著者は現代化戦略を選択するためのフレームワークとして Modernization Strategy Selector を提示しています。このフレームワークは行動の変更とテクノロジーの変更という2つの軸でモダナイゼーション戦略を評価します。行動の変更は既存機能の修正や新機能の追加を テクノロジーの変更はインフラストラクチャやプログラミング言語の刷新を表します。このフレームワークにより ROIを最大化する現代化アプローチを特定することが可能となります。移行パターンとしては Strangler Fig Pattern Bubble Pattern Autonomous Bubble Pattern などが紹介されています。Strangler Fig Patternでは 新しいシステムが既存のモノリスを徐々に包み込んでいきます。ルーティングコンポーネントがリクエストを振り分け 新しい機能は現代化されたサブシステムで処理します。一方 Bubble Patternでは 新しいサブシステムを既存システムの前に配置し アンチコラプションレイヤーを通じて古いシステムと統合します。さらに進化したAutonomous Bubble Patternでは 新しいサブシステムが独自のデータストアを持ち 非同期のデータ同期で既存システムと連携します。私の経験では Strangler Fig Pattern が最も実践的でした。段階的な移行が可能なため リスクを最小限に抑えながら現代化を進めることができました。まとめ本章は疎結合アーキテクチャの理論と実践を包括的に扱っています。特に価値があるのは 抽象的な概念を具体的な評価基準とツールセットへと変換している点です。Vlad Khononovの結合度フレームワークは結合の影響を定量的に評価する基準を提供し さまざまなモデリング手法は結合度を視覚化・改善するための実践的なアプローチを示しています。アーキテクトとして私が特に注目しているのは 局所的複雑性と大域的複雑性のバランスです。極端な分割や過度の統合を避け 組織の文脈に応じた適切なバランスを見出すことが重要です。また 現代化戦略の選択においては ROIを最大化する移行パターンの特定が鍵となります。結合度の設計はソフトウェアアーキテクチャの根幹をなす課題です。本章で示された原則とツールセットは この課題に対する実践的な解決策を提供しています。今後のソフトウェア開発において これらの知見はますます重要性を増すでしょう。13 Internal developer platforms第13章「Internal developer platforms」は アーキテクチャ現代化における開発者体験の重要性から始まり 独立した価値ストリームを実現するためのプラットフォーム戦略 そして 組織全体での効果的なプラットフォーム運用に至るまで 幅広いトピックをカバーしています。この章を通じて著者は組織がいかに優れたIDPを構築し 継続的なイノベーションを実現できるかを示しています。この資料は秀逸なので読んでほしいです。 speakerdeck.com自分のブログもこちらに添えさせていただきます。syu-m-5151.hatenablog.com開発者体験の本質著者は優れた開発者体験(DX)を独立した価値ストリームの基盤として位置付けています。最も重要なのはチームが価値創造に集中できる環境を整備することです。私の経験でも 多くの組織で開発者は本質的ではない作業に時間を取られすぎています。ある企業では新しいサービスの立ち上げに数週間を要し その大半がインフラ構築やCI/CDパイプラインの設定に費やされていました。単なる開発効率の改善だけでなく イノベーションの速度も重要な指標です。ある金融機関では 新機能のリリースに数ヶ月を要していましたが その大半は手作業による検証とデプロイメントプロセスでした。IDPの導入後は これらのプロセスが自動化され リリースサイクルは週単位まで短縮されました。結果として 競合他社に先駆けた新機能の展開が可能となりました。現代の開発者体験に求められる要件は厳格です。著者は新規アプリケーションを1日以内にプロダクションまで到達させることを基準として挙げています。これはHMRCのMDTPプラットフォームの事例で示されるように 実現可能な目標です。MDTPでは60以上のチームが日次デプロイメントを実現し 新規サービスの立ち上げも数分で完了できました。私の実践では セルフサービス化が鍵となります。あるEコマース企業では 各種リソースの作成やデプロイメントに毎回プラットフォームチームへの依頼が必要でした。この非効率な状況を改善するため AWSのようなセルフサービスモデルを参考に プラットフォームを再設計しました。その結果 開発チームは必要なときに即座にリソースを利用できるようになり 生産性が大幅に向上しました。Figure 13.1 The role of IDPs in enabling independent value streams より引用Figure 13.1は開発者体験とIDPの関係性を示しています。IDPは開発者の認知負荷を軽減し 価値創造に集中できる環境を提供します。これは単なる技術的な問題ではなく 組織の競争力に直結する戦略的な課題です。プラットフォームの基本能力著者は効果的なIDPが備えるべき能力として ゴールデンパス ビルド・デプロイパイプライン 可観測性 アプリケーションカタログなどを挙げています。中でも重要なのはゴールデンパスです。これは新規アプリケーション作成のための自動化された手順を提供します。可観測性の実現も重要な要素です。私が関わった製造業のプロジェクトでは 本番環境でのトラブルシューティングに多大な時間を要していました。OpenTelemetryを活用した統合的な監視基盤を整備することで 問題の特定と解決が格段に効率化されました。さらに プロアクティブな性能改善も可能となり システムの安定性が向上しました。Figure 13.2 Paved road for creating a new microservice and pushing to production in just a few hours より引用Figure 13.2は英国のネオバンクにおけるゴールデンパスの実装例を示しています。彼らは2000以上のマイクロサービスを運用しながら 数時間でプロダクションへのデプロイを実現しています。このような俊敏性は標準化された技術スタックと自動化された開発フローによって支えられています。私の実務経験でも ゴールデンパスの価値は明らかでした。あるプロジェクトでは Spring Boot ベースのマイクロサービステンプレートを整備し デプロイメントパイプラインやモニタリングの設定を自動化しました。その結果 新規サービスの立ち上げ時間は2週間から2時間へと劇的に短縮されました。アプリケーションカタログの整備も重要です。ある大規模組織では 類似機能を持つAPIが複数存在し 運用コストの増大を招いていました。Backstageを活用したカタログ整備により APIの可視性が向上し 再利用が促進されました。結果として 開発コストの削減と品質の向上を実現できました。プラットフォーム運用の実践著者はIDPをプロダクトとして扱うことの重要性を強調しています。これは単なる技術的なインフラストラクチャではなく 継続的に進化するサービスとして捉える必要があります。La Redouteの事例は この考え方を実践的に示しています。プロダクトマインドセットの具体的な実践として 定期的なフィードバックの収集があります。私のチームでは四半期ごとに開発者満足度調査を実施し その結果をプラットフォームの改善計画に反映しています。また 月次のプラットフォームユーザー会を開催し 開発者との直接対話の機会を設けています。彼らはプラットフォーム運用において 品質 効率性 スピードの3つの指標を重視しました。特筆すべきは プラットフォームチームが開発者を顧客として扱い その体験を継続的に改善していた点です。これは私が経験した多くのプラットフォームチームとは異なるアプローチでした。セキュリティとコンプライアンスの統合も重要な課題です。ある金融機関では セキュリティ要件の充足に多大な工数を要していました。IDPにセキュリティチェックを組み込むことで この問題を解決しました。自動化されたコードスキャンと監査ログの生成により コンプライアンス対応が効率化されました。プラットフォーム運用で重要なのは標準化と柔軟性のバランスです。MDTPの事例では Scala と Play Framework への強い標準化により 高度な自動化を実現しました。一方でNetflixは より柔軟なアプローチを採用し チームの技術選択の自由度を高く保っています。プラットフォームチームの構成も成功の鍵となります。私の経験では エンジニアリングスキルとプロダクトマインドセットを併せ持つ人材が必要です。また サポート担当とプラットフォーム開発者を分離し それぞれが専門性を発揮できる体制を整えることも有効でした。投資判断の指針著者は最小限の実行可能なプラットフォーム(TVP)という概念を提示しています。これは大規模なビッグバンプロジェクトを避け 必要最小限の機能から始めることを推奨します。私も同意見です。過去に関わった大規模なプラットフォーム構築では 2年の開発期間を経ても利用率が低く 投資対効果の説明に苦慮した経験があります。プラットフォーム構築の判断基準として 著者は組織の規模だけでなく採用可能性も重視します。技術スタックの強制や既存システムからの移行コストが高い場合 プラットフォームは形骸化するリスクがあります。実践的なアプローチとして 段階的な展開が有効です。あるプロジェクトでは まずCI/CDパイプラインの標準化から着手し その価値が認められた後に他の機能を順次追加していきました。このアプローチにより 投資対効果の可視化と関係者の合意形成が容易になりました。ビルドvs購入の判断も重要です。市場には様々なプラットフォームソリューションが存在します。私の経験では 汎用的な機能は既存ソリューションを活用し 組織固有のニーズに対応する部分のみを内製する戦略が効果的でした。まとめ本章はIDPの構築と運用に関する包括的な指針を提供しています。特に価値があるのは開発者体験を中心に据えたアプローチです。プラットフォームチームは技術的な卓越性だけでなく サービスマインドセットを持つことが求められます。今日のソフトウェア開発において IDPは組織の競争力を左右する重要な要素となっています。しかしその構築には慎重な判断と継続的な投資が必要です。プラットフォーム構築を検討する組織は まず最小限の機能から始め 利用状況と価値創出を確認しながら段階的に発展させていくアプローチを採用すべきでしょう。重要なのは IDPを単なるツール群としてではなく 組織の開発生産性とイノベーション能力を高めるための戦略的資産として位置付けることです。その成功は技術的な選択だけでなく 組織文化や人材育成を含めた包括的なアプローチにかかっています。優れたIDPは 開発者が本質的な価値創造に集中できる環境を提供し 組織全体のイノベーション能力を高めます。今後も クラウドネイティブ技術の進化や開発手法の多様化に応じて IDPの重要性は増していくでしょう。アーキテクトとして この領域への深い理解と実践的な経験がますます求められています。14 Data mesh revolutionizing data engineering第14章「Data mesh revolutionizing data engineering」は データ管理の基本概念とその進化から始まり データメッシュの4つの原則とその実践 そしてデータ量子という革新的な概念の導入に至るまで データエンジニアリングの現代化に関する包括的な内容を提供しています。この章を通じて 著者は従来のデータ管理手法の限界と それを克服するためのデータメッシュアーキテクチャの可能性を示しています。syu-m-5151.hatenablog.comデータエンジニアリングの変遷と課題著者はまず データエンジニアリングの歴史的な変遷を振り返ります。1971年のCoddによるリレーショナルデータベースの提案から データウェアハウス データレイクに至る進化を辿っています。私も同様の変遷を経験してきましたが 各段階で新たな課題が生まれていく様子を興味深く見てきました。Figure 14.1 A data warehouse and some of its ingestion process より引用Figure 14.1は データウェアハウスのアーキテクチャを示しています。自動車部品小売企業の例では 顧客情報やトランザクションデータが複数のプロセスに分割され 新しい要件への対応に多大な労力を要します。例えば ロイヤリティプログラムの追加には新たなプロセスの構築が必要となり 既存のデータフローにも影響を与えます。一方 データレイクは データ取り込みの簡素化を実現しましたが 新たな課題を生み出しました。データの民主化という理想は データアクセスの複雑さという現実に直面します。私のプロジェクトでも データレイクの導入により データの取り込みは容易になりましたが データサイエンティストが必要なデータを見つけ出し 適切な形式に変換するまでに多大な時間を費やす状況が続きました。私の経験では この両者の問題は 中央集権的なチーム構造に起因することが多いです。ドメイン知識のないチームが全社的なデータパイプラインを管理するため 変更に対する柔軟性が失われていきます。あるプロジェクトでは 新しい分析要件に対応するために3ヶ月もの調整期間を要しました。この状況は データエンジニアの生産性とビジネスのアジリティを著しく低下させます。データメッシュの4つの原則著者は データメッシュを支える4つの原則として ドメイン所有権 プロダクトとしてのデータ セルフサービスプラットフォーム 連邦型計算ガバナンスを挙げています。これらは単なる技術的な原則ではなく 組織構造とアーキテクチャの共進化を促す指針です。ドメイン所有権は ビジネスドメインの専門家とデータアーキテクトを結びつけます。私のプロジェクトでも この原則の導入により データ品質が大幅に向上しました。ドメイン専門家が直接データの定義と品質基準に関与することで より適切なデータモデルの構築が可能になりました。例えば ある製造業のプロジェクトでは 工場のエンジニアと直接協働することで 生産データの品質基準を現場の実態に即して定義できました。プロダクトとしてのデータは 従来のプロジェクトベースのアプローチからの大きな転換を意味します。著者は DAUNTIVSという原則を提示し データプロダクトが持つべき特性を説明しています。これは 発見可能性 アドレス可能性 理解可能性 ネイティブなアクセス可能性 信頼性と真実性 相互運用性と組み合わせ可能性 価値 セキュリティを表します。Figure 14.4 The data quantum takes the shape of a hexagon, highlighting its multiple endpoints, allowing access to data, metadata, observability, and control. より引用Figure 14.4は データ量子という革新的な概念を示しています。これは従来のモノリシックなデータレイクとは異なり ドメイン単位で分割された最小のデプロイ可能な要素です。私の経験では この粒度の設定が成功の鍵となります。ある金融機関では 顧客データを過度に細分化したため 管理コストが増大し パフォーマンスも低下しました。適切な粒度を見出すには ビジネス要件とシステムの複雑性のバランスを慎重に検討する必要があります。データ契約の重要性著者はデータ契約をデータメッシュの中核的な要素として位置付けています。これは単なるスキーマ定義ではなく データプロダクトの振る舞いを定義する包括的な文書です。データ契約には 基本的な要素や論理・物理スキーマ データ品質ルール ガバナンスポリシー SLAなどが含まれます。私の実践では データ契約の導入により チーム間のコミュニケーションが大幅に改善されました。特にデータ品質とガバナンスの要件を明確に定義できる点は 規制要件の厳しい金融業界で重要な価値を持ちます。あるプロジェクトでは データ契約をGitで管理し 変更履歴を追跡可能にすることで コンプライアンス要件への対応も容易になりました。しかし データ契約の策定と維持には相応のコストがかかります。経験上 契約の粒度と更新頻度のバランスが重要です。過度に詳細な契約は維持コストを増大させ 逆に粗すぎる契約は価値を失います。私たちは 四半期ごとのレビューサイクルを設定し 継続的な改善を図っています。実装アプローチと経験プレーン著者は データメッシュの実装を3つの経験プレーンで構造化しています。インフラストラクチャ経験プレーンは基盤となるインフラストラクチャを提供し データプロダクト経験プレーンはデータプロダクトの管理を担当します。そしてメッシュ経験プレーンがこれらを統合し 全体としての価値を生み出します。実装において重要なのは サイドカーパターンの活用です。共通のサービスやライブラリをサイドカーとして実装することで 再利用性が高まり 開発効率が向上します。私のプロジェクトでは このアプローチにより 新規データプロダクトの開発期間を約40%削減できました。具体的には 認証 ログ収集 メトリクス収集などの共通機能をサイドカーに集約し 各データプロダクトはビジネスロジックに集中できる環境を整備しました。データ量子の実装では ディスカバリー＆ディクショナリーサービス オブザーバビリティサービス コントロールサービス データオンボーディング 相互運用可能なデータという5つのコンポーネントを適切に構成する必要があります。特に重要なのは オブザーバビリティの実現です。データの品質や可用性を継続的にモニタリングすることで 問題の早期発見と対応が可能になります。まとめデータメッシュは 単なる技術的なアーキテクチャパターンを超えて データエンジニアリングの組織的な変革を促す枠組みを提供しています。4つの原則は それぞれが相互に依存し補完し合う形で 全体としての価値を生み出します。私の経験では 最も重要なのは段階的な導入アプローチです。小規模なパイロットから始め 成功事例を積み重ねていくことで 組織全体の変革を推進できます。また データ契約の整備と標準化は 長期的な成功の鍵となります。具体的には まず重要度の高いのドメインを選定し そこでの成功体験を組織全体に展開していく戦略が効果的です。データメッシュの導入には 技術的な課題だけでなく 組織的な課題も存在します。特に重要なのは データプロダクトオーナーシップの確立です。ビジネスドメインの専門家がデータの品質と価値に責任を持つ文化を醸成することが 成功への近道となります。現代のデータ駆動型組織において データメッシュは避けては通れないトレンドとなっています。その成功は技術的な選択だけでなく 組織文化の変革とチームの自律性を含めた包括的なアプローチにかかっています。アーキテクトとして 技術的な深さと組織的な視点の両方を持ち合わせることが 今後ますます重要になっていくでしょう。データメッシュの導入を検討する組織には まず現状の課題を明確に特定し 段階的な移行計画を立てることを推奨します。特に重要なのは 早期の価値創出です。小さな成功を積み重ねることで 組織全体の変革モメンタムを維持できます。また 継続的な学習と改善のサイクルを確立し データメッシュの進化に合わせて組織も成長していく体制を整えることが 長期的な成功につながります。15 Architecture modernization enabling teams第15章「Architecture modernization enabling teams」は アーキテクチャ現代化を支援するチーム（AMET）の設立から その役割と進化 そして組織への長期的な影響に至るまで アーキテクチャ現代化のための組織的なアプローチを包括的に論じています。この章を通じて 著者は単なる技術的な改善を超えて 持続可能な組織の変革を実現するためのフレームワークを提示しています。スイッチ！作者:チップ・ハース,ダン・ハース早川書房AmazonAMETの本質と目的著者はAMETを 現代化のモメンタムを維持し 長期的な組織変革を実現するための触媒として位置付けています。私の経験でも アーキテクチャ現代化の最大の課題は技術的な側面ではなく 組織全体での持続的な改善の実現にあります。Figure 15.1 An AMET is an enabling team that facilitates stream-aligned teams (and other stakeholders) during the modernization journey. より引用Figure 15.1は AMETの基本的な役割を示しています。AMETは単なる技術指南役ではなく ストリーム整合型チームとその他のステークホルダーを支援し 組織全体の現代化能力を向上させる役割を担います。この点は極めて重要です。過去に関わったプロジェクトでは 技術的に優れたアーキテクトが指示を出すだけのケースがありましたが それでは真の組織的な成長は実現できませんでした。AMETの主要な責任は6つの課題に対応することです。取り組みの開始 モメンタムの維持 より良い設計の実現 持続的な変化の促進 ビジョンと進捗の共有 そして成功事例と学びの共有です。私の経験では 特にモメンタムの維持が重要です。ある組織では 最初の数ヶ月は順調に進んでいたものの 日常業務の圧力で現代化への取り組みが停滞しました。この事態を打開するため AMETがワークショップを開催し 現代化の価値を再確認する機会を設けました。その結果 チームの士気が回復し 取り組みを継続できました。ソフトウェアアーキテクチャメトリクス ―アーキテクチャ品質を改善する10のアドバイス作者:Christian Ciceri,Dave Farley,Neal Ford,Andrew Harmel-Law,Michael Keeling,Carola Lilienthal,João Rosa,Alexander von Zitzewitz,Rene Weiss,Eoin Woodsオーム社Amazonチームの構成と能力AMETの成功には 適切なスキルセットとマインドセットを持つメンバーの選定が不可欠です。技術的な専門性はもちろんですが それ以上に重要なのはイネーブリングマインドセットです。私はAMETのメンバー選定において この点を特に重視しています。例えば ある大規模な金融機関では 技術的に優れたアーキテクトを集めてAMETを構成しましたが うまく機能しませんでした。彼らは自身の技術的な正しさを主張することに注力し 各チームの状況や制約を理解しようとしませんでした。結果として チーム間の対立が生まれ 現代化の取り組み全体が停滞しました。一方で 成功事例もあります。ある製造業のプロジェクトでは AMETのメンバーが各チームと定期的な1on1を実施し 信頼関係の構築に注力しました。また 技術的な課題に直面したチームに対して 解決策を押し付けるのではなく 一緒に考えるアプローチを採用しました。この結果 チーム間の協力関係が強化され 現代化の取り組みが加速しました。Figure 15.5 AMET involvement decreases as the organization upskills より引用Figure 15.5は AMETの関与度が組織のアーキテクチャ能力の向上とともに変化していく様子を示しています。初期段階では強いリーダーシップを発揮し 徐々にその役割を変化させていくことが重要です。私のプロジェクトでも この段階的なアプローチが効果的でした。最初は具体的な指示を出していましたが チームの能力が向上するにつれて アドバイザリーな立場へと移行していきました。アーキテクトの教科書 価値を生むソフトウェアのアーキテクチャ構築作者:米久保 剛翔泳社Amazonアーキテクチャ運用モデルの確立AMETの重要な役割の一つは 持続可能なアーキテクチャ運用モデルの確立です。著者は4つのモデルを提示しています。善意の独裁者 第一人者 アーキテクトなしのアーキテクチャ そして囚人による運営です。これらのモデルは単なる組織構造ではなく アーキテクチャ意思決定の方法を規定する枠組みです。私はこれらのモデルを状況に応じて柔軟に組み合わせることを推奨します。例えば あるプロジェクトでは 初期段階では善意の独裁者モデルを採用し 組織の成熟度が向上するにつれてアーキテクトなしのアーキテクチャへと移行しました。このアプローチにより 初期の方向性の一貫性を保ちながら 長期的な自律性を実現できました。運用モデルの選択では 組織文化との整合性も重要です。ある組織では 高度に自律的な文化があったため 最初から第一人者モデルを採用しました。各チームに一人のアーキテクトを配置し チーム内での意思決定を重視しました。この判断により 現場での迅速な意思決定が可能になり 開発の速度が向上しました。また 意思決定プロセスの明確化も重要です。AMETは組織全体のアーキテクチャ意思決定プロセスを定義し 文書化する必要があります。私のプロジェクトでは Architecture Decision Records (ADR)の活用を推奨し 重要な意思決定の背景と理由を記録する習慣を確立しました。これにより チーム間での知識共有が促進され 一貫性のある意思決定が可能になりました。段階的な導入とスケーリング欧州の通信事業者の事例は AMETの実践的な導入方法を示しています。彼らは外部コンサルタントのJoão Rosaと協力し オペレーティングモデル探索チームを設立しました。このチームは 組織内の多様な視点を持つメンバーで構成され 現代化の方向性を探索する役割を担いました。注目すべきは 段階的なアプローチです。まず特定の領域（例：eコマースとeケア）に焦点を当て 現状の境界とその選択理由を理解することから始めました。この過程でEventStorming Capability Mapping Value Stream Mappingなどの手法を活用し 候補となるドメインとサービスの境界を特定していきました。私の経験でも このアプローチは効果的です。ある小売業のプロジェクトでは まず在庫管理システムの現代化からスタートし そこでの成功体験を基に他の領域へと展開していきました。小さな成功を積み重ねることで 組織全体の信頼を獲得し より大規模な変更への支持を得ることができました。アーキテクチャギルドの活用Comcastの事例は アーキテクチャギルドの効果的な活用を示しています。彼らは分散した技術組織において チャットツールとメーリングリストを活用した非同期のコミュニケーションを重視しました。また ワーキンググループの設立と意思決定プロセスの明確化により 大規模組織での効果的な意思決定を実現しました。私の経験では アーキテクチャギルドの成功には 明確な目的と運営ルールが不可欠です。ある組織では ギルドが単なる情報共有の場となってしまい 実質的な意思決定機能を果たせませんでした。目的とルールを明確化することで より効果的な運営が可能になります。また ギルドの進化も重要です。初期段階では標準化や技術選定に焦点を当てていたギルドが 徐々にイノベーションや知識共有の場へと発展していくケースがあります。この進化を促進するため 定期的なハッカソンや技術カンファレンスの開催を支援することも効果的です。成功のための重要要素著者は AMETの成功には リーダーシップの支援と適切な権限が不可欠だと指摘しています。私も完全に同意します。ある組織では AMETが形式的には設立されたものの 実質的な権限が与えられず 結果として現代化の取り組みが形骸化してしまいました。適切なリソースの確保も重要です。最低でも2名のフルタイムメンバーが必要です。パートタイムのみの構成では 日常業務に埋没してしまい AMETの本来の目的を達成できません。私のプロジェクトでは 3名のフルタイムメンバーと 必要に応じて参加する3名のパートタイムメンバーという構成が効果的でした。また 外部の知見の活用も検討すべきです。ただし 外部コンサルタントへの依存は避ける必要があります。私の実践では 外部の専門家を教育者として活用し 組織内の能力向上を図るアプローチが効果的でした。コミュニケーションとビジョンの共有AMETの重要な役割の一つは 現代化のビジョンと進捗の共有です。これは単なる情報発信ではなく 組織全体の方向性を合わせる重要な活動です。例えば あるプロジェクトでは 月次の全体会議で各チームの成功事例を共有し モチベーションの維持と知見の展開を図りました。また コミュニティの形成も重要です。技術ブログの開設や社内カンファレンスの開催を通じて 現代化に関する知識と経験を共有する場を作ることで 組織全体の能力向上を促進できます。私のプロジェクトでは 四半期ごとの技術カンファレンスが大きな効果を発揮しました。まとめAMETは アーキテクチャ現代化における重要な触媒として機能します。その成功には 適切なメンバーの選定 段階的なアプローチ そして持続可能な運用モデルの確立が不可欠です。ただし AMETは常に必要なわけではありません。組織の状況に応じて その必要性を慎重に判断することが重要です。特に重要なのは AMETを一時的なチームとして捉え その役割を組織に根付かせることです。最終的には AMETという足場を外しても 組織が自律的に現代化を進められる状態を目指すべきです。アーキテクトとして この移行プロセスをいかに効果的に支援できるかが 私たちの重要な責務となります。現代のソフトウェア開発において アーキテクチャの現代化は避けては通れない課題です。AMETは この課題に対する効果的なアプローチを提供します。その成功は 技術的な側面だけでなく 組織文化の変革とチームの自律性を含めた包括的なアプローチにかかっています。私たちアーキテクトは この変革の触媒として その責務を果たしていく必要があります。16 Strategy and roadmaps第16章「Strategy and roadmaps」は、アーキテクチャ現代化の戦略立案から始まり、段階的な実現アプローチ、組織全体への展開、そして継続的な評価と適応に至るまで、包括的な実践的ガイダンスを提供しています。著者は「nail it then scale it」という原則を通じて、大規模な組織変革を実現可能な形へと分解し、確実な成功へと導くアプローチを示しています。この辺は達人プログラマーにもどうようの記載があったなぁって感じています。達人プログラマー ―熟達に向けたあなたの旅― 第2版作者:David Thomas,Andrew Huntオーム社Amazon戦略構築の本質と実践効果的な現代化戦略の最重要要素は、全てのステークホルダーを巻き込む説得力のあるナラティブの構築です。著者は、技術的な負債や再構築といった工学的な用語だけでは、技術部門外の関係者の理解と支持を得ることは難しいと指摘します。この主張は極めて現実的です。私が関わった現代化プロジェクトでも、技術的な議論に終始したケースでは、経営層からの十分な支援を得ることができず、結果として現代化の範囲や速度が制限される事態に陥りました。Figure 16.2 Basic elements of a modernization strategy deck より引用Figure 16.2は戦略デッキの4つの基本要素を示しています。ビジネスコンテキスト、課題と障害、現代化の目的とイニシアチブ、優先順位とロードマップという構成は、論理的で説得力のある物語を紡ぎ出すための効果的な枠組みを提供します。特に重要なのは、これらの要素が単なる構造ではなく、全てのステークホルダーの共感を得るためのストーリーテリングのツールとして機能する点です。戦略デッキの構築で特に注目すべきは、定量的データと感情的要素の組み合わせです。CodeSceneによる技術的負債の可視化やDORAメトリクスによる業界比較といった客観的データに加え、従業員の生の声や具体的なインシデント事例を組み込むことで、より説得力のある物語を構築できます。この手法は特に経営層とのコミュニケーションで効果を発揮します。数値データは意思決定の根拠を提供し、実例や個人の声は課題の切実さを伝えることができます。初期フェーズの戦略的重要性著者は「nail it then scale it」アプローチの一環として、3-6ヶ月以内に最初のスライスを実現することを推奨しています。このタイムフレームは、価値の証明と学習の機会として適切なバランスを提供します。IgluCruise.comのCIO Scott Millettの事例は、この実践的アプローチの有効性を示す好例です。彼らは戦略を具体的な行動に落とし込み、段階的な実現を通じて組織全体の変革を達成しました。Figure 16.7 Hypothetical roadmap for delivering a first slice within six months より引用Figure 16.7は、6ヶ月以内に最初のスライスを実現するための理想的なロードマップを示しています。このアプローチの核心は、実行可能性の高い小さな成功を積み重ねることにあります。私のプロジェクト経験でも、大規模な変革を一度に実現しようとするアプローチは、多くの場合予期せぬ障害に直面し、モメンタムを失うリスクが高いことを実感しています。初期フェーズの成功には、優先順位付けのフレームワークが不可欠です。著者が提案するModernization Core Domain Chartとスコアカードは、複数の候補から最適な開始点を選定するための実践的なツールを提供します。私の実践では、この手法を用いてチーム間で優先順位の議論を行うことで、より客観的で建設的な意思決定が可能になりました。組織全体への展開と課題現代化の展開フェーズでは、プレイブックの活用が重要な役割を果たします。プレイブックは標準的なパターンやプロセスを文書化することで、知識の展開と再利用を促進します。しかし、著者は単なる技術的な手順書以上のものとしてプレイブックを位置付けています。効果的なプレイブックには、選択基準、前提条件、実例、教訓など、実践的な知恵が含まれるべきです。組織全体への展開で特に重要なのが、依存関係の管理です。依存関係の早期特定と適切な評価は、プロジェクトの遅延や追加コストを防ぐ上で重要です。私の経験では、依存関係の管理は技術的な側面だけでなく、組織的なコミュニケーションの課題としても重要です。アーキテクト定例会議やエンジニアリングオフサイトなど、定期的な情報交換の機会を設けることで、潜在的な依存関係を早期に発見できました。mobile.deの事例は、変更コストの概念を用いた投資判断の有効性を示しています。彼らは変更コストを可視化することで、技術的負債への投資の必要性を経営層に説得力を持って説明することに成功しました。この事例は、技術的な課題をビジネス価値と結びつけて説明することの重要性を示しています。継続的な評価と適応著者は、現代化の戦略とロードマップを静的なものではなく、継続的に進化する生きた文書として捉えることの重要性を強調しています。これは極めて重要な指摘です。私のプロジェクト経験でも、初期の計画通りに進まないケースが大半でした。重要なのは、この「ずれ」を失敗とせず、学習と適応の機会として活用することです。Figure 16.1 An evolutionary approach to modernization strategy and roadmaps より引用Figure 16.1が示すように、継続的な学習と適応のサイクルは、現代化の成功に不可欠です。著者は、メトリクス、パルスサーベイ、各種集会など、多様なフィードバック収集の手法を提案しています。特に注目すべきは、定量的指標と定性的フィードバックの組み合わせです。数値指標は客観的な進捗管理を可能にし、定性的なフィードバックは潜在的な課題や改善機会の発見を促進します。組織全体の学習を促進するには、効果的なフィードバックチャネルの確立が重要です。リスニングツアーやワークショップ、定期的なレトロスペクティブなど、様々な形式でのフィードバック収集を組み合わせることで、より包括的な理解と改善が可能になります。私の実践では、四半期ごとの大規模なレトロスペクティブと月次の小規模なフィードバックセッションを組み合わせることで、短期的な調整と長期的な方向性の修正のバランスを取ることができました。まとめ本章は、アーキテクチャ現代化における戦略とロードマップの重要性を、実践的な視点から包括的に論じています。特に価値があるのは、説得力のあるナラティブの構築と段階的な実現アプローチの組み合わせです。これにより、技術的な理想と組織的な現実のバランスを取りながら、持続可能な変革を実現することが可能になります。現代のソフトウェア開発組織において、アーキテクチャ現代化は避けて通れない課題です。本章で示された原則とツールセットは、この課題に対する実践的な解決策を提供しています。特に重要なのは、技術的な側面だけでなく、組織全体の変革という視点で現代化を捉えることです。私たちアーキテクトは、この包括的な視点を持ちながら、組織の持続的な進化を支援していく必要があります。最後に強調したいのは、現代化の成功は継続的な適応と学習のプロセスにあるという点です。完璧な計画を立てることは不可能ですが、早期に価値を証明し、フィードバックを基に継続的に改善していくアプローチにより、確実な成功への道を切り開くことができます。この原則を理解し、実践することが、現代のソフトウェアアーキテクトには求められています。17 Learning and upskilling第17章「Learning and upskilling」は、新しいアイデアの組織への導入から始まり、組織全体での継続的な学習文化の醸成、そして現代化プロジェクトに必要なスキル開発に至るまで、幅広いトピックをカバーしています。著者は、技術的な進歩が人類の歴史において常に重要な役割を果たしてきたという視点から、現代の組織が直面する学習と適応の課題を体系的に論じています。Unlearn（アンラーン）　人生100年時代の新しい「学び」作者:柳川 範之,為末 大日経BPAmazon新しいアイデアの導入と定着著者はシードプランティング（種まき）という比喩を用いて、新しい考え方やプラクティスの導入プロセスを説明します。この比喩は特に印象的です。私の経験でも、新しいアプローチを一朝一夕に導入できた例はほとんどありません。むしろ、小さな成功を積み重ね、組織の中で徐々に理解と支持を広げていくアプローチが効果的でした。PayFitの事例は、このアプローチの有効性を端的に示しています。彼らはDDDの導入において、まず少人数の書籍クラブから始め、その輪を徐々に広げていきました。この過程で興味深いのは、技術者だけでなく、製品やデザインの専門家も巻き込んでいった点です。私も以前、マイクロサービスアーキテクチャの導入で同様のアプローチを採用し、成功を収めました。最初は2-3人の技術リーダーと勉強会を始め、実験的なプロジェクトで成果を示し、その経験を基に組織全体への展開を図りました。プロジェクトニーズに応じたスキル開発現代化プロジェクトの成否は、チームのアップスキリング（スキル向上）にかかっています。著者は、プロジェクト開始前の早期スキル評価と、学習機会の確保の重要性を強調します。私の経験では、この点を軽視したプロジェクトの多くが失敗に終わっています。あるプロジェクトでは、新技術の導入を急ぐあまり十分な学習時間を確保せず、結果として開発の遅延と品質の低下を招きました。学習アプローチの選択では、著者は複数の選択肢を提示します。書籍、トレーニング、メンタリング、実践的な学習など、状況に応じた適切な組み合わせが重要です。私のチームでは、AWS認定試験の取得を目標にした学習プログラムを導入しました。具体的な目標があることで、チームメンバーのモチベーションが高まり、結果として組織全体の技術力向上につながりました。継続的学習環境の確立著者は、継続的な学習を組織のDNAに組み込むことの重要性を強調します。これは極めて重要な指摘です。私が経験した高パフォーマンス組織の多くは、学習を「追加の活動」ではなく「仕事の一部」として位置付けていました。例えば、あるチームでは週次の「ラーニングアワー」を設定し、新技術の調査や実験、ベストプラクティスの共有を行っていました。コミュニティ・オブ・プラクティス（実践コミュニティ）の活用も重要な要素です。著者はEmily Webberの著作を引用しながら、効果的なコミュニティ運営の4つの要件を示します。私の経験では、特に「安全な学習環境の創出」が重要でした。チームメンバーが失敗を恐れずに新しいアイデアを試すことができる環境があってこそ、真の学習と革新が可能になります。CloudSuiteの事例から学ぶ実践CloudSuiteの事例は、現代化における学習主導型アプローチの有効性を示しています。特に注目すべきは、彼らが大規模な計画を立てる前に、まず技術的エクセレンスの確立に注力した点です。私も同様のアプローチで成功を収めた経験があります。ある組織では、マイクロサービスへの移行を進める前に、まずテスト駆動開発とペアプログラミングの習慣を定着させました。これにより、後の大規模な変更をより安全に進めることができました。CloudSuiteの取り組みで特に印象的なのは、ボトムアップ型のドメイン発見プロセスです。彼らは開発者の日常的な課題から出発し、徐々にドメインの理解と境界の特定へと進んでいきました。この事例は、現代化が必ずしもトップダウンの大規模な計画から始める必要がないことを示しています。まとめ本章の最も重要な洞察は、アーキテクチャ現代化における学習とスキル開発が、単なる技術的なトレーニング以上の意味を持つという点です。それは組織文化の変革であり、持続的な改善能力の構築です。特に印象的なのは、著者が歴史的な例（印刷機の発明など）を引用しながら、技術変革における人間の学習と適応の重要性を示している点です。PayFitとCloudSuiteの事例は、現代化における二つの異なるアプローチを示しています。PayFitは書籍クラブという小さな種から組織全体の変革へと発展させ、CloudSuiteは技術的プラクティスの改善から始めて戦略的な変更へと進化させました。これらの事例は、現代化の成功には「正解」となる単一のアプローチは存在せず、組織の文脈に応じた適切な方法を選択する必要があることを示しています。私たちアーキテクトは、技術的な設計だけでなく、組織の学習能力の向上にも注力する必要があります。それは単なるスキルの向上ではなく、組織全体の適応能力と革新能力の向上を意味します。本章で示された原則と事例は、この課題に対する具体的な指針を提供しています。現代化を成功に導くには、技術とヒューマンファクターの両面からのアプローチが不可欠です。おわりに本書の真髄は、アーキテクチャ現代化における「技術」「組織」「戦略」という三つの要素の相互作用と、それらの調和を通じた組織の持続的な競争力の構築にあります。Better Value Sooner Safer Happier (BVSSH)という概念を軸に、技術的な改善、組織的な変革、そして事業戦略の実現を統合的に捉える視座を提供しています。三体問題への実践的アプローチ本書の説得力は、技術・組織・戦略の三要素に対する包括的なアプローチにあります。EventStorming、Wardley Mapping、Team Topologiesなどの手法は、それぞれが実践の場で検証された価値を持ち、三要素の効果的な統合を可能にします。内部開発プラットフォーム(IDP)やデータメッシュといった最新の概念も、この文脈で深い考察が加えられています。IoTデバイスの急増や生成AIの進展など、技術革新の加速度的な進展は、この三体問題をより複雑にしています。本書は、技術的負債による開発者の時間損失や重大なシステム障害の事業影響など、具体的な数値と事例を通じて、この課題の重要性を説得力をもって論じています。持続的な進化のためのフレームワーク「nail it then scale it」という原則に象徴される本書のアプローチは、三体問題に対する実践的な解決策を提示します。3-6ヶ月での最初の成果創出、Architecture Modernization Enabling Team (AMET)の活用、継続的な学習と能力開発の重視など、現代化を持続可能な形で実現するための具体的な方法論が示されています。本書は、アーキテクチャ現代化という課題を通じて、現代システムの三体問題に対する包括的な解答を提供しています。アーキテクトやテクニカルリーダーにとって、本書との出会いは、組織の持続的な進化への確かな指針となるでしょう。2025年もみなさん、最後まで読んでくれて本当にありがとうございます。途中で挫折せずに付き合ってくれたことに感謝しています。読者になってくれたら更に感謝です。Xまでフォロワーしてくれたら泣いているかもしれません。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[n週刊アトデ 2025-01-20]]></title>
            <link>https://blog.atusy.net/2025/01/20/atodeyomanakata/</link>
            <guid>https://blog.atusy.net/2025/01/20/atodeyomanakata/</guid>
            <pubDate>Mon, 20 Jan 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[アトデヨム、ウソジャナイ、ヨムノタノシー]]></content:encoded>
        </item>
    </channel>
</rss>