<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com/</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Wed, 07 Dec 2022 18:33:38 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com/</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[lego で既存の秘密鍵を使って証明書を発行する]]></title>
            <link>https://blog.1q77.com/2022/12/issue-the-certificate-using-existing-private-key-with-lego/</link>
            <guid>https://blog.1q77.com/2022/12/issue-the-certificate-using-existing-private-key-with-lego/</guid>
            <pubDate>Wed, 07 Dec 2022 13:42:05 GMT</pubDate>
            <content:encoded><![CDATA[既存の秘密鍵を使って証明書を発行しなければいけないという特殊な環境ですぐに証明書を発行したいということがありました。 lego を使っての証明書発行はとても簡単ですが、デ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[『セキュア・バイ・デザインの鳴くところ』というタイトルでOWASP Fukuoka Meeting #9 に登壇しました。 #owaspfukuoka]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2022/12/07/204400</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2022/12/07/204400</guid>
            <pubDate>Wed, 07 Dec 2022 11:44:00 GMT</pubDate>
            <content:encoded><![CDATA[OWASP Fukuoka Meeting #9 に登壇してきました！登壇してきました。自分はセキュリティ専門家ではないのですが発表するとセキュリティ専門家からレビューをもらえたり意見をいただけるのでそれがとてもよいです。ちなみに発表時間が諸事情により30分から1時間になって想定外の資料の取捨選択を行った...発表時間が30分から1時間になって想定してない肉付けしたら資料の主張が曲がったので改変している。— nwiizo (@nwiizo) December 6, 2022  発表資料セキュア・バイ・デザインの鳴くところ - 安全なソフトウェアを全体から考えるみるで候の資料はこちらです『セキュア・バイ・デザインの鳴くところ』みたいな資料を作成したので公開しておきます！https://t.co/BduVhWd73K#owaspfukuoka— nwiizo (@nwiizo) December 7, 2022  リモート発表は寂しいので相槌を入れてほしいと思っている。主催の@TakaharuOgasa さんや@mrtc0 さんが程よく補足情報を入れたりしてくれてよかった。参考資料OWASP SAMM(Software Assurance Maturity Model)OWASP SAMM(Software Assurance Maturity Model):githubOWT2017JP - OWASP SAMMセキュリティーチェックシートという闇への防衛術CircuitBreakerPattern: Circuit BreakerGitHub - istio/istio: Connect, secure, control, and observe services.Istio By Exampleサービスメッシュの「Istio」や、OSSで構成されたマネージドサービス――ミッションクリティカルなシステムをKubernetesで実現するカギはツールにあり！【デブサミ2018】Design It! ―プログラマーのためのアーキテクティング入門Release It!: Design and Deploy Production-Ready SoftwareOWASP SAMM Toolkit v2.0.6開発環境のセキュリティおよびCI/CDパイプラインのセキュア化PHPerKaigi 2022: 予防に勝る防御なし - 堅牢なコードを導く様々… / 和田卓人SOLID CODE 高品質なコードを生み出す実践的開発手法]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CircleCI で OIDC を使用して AWS 認証を行う]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/circleci-oidc-aws</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/circleci-oidc-aws</guid>
            <pubDate>Wed, 07 Dec 2022 09:15:08 GMT</pubDate>
            <content:encoded><![CDATA[CircleCI Advent Calendar 2022 の 7 日目です。https://qiita.com/advent-calendar/2022/circleci 概要CircleCI では OpenID Connect (OIDC) がサポートされています。OIDC を使用することで長期間有効なアクセスキーなどを用意することなく AWS 認証を行うことが可能です。詳細については下記ページをご参照ください。https://circleci.com/docs/ja/openid-connect-tokens/https://circleci.com/ja/blog...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[社会に蔓延る労苦〈Toil〉をなくす（株式会社スリーシェイク入社エントリ）]]></title>
            <link>https://qiita.com/tayakun/items/2f5ca30b777a54b2c52d</link>
            <guid>https://qiita.com/tayakun/items/2f5ca30b777a54b2c52d</guid>
            <pubDate>Mon, 05 Dec 2022 14:18:53 GMT</pubDate>
            <content:encoded><![CDATA[このエントリーは 3-shake Advent Calendar 2022 5日目の記事です。前日は @aqarium さんによる 徒然なるままにDatadog APM でした。私は株式会社スリ…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Prometheus で探索対象の ServiceMonitor を広げる]]></title>
            <link>https://zenn.dev/toshikish/articles/70424038397d6d</link>
            <guid>https://zenn.dev/toshikish/articles/70424038397d6d</guid>
            <pubDate>Mon, 05 Dec 2022 09:53:34 GMT</pubDate>
            <content:encoded><![CDATA[Kubernetes クラスタで Prometheus を導入し，ServiceMonitor を作って監視対象を定義したところ，一向に Target として追加されないことがありました。ServiceMonitor が作られているだけでは不十分で，Prometheus の探索する対象に入っている必要があります。それがどこで定義されているかを調べました。以下のような ServiceMonitor を考えます。apiVersion: monitoring.coreos.com/v1kind: ServiceMonitormetadata:  name: example-serv...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Grafana OnCall で Twilio を使って電話を受ける]]></title>
            <link>https://qiita.com/yteraoka/items/7e6db7111a061f5e22e4</link>
            <guid>https://qiita.com/yteraoka/items/7e6db7111a061f5e22e4</guid>
            <pubDate>Sat, 03 Dec 2022 16:34:52 GMT</pubDate>
            <content:encoded><![CDATA[Twilio Advent Calendar 4日目の記事です。今年 (2022年) の6月に「Introducing Grafana OnCall OSS, on-call management…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[「セキュア・バイ・デザイン」を読んで自分が何番目の豚かを考える。]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2022/12/01/225019</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2022/12/01/225019</guid>
            <pubDate>Thu, 01 Dec 2022 13:50:19 GMT</pubDate>
            <content:encoded><![CDATA[このエントリーは 3-shake Advent Calendar 2022  2日目の記事です。前日は@koki_develop さんによるStep CI で手軽に API をテストする でした。Step CI は API をテストするためのシンプルなオープンソースのコマンドラインツールです。「第8章: セキュリティを意識したデリバリ・パイプライン」ではStep CI のようなツールを用いてデリバリ・パイプラインで正常値、境界値、異常値、極端値を検査することが推奨されています。qiita.comこのエントリーで言いたいことセキュア・バイ・デザイン という書籍の多様さセキュリティにおける設計の大切さ現代におけるセキュリティの幅広さと難しさが凝縮された一冊であるということセキュリティを面で捉える難しさと重要性このエントリーを書き始めた理由2022年12月7日20:00- よりOWASP Fukuoka Meeting #9で「セキュア・バイ・デザインの鳴くところ」というタイトルで登壇してきます。この発表ではセキュア・バイ・デザイン、シフトレフト、DevSecOps は何すればいいんだよ！ という人に対してOWASP SAMM version 2を軸にガバナンス・設計・実装・検証・運用でのロードマップを明確にして設計・実装に関してもいくつかのTipsに言及していこうと思います。このイベントはYouTubeなどで後から動画を公開しないので動いてる私が見たい場合には参加登録してほしいです。発表の動画は公開されないですが資料は公開する予定です。それに対する予稿的な意味合いで書き始めました。内容は違うのに...。目次このエントリーで言いたいことこのエントリーを書き始めた理由目次はじめに「セキュア・バイ・デザイン 安全なソフトウェア設計」の目次僕たち二番目の子豚良い設計と悪い設計の違いSREは8章から10章が必読3部から読んでも良いと思ったさいごに参考はじめに「セキュア・バイ・デザイン 安全なソフトウェア設計」はOWASP TOP 10のような既知の脅威をリスト化して問題のある実装に対する解法を実装に組み込むためのTips を紹介する書籍ではありません。開発中にセキュリティについて意識する必要はないというような主張をする書籍でもありません。また、ドメイン駆動設計(Domain-Driven Design: DDD)を用いて、設計する書籍なのでDDDで開発しないから関係ないというわけではないです。システムの設計時にセキュリティだけを切り出して別問題として考えるのではなく、システム全体の関心事として扱い、設計時に考慮するというような書籍です。セキュア・バイ・デザイン: 安全なソフトウェア設計 Compass Booksシリーズ作者:Dan Bergh Johnsson,Daniel Deogun,Daniel Sawanoマイナビ出版Amazon「セキュア・バイ・デザイン 安全なソフトウェア設計」の目次セキュア・バイ・デザインについて実例と共に見ていく導入編。ソフトウェアの作成におけるセキュア・バイ・デザインの基盤を構築する設計の原則、考え、コンセプトについて学ぶ基礎編。レガシー・コードの改善、モノリシック・アーキテクチャでよく起こる問題、マイクロサービス・アーキテクチャについて学ぶ応用編の3部構成になっています。第1部: 導入編第1章: なぜ、設計がセキュリティにおいて重要なのか？第2章: ちょっと休憩: 『ハムレット』の悲劇第2部: 基礎編第3章: ドメイン駆動設計の中核を成すコンセプト第4章: 安全性を確立する実装テクニック第5章: ドメイン・プリミティブ（domain primitive）第6章: 状態の完全性（integrity）の保証第7章: 状態の複雑さの軽減第8章: セキュリティを意識したデリバリ・パイプライン第9章: 安全性を考えた処理失敗時の対策第10章: クラウド的考え方によるメリット第11章: ちょっと休憩: 保険料の支払いなしに成立してしまった保険契約第3部: 応用編第12章: レガシー・コードへの適用第13章: マイクロサービスでの指針第14章: 最後に：セキュリティを忘れるべからず！僕たち二番目の子豚家を作る時には壊れにくく、泥棒に盗まれにくい家を考えるのは当たり前です。家のセキュリティにコストをかける必要性は有名なの子豚が教えてくれたとおもいます。開発者はビジネス・ロジックを実装に落とし込みながらセキュリティの脆弱性についても考えなくてはならない。しかし、実装の優先するあまり一番目の子豚のような実装を行ってしまいます。そんな人たちを笑う二番目の子豚もいます。実装を行う開発者は常にセキュリティに関するスペシャリストというわけではないです。それを求めることも現実的ではありません。そのため、WAFを入れたり、脆弱性診断を行ったりします。しかし、それらも絶対ではありません。特に二章の"ちょっと休憩: 『ハムレット』の悲劇"で紹介された。ECサイトで「-1個」購入できるようになってしまうようなインシデントに関する話に関してはWAFがちゃんと設定されてないと無力だったりもする。ちなみに全体を通してセキュリティを意識しないことが大事だというが最終章の14章では全く逆のセキュリティを意識する重要性について説明されている。良い設計と悪い設計の違い全員にレベルの高いセキュアコーディングを要求するのではなく設計に意識を向けることで、従来のアプローチで抱えていたいくつかの問題に関して解決することを目的にしております。特に3-7章に関してはドメイン駆動設計を行う時にこれを意識しない場合にはこういうような脆弱性に繋がるという例は豊富でかつ示唆に富んでいる。また、本書はドメイン駆動設計から言葉、概念を拝借してはいるが"正しい使い方を簡単に、誤った使い方を困難に"ということを設計で達成しようぜと終始言ってるだけな気もする。あくまで私の感想ですけど。SREは8章から10章が必読SREという単語を利用したがこの文章も例に洩れずポジショニングトーク的にSREという単語を利用しておりますので何も言わないでください。SREコンサルという仕事をしているとSREの意味的なゲシュタルト崩壊を起こしてしまいます。情報セキュリティの３大要素にも入るぐらいなのでセキュリティにおいて可用性は重要です。8章から10章は特に私のようにSRE的な仕事をしている人間からするとアイデアの宝庫です。特に大事だと思ったのは使用しているツールのデフォルトの振る舞いを知ることの重要性についてです。既存のシステムで利用している秘伝のタレを継ぎ足しているだけで詳しくなったような気持ちになる。危険。本当はもっと、フォーカスしたいのでここは別でブログ書きたい。ちなみにOWASP Fukuoka Meeting #9のイベントではこの辺が話の中心に添えられている。3部から読んでも良いと思った防御的プログラミングのように良識あるようなTipsの積み重ねで問題発生を事前に防ごうというコーディングスタイルがあります。3部はわりとそれに近い内容に関する言及でレガシーコードとマイクロサービスでの注意点や改善方法がまとめられている。レガシーコードに関しては私の大好きなリファクタリング(第2版): 既存のコードを安全に改善するという書籍がある。もう、1章を追加するならセキュリティの概念を足したようなこの章が追加されてほしいと思いました。マイクロサービスの章に関しては現在、私がソフトウェアアーキテクチャ・ハードパーツ ―分散アーキテクチャのためのトレードオフ分析という書籍を読んでいる。セキュリティ的な品質をソフトウェアの設計へ落とし込むには設計段階で考慮が必要。特に非機能的なので熟考に次ぐ次ぐだけ絶対にどうにかならず経験が必要な領域。最終章は具体的なコードレビューやアーキテクチャレビューにセキュリティの専門家が必要な重要性、脆弱性診断やインシデントハンドリングなどのセキュリティをがっつり意識した内容です。全てをひっくり返す感じがしてとても気持ちが良い。セキュリティの専門家はこの章まで耐えて「気持ちぃいいいいい(実際にどうなるかは知らない)」を経験してほしいです。さいごにあまねく全ての開発者に対してセキュリティの専門家と同等の知識が求められセキュリティに関する知識を常にアップデートしなければならないというこの時代。結局、安全な設計にもセキュリティにもお金が必要になる。地獄の沙汰も金次第。ちゃんと、コストを支払える会社に入社を果たし三番目の豚として幸せな生活をおくれるように祈ってます。本書は本当に良い本なのでこのエントリーで気になった人はぜひ、「セキュア・バイ・デザイン 安全なソフトウェア設計」を購入して熟読して実践してほしいです。明日は我らが長ATSによる「SRE事業をしているので「信頼性」について考えたくなった」です。参考OWASP SAMM version 2セキュア・バイ・デザイン 安全なソフトウェア設計プログラマが知るべき97のこと コードは設計である予防に勝る防御なし - 堅牢なコードを導く様々な設計のヒント良い設計と悪い設計の違い]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Step CI で手軽に API をテストする]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/stepci-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/stepci-introduction</guid>
            <pubDate>Thu, 01 Dec 2022 09:00:00 GMT</pubDate>
            <content:encoded><![CDATA[3-shake Advent Calendar 2022 の 1 日目です。株式会社スリーシェイクのメンバーが各々自由に技術・非技術ネタを投稿していきます。https://qiita.com/advent-calendar/2022/3-shake1 日目のこの記事では、 Step CI という API テストツールが最高だったので紹介します。 概要Step CI は API をテストするためのシンプルなオープンソースのコマンドラインツールです。REST はもちろん、 GraphQL や gRPC などその他様々な種類の API に対応しています。stepci CLI を...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes 上でsablier を用いてZero Scale を実現する 前編]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2022/11/30/085418</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2022/11/30/085418</guid>
            <pubDate>Tue, 29 Nov 2022 23:54:18 GMT</pubDate>
            <content:encoded><![CDATA[前回のエントリーsyu-m-5151.hatenablog.comはじめにやはり、人は強欲らしいのでコンテナを使っているのに必要な時必要な分だけのリソースを起動させてほしいという願いを常に持っている。Kubernetes の場合はKnativeなどを利用すれば達成できる。sablierはリバースプロキシを利用してアクセスがない時は自動的にシャットダウンしてアクセスがあれば指定のコンテナを起動することができるツールです。前回はdocker 上での動作確認を行った。引き続き今回はKubernetes 環境でのsablierの検証を行いました。今回はsablierやTraefik 、各種ミドルウェアの設定ファイルに関しては言及してません。気合があれば後編として書いていきます。sablier/hourglass.png at main · acouvreur/sablier · GitHub より前回のエントリーはじめにやってみるk3s を用いて Kubernetes Cluster を作成するHelmを用いたTraefikの作成Sablier を作成していくアプリケーション本体のデプロイSablier PluginによるTraefik経由でのIngressの設定を行うさいごに作業リポジトリやってみる公式サイトにはサンプルコード「Sablier Guide: Code-Server + Traefik + Kubernetes Ingress」としてKubernetes 上で Cloud Native なアプリケーションプロキシーのTraefikとKubernetes Ingressを用いたものが紹介されている。k3s を用いて Kubernetes Cluster を作成する以下の内容をdocker-compose.ymlというファイルにコピーして、docker compose up -dを実行します。version: '3'services:  server:    image: "rancher/k3s:v1.24.8-k3s1"    command: server --no-deploy traefik    tmpfs:      - /run      - /var/run    ulimits:      nproc: 65535      nofile:        soft: 65535        hard: 65535    privileged: true    restart: always    environment:      - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml      - K3S_KUBECONFIG_MODE=666    volumes:      # This is just so that we get the kubeconfig file out      - .:/output    ports:      - 6443:6443  # Kubernetes API Server      - 8080:80  # Ingress controller port 80docker compose up -dを実行します。$ docker compose up -d[+] Running 3/3 ⠿ server Pulled   ⠿ 73c47571f4bd Pull complete   ⠿ 210e8c1c5e29 Pull complete[+] Running 2/2 ⠿ Network sablier-code-server-traefik-kubernetes_default     Created ⠿ Container sablier-code-server-traefik-kubernetes-server-1  Startedset -x KUBECONFIG ./kubeconfig.yaml:/Users/nwiizo/.kube/config のような設定が環境変数として入っているのでカレントディレクトリにあるkubeconfig.yaml がKUBECONFIGとして優先的に実行される。そこでkubectl get node を実行するとCluster が準備できていることが分かる。$ kubectl get nodeNAME           STATUS     ROLES                  AGE     VERSION58160ffa6e9b   Ready      control-plane,master   3m56s   v1.24.8+k3s1Helmを用いたTraefikの作成helm のインストールに関しては各自「helm install」とかで調べてほしい。とりあえず、traefikのHelmリポジトリを追加します。$ helm repo add traefik https://helm.traefik.io/traefik$ helm repo updatehelm でデプロイするリソースは事前に確認しておいたほうがよいので確認しておきます。$ helm show all traefik/traefikデプロイをするのですが既存のHelm templateに自分が利用したい値を渡してデプロイします。templateに値を渡す方法は主に二つあります。values.yamlを利用者が用意するchartの利用者が helm install コマンド時に値を渡す(values.yamlの上書き可能)今回はvalues.yaml を以下のように作成してデプロイを行うimage:  tag: "2.9.1"experimental:  plugins:    enabled: trueadditionalArguments:  - "--experimental.plugins.sablier.moduleName=github.com/acouvreur/sablier"  - "--experimental.plugins.sablier.version=v1.1.1"providers:  kubernetesIngress:    enabled: true    allowEmptyServices: truetraefikチャートをvalues.yamlファイルとともにインストールします。また、kube-system というシステムコンポーネントやアドオンとして位置づけられているものをデプロイするためのNamespaceを用います。$ helm install traefik traefik/traefik -f values.yaml --namespace kube-systemNAME: traefikLAST DEPLOYED: Wed Nov 30 07:58:21 2022NAMESPACE: kube-systemSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:Traefik Proxy v2.9.5 has been deployed successfullyon kube-system namespace !Sablier を作成していく再三の説明になるのですがsablier はアプリケーションをシャットダウンさせたりしているアプリです。それ故に強い権限が必要になります。そのため、Sablier 用のサービスアカウント作成して、 Sablier のデプロイを行います。sablier-sa.yaml というファイルで権限周りを一つにした。---apiVersion: v1kind: ServiceAccountmetadata:  name: sablier  namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:  name: sablier  namespace: kube-systemrules:  - apiGroups:      - apps      - ""    resources:      - deployments      - deployments/scale      - statefulsets      - statefulsets/scale    verbs:      - patch   # Scale up and down      - get     # Retrieve info about specific deployment or statefulset      - update  # Scale up and down      - list    # Events      - watch   # Events---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: sablier  namespace: kube-systemroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: sabliersubjects:  - kind: ServiceAccount    name: sablier    namespace: kube-systemこちらをデプロイ$ kubectl apply -f sablier-sa.yaml serviceaccount/sablier createdclusterrole.rbac.authorization.k8s.io/sablier createdclusterrolebinding.rbac.authorization.k8s.io/sablier createdsablier-deploy.yaml というファイルでリソース周りを一つにした。apiVersion: apps/v1kind: Deploymentmetadata:  name: sablier-deployment  namespace: kube-system  labels:    app: sablierspec:  replicas: 1  selector:    matchLabels:      app: sablier  template:    metadata:      labels:        app: sablier    spec:      serviceAccountName: sablier      serviceAccount: sablier      containers:      - name: sablier        image: acouvreur/sablier:1.1.1        args:        - "start"        - "--provider.name=kubernetes"        ports:        - containerPort: 10000---apiVersion: v1kind: Servicemetadata:  name: sablier  namespace: kube-systemspec:  selector:    app: sablier  ports:    - protocol: TCP      port: 10000      targetPort: 10000こちらもデプロイ$ kubectl apply -f sablier-deploy.yaml deployment.apps/sablier-deployment createdservice/sablier createdきちんとデプロイされているか確認する。また、kubectl -n kube-system logs -l=app=sablier でログを確認するのも良いと思う$ kubectl -n kube-system get deployments -l=app=sablierNAME                 READY   UP-TO-DATE   AVAILABLE   AGEsablier-deployment   1/1     1            1           6m9sアプリケーション本体のデプロイapp-deployment.yaml でアプリケーションのリソースをデプロイします。apiVersion: apps/v1kind: Deploymentmetadata:  name: code-server-deployment  namespace: default  labels:    app: code-serverspec:  replicas: 1  selector:    matchLabels:      app: code-server  template:    metadata:      labels:        app: code-server    spec:      containers:      - name: code-server        image: codercom/code-server:4.8.3        ports:        - containerPort: 8080---apiVersion: v1kind: Servicemetadata:  name: code-server-service  namespace: defaultspec:  selector:    app: code-server  ports:    - protocol: TCP      port: 8080      targetPort: 8080kubectl にk というalias を貼っている。手癖でこうなったのでブログでも記載しておく。リソースの確認をk get pod したらさっさと次に行く$ k apply -f app-deployment.yaml deployment.apps/code-server-deployment createdservice/code-server-service createdSablier PluginによるTraefik経由でのIngressの設定を行うapp-ingress.yaml でデプロイするapiVersion: networking.k8s.io/v1kind: Ingressmetadata:  name: code-server-ingress  namespace: default  annotations:    kubernetes.io/ingress.class: traefikspec:  rules:  - host: localhost    http:      paths:      - path: /        pathType: Prefix        backend:          service:            name: code-server-service            port:              number: 8080http://localhost:8080 にアクセスできたと思います。その後、アプリケーションのレプリカセットを0にします。がこれは削除ではないです。$ k scale deployment code-server-deployment --replicas=0deployment.apps/code-server-deployment scaled# 削除されたわけではないので確認できる$  k get deployments/code-server-deployment NAME                     READY   UP-TO-DATE   AVAILABLE   AGEcode-server-deployment   0/0     0            0           12mapp-sablier-middleware.yaml をデプロイする。sessionDuration: 2m に設定をしたので2分後には落ちるはずです。apiVersion: traefik.containo.us/v1alpha1kind: Middlewaremetadata:  name: code-server-sablier  namespace: defaultspec:  plugin:    sablier:      names: deployment_default_code-server-deployment_1      sablierUrl: 'http://sablier:10000'      sessionDuration: 2m      dynamic:        displayName: 'Code Server Demo'        showDetails: true        theme: hacker-terminal        refreshFrequency: 5s$ k apply -f app-sablier-middleware.yaml$ k get middlewareNAME                  AGEcode-server-sablier   2m5sその後にapp-ingress-patch.yaml を作成し、kubectl patch ingress code-server-ingress --patch-file app-ingress-patch.yaml でIngressにパッチを当てます。metadata:  annotations:    traefik.ingress.kubernetes.io/router.middlewares: default-code-server-sablier@kubernetescrdパッチを当てた直後はアクセスがないのでpod 数は0です。$ k get pod No resources found in default namespace.しかし、traefik 及びsablier の動作によってhttp://localhost:8080 に何もせずにアクセスできました。この時に関連している各種ログを確認すると動作していることがわかります。$ k get pod NAME                                      READY   STATUS    RESTARTS   AGEcode-server-deployment-7f56554786-j4b69   1/1     Running   0          2m44sそして、2分後にはシャットダウンされていると思います。# -w で継続的にウォッチする$ k get po -wNAME                                      READY   STATUS    RESTARTS   AGEcode-server-deployment-7f56554786-t5j8x   1/1     Running   0          36scode-server-deployment-7f56554786-t5j8x   1/1     Terminating   0          2m17scode-server-deployment-7f56554786-t5j8x   0/1     Terminating   0          2m18scode-server-deployment-7f56554786-t5j8x   0/1     Terminating   0          2m18scode-server-deployment-7f56554786-t5j8x   0/1     Terminating   0          2m18sさいごに本来やりたかった。Kubernetes 環境での動作確認までできました。此処から先は皆さんの環境に合うようにいくつかの設定ファイルを見ていく会を本来やれれば良かったですが眠いのでおやすみです。作業リポジトリgithub.com]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[【Codezine掲載】エンジニアの事業貢献、必要な第一歩とは？ 松本亮介氏×スリーシェイクが解説！ エンジニアがプロダクトやビジネスへの理解を深める方法]]></title>
            <link>https://sreake.com/blog/codezine_engineer_product/</link>
            <guid>https://sreake.com/blog/codezine_engineer_product/</guid>
            <pubDate>Tue, 29 Nov 2022 05:25:53 GMT</pubDate>
            <content:encoded><![CDATA[「デベロッパーの成長と課題解決に貢献するメディア」をコンセプトに情報発信を行うソフトウェア開発者向けWebメディア「Codezine」に、弊社SREである手塚と、多数の企業で技術顧問などを務める松本亮介氏の対談記事が掲載されましたThe post 【Codezine掲載】エンジニアの事業貢献、必要な第一歩とは？ 松本亮介氏×スリーシェイクが解説！ エンジニアがプロダクトやビジネスへの理解を深める方法 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google BigQuery: The Definitive Guideを読んでみた]]></title>
            <link>https://sreake.com/blog/google-bigquery-the-definitive-guide/</link>
            <guid>https://sreake.com/blog/google-bigquery-the-definitive-guide/</guid>
            <pubDate>Tue, 29 Nov 2022 02:25:13 GMT</pubDate>
            <content:encoded><![CDATA[はじめに 2021年スリーシェイクに入社してから案件で BigQuery を触ったのをきっかけに、Google BigQuery: The Definitive Guideを読んだので本の内容を一部紹介します。 10章ま […]The post Google BigQuery: The Definitive Guideを読んでみた first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[オブザーバビリティについて理解する (収集・分析・可視化）]]></title>
            <link>https://sreake.com/blog/observability/</link>
            <guid>https://sreake.com/blog/observability/</guid>
            <pubDate>Tue, 29 Nov 2022 01:05:03 GMT</pubDate>
            <content:encoded><![CDATA[クラウド基盤の登場により、自社でサーバーを構築してシステムを運用するオンプレ以外の選択肢が増えてきました。多くの企業では、クラウド基盤を活用してシステム運用の効率化を図っているでしょう。 しかし、システムによってはまだま […]The post オブザーバビリティについて理解する (収集・分析・可視化） first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[私はGo言語でシェルスクリプトが書きたい不都合な生きもの]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2022/11/26/174017</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2022/11/26/174017</guid>
            <pubDate>Sat, 26 Nov 2022 08:40:17 GMT</pubDate>
            <content:encoded><![CDATA[Goに入ってはGoに従え 私の好きな言葉です(スライド)。XX(架空の)という言語を書いてるならばXX言語らしく書きましょうと常々、思っております。しかし、インフラエンジニアの魂に最も刻まれた言語は何か？ それはシェルスクリプトではないですか。異論は認めます。はじめになんでみんなこんなに怒っているのかというような疑問はある。世の中がぎすぎすしていて、明るい話題がない。この世にはもっと明るい話が必要だと思うのだが、思いつきませんでした。まず、シェルスクリプトだとこう書くという明確な思考があるのにそれをGo言語で表現する方法が分からない場面で悔しい思いをしてきた方もいらっしゃるのではないかと思います。そういう方に明るい話題を提供したいです。script はシェルスクリプトが得意とする、ファイルの読み込み、サブプロセスの実行、行数のカウント、文字列のマッチングなどを行うための Go のライブラリです。Goでシステム管理プログラムを書くのは、典型的なシェルと同じように簡単ですか？ scriptはそれを簡単にすることを目的としています。大体の場合ではScripting with Go といくつかのブログを読めばよい。script/magic.png at master · bitfield/script · GitHub より引用github.comシェル芸という実益を兼ねた趣味シェル芸というおしゃれでハイソな趣味がある。シェル芸とは、マウスも使わず、ソースコードも残さず、GUIツールを立ち上げる間もなく、あらゆる調査・計算・テキスト処理をCLI端末へのコマンド入力一撃で終わらすこと。あるいはそのときのコマンド入力のこと(シェル芸の定義バージョン1.1 より引用) を指すのだかこれをやっていくのはインフラエンジニアが運用をやっていくなかで力になるものです。私も学生時代にシェル芸初心者によるシェル芸入門 というスライド をみてとてもお世話になった。こちらから演習1の問題を拝借してscript について紹介したいと思います。演習1 という演習先程、紹介したシェル芸初心者によるシェル芸入門というスライドには演習があります。演習1の内容は /home 以下(MACの場合には/Users)から現在ログインしているユーザーの名前を含むファイルを全て列挙してくださいというものです。それをシェルスクリプトで書くと以下のようになります。想定回答はこちらgrep -r `whoami` /Users | grep -v matches 2>/dev/null解く🐘この課題をscript を用いて解決したい。と思ったのですがgrep に-r オプションがないことに気づいたのでfindfile を用いて実行する。package mainimport (    "fmt"    "strings"    "github.com/bitfield/script")func main() {    // whoami は用意されていないです。だが、用意されていないコマンドもexecで実行できる    user, _ := script.Exec("whoami").String()    // exec で実行したら実行後の改行が入るので削除しておくオプションがあるなら知りたい    // filepath を作成する    user_file_path := "/Users/" + remove_line_breaks(user) + "/"    // 実際のコマンドを実行して標準出力に投げる    _, err := script.FindFiles(user_file_path).Stdout()    if err != nil {        fmt.Println(err)    }}// 末尾の改行を削除するfunc remove_line_breaks(s string) string {    s = strings.TrimRight(s, "\n")    if strings.HasSuffix(s, "\r") {        s = strings.TrimRight(s, "\r")    }    return s}権限周りで辛いが権限をめちゃくちゃにイジるとMACの場合でもいける...。さいごに実際の技術検証だったらscript.Exec()が具体的にどのようにシェルで実行されたりするのかを調べるのですが別に趣味なのでここで終わりです。script を書いてて気付いたのですが別に各コマンドを実行するための近しいパッケージは存在するのでそれを調べて使えばぁッ...　ここで彼のメッセージは途切れる。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[sablier でコンテナのScale to zero が実現できるので覗き見だけした。]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2022/11/25/185409</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2022/11/25/185409</guid>
            <pubDate>Fri, 25 Nov 2022 09:54:09 GMT</pubDate>
            <content:encoded><![CDATA[はじめに人は強欲なのでコンテナを使っているのに必要な時必要な分だけのリソースを起動させてほしいという願いを常に持っている。Kubernetes の場合はKnativeなどを利用すれば達成できる。が今回はsablierというツールを紹介する。sablierはリバースプロキシを利用してアクセスがない時は自動的にシャットダウンしてアクセスがあれば指定のコンテナを起動することができるツールです。sablier/hourglass.png at main · acouvreur/sablier · GitHub よりやってみる公式サイトにはサンプルコードとして Cloud Native なアプリケーションプロキシーのTraefikを用いたものが紹介されている。ブログを書いている2022年11月25日の時点でplugins配下にTraefik しかないがnginxも追加しようというIssues が上がっている。Git CloneGit Clone をとりあえずしてRepositoryを持ってくる。こういう時にghqでローカルリポジトリを管理するかとても悩むのですが私は検証のみを行いたい時にはghqでは管理しないことが多いです。git clone https://github.com/acouvreur/sabliercd sablierdocker compose up最近、docker-compose がdocker に統合されたのでdocker-compose ではなくdocker compose を利用する。自分自身のこういうスタンス、嫌いではないです。docker compose up -d[+] Running 13/13 ⠿ whoami Pulled                                                                                     6.7s   ⠿ 29015087d73b Pull complete                                                                      0.9s   ⠿ 0109a00d13bc Pull complete                                                                      1.2s   ⠿ dfc0c371343c Pull complete                                                                      3.0s ⠿ traefik Pulled                                                                                    7.3s   ⠿ 47517142f6ba Pull complete                                                                      2.0s   ⠿ 24e179f025e9 Pull complete                                                                      2.3s   ⠿ 94b59dd82910 Pull complete                                                                      5.4s   ⠿ d3d7e56d0086 Pull complete                                                                      5.5s ⠿ sablier Pulled                                                                                   10.1s   ⠿ 9b18e9b68314 Pull complete                                                                      3.0s   ⠿ f8cfeb0e421f Pull complete                                                                      5.8s   ⠿ 3e48bafb90b9 Pull complete                                                                      5.8s[+] Running 3/3 ⠿ Container sablier-sablier-1  Started                                                              0.7s ⠿ Container sablier-whoami-1   Started                                                              0.8s ⠿ Container sablier-traefik-1  Started                                                              0.8ssablier-sablier-1,sablier-traefik-1,sablier-whoami-1 が動作していることが分かる。docker compose psNAME                COMMAND                  SERVICE             STATUS              PORTSsablier-sablier-1   "/etc/sablier/sablie…"   sablier             running             10000/tcpsablier-traefik-1   "/entrypoint.sh --ex…"   traefik             running             0.0.0.0:8080->80/tcpsablier-whoami-1    "/whoami"                whoami              running             80/tcp説明しておくとsablier-sablier-1 がシャットダウンさせたりしているアプリです。sablier-traefik-1 がリバースプロキシなのですがPluginの機構としてこちらがあることによってアプリケーションに変更を加えることなく機能の追加を行うことができる。典型的なサイドカーパターンですね。sablier-whoami-1 がアプリケーションの本体です。sablier/reverse-proxy-integration.png at main · acouvreur/sablier · GitHub よりまた、起動したdocker-compose の設定ファイルを読むと分かるが設定ファイルに関してdynamic-config.ymlが設定されておりアプリケーションの本体に対する設定はこちらで行われている。version: "3.7"services:  traefik:    image: traefik:2.9.1    command:      - --experimental.plugins.sablier.moduleName=github.com/acouvreur/sablier      - --experimental.plugins.sablier.version=v1.1.0      - --entryPoints.http.address=:80      - --providers.docker=true      - --providers.file.filename=/etc/traefik/dynamic-config.yml    ports:      - "8080:80"    volumes:      - '/var/run/docker.sock:/var/run/docker.sock'      - './dynamic-config.yml:/etc/traefik/dynamic-config.yml'  sablier:    image: acouvreur/sablier:1.1.0    volumes:      - '/var/run/docker.sock:/var/run/docker.sock'    labels:      - traefik.enable=true      # Dynamic Middleware      - traefik.http.middlewares.dynamic.plugin.sablier.names=sablier-whoami-1      - traefik.http.middlewares.dynamic.plugin.sablier.sablierUrl=http://sablier:10000      - traefik.http.middlewares.dynamic.plugin.sablier.sessionDuration=1m      - traefik.http.middlewares.dynamic.plugin.sablier.dynamic.theme=hacker-terminal      # Blocking Middleware      - traefik.http.middlewares.blocking.plugin.sablier.names=sablier-whoami-1      - traefik.http.middlewares.blocking.plugin.sablier.sablierUrl=http://sablier:10000      - traefik.http.middlewares.blocking.plugin.sablier.sessionDuration=1m      - traefik.http.middlewares.blocking.plugin.sablier.blocking.timeout=30s  whoami:    image: containous/whoami:v1.5.0    # Cannot use labels because as soon as the container is stopped, the labels are not treated by Traefik    # The route doesn't exist anymore. Use dynamic-config.yml file instead.    # labels:    #  - traefik.enable    #  - traefik.http.routers.whoami.rule=PathPrefix(`/whoami`)    #  - traefik.http.routers.whoami.middlewares=dynamic@dockersablier/docker-compose.yml at main · acouvreur/sablier · GitHub より一旦、万全な状態でのアクセス確認を行うcurl http://localhost:8080/whoami/blockingHostname: 57f6719e2c3bIP: 127.0.0.1IP: 172.24.0.2RemoteAddr: 172.24.0.4:35092GET /whoami/blocking HTTP/1.1Host: localhost:8080User-Agent: curl/7.84.0Accept: */*Accept-Encoding: gzipX-Forwarded-For: 172.24.0.1X-Forwarded-Host: localhost:8080X-Forwarded-Port: 8080X-Forwarded-Proto: httpX-Forwarded-Server: d53703352004X-Real-Ip: 172.24.0.1アクセスの確認ができた。docker compose stopアプリケーション本体のコンテナを止める。docker compose stop whoami[+] Running 1/1 ⠿ Container sablier-whoami-1  Stoppedアプリケーション本体が止まっていることを確認できました。docker compose psNAME                COMMAND                  SERVICE             STATUS              PORTSsablier-sablier-1   "/etc/sablier/sablie…"   sablier             running             10000/tcpsablier-traefik-1   "/entrypoint.sh --ex…"   traefik             running             0.0.0.0:8080->80/tcpsablier-whoami-1    "/whoami"                whoami              exited (2)curl http://localhost:8080/whoami/blocking先程、と同様にエンドポイントを確認するとアクセスすることが確認できた。秒数としてどれくらい差分があるのか確認したかったが眠い。curl http://localhost:8080/whoami/blockingHostname: 57f6719e2c3bIP: 127.0.0.1IP: 172.24.0.2RemoteAddr: 172.24.0.4:35104GET /whoami/blocking HTTP/1.1Host: localhost:8080User-Agent: curl/7.84.0Accept: */*Accept-Encoding: gzipX-Forwarded-For: 172.24.0.1X-Forwarded-Host: localhost:8080X-Forwarded-Port: 8080X-Forwarded-Proto: httpX-Forwarded-Server: d53703352004X-Real-Ip: 172.24.0.1docker compose logs でログを確認するとStarting up on port 80とシャットダウンと起動を何度か繰り返していることが確認できた。また、自主的にstop せずとも落ちていることは確認できた。Linux 側からもプロセスを確認しようと思っていたが深夜なのでもう眠い。docker compose logs sablier-whoami-1   | Starting up on port 80sablier-whoami-1   | Starting up on port 80さいごにあまり使わない機能が多い検証環境や開発環境で利用するにはとても良いサービスだと思った。深夜かつ飲酒によって、本来はKubernetes 環境での動作確認までしたかったのですが眠いので終わりますが一応、公開します。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[複数の Terraform リソースを一度に別の tfstate ファイルに移動する]]></title>
            <link>https://zenn.dev/toshikish/articles/61db8661cb28ba</link>
            <guid>https://zenn.dev/toshikish/articles/61db8661cb28ba</guid>
            <pubDate>Fri, 25 Nov 2022 07:33:50 GMT</pubDate>
            <content:encoded><![CDATA[Terraform の tfstate ファイル間のリソースの移動方法は，基本的には以下の記事の通りです。https://www.karakaram.com/moving-terraform-resources-to-another-tfstate-file/この記事では複数リソースを移動したい場合の方法を書きます。 方法やることはシンプルで，リソースをファイルで列挙して xargs で terraform state mv を繰り返すだけです。移動元ディレクトリで terraform state list を実行することで，その tfstate ファイル内の全リソースを取...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[これでライブコーディングも怖くない！ cLive でターミナル操作を自動化する]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/clive-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/clive-introduction</guid>
            <pubDate>Thu, 17 Nov 2022 09:29:33 GMT</pubDate>
            <content:encoded><![CDATA[cLive とは？cLive はシンプルな設定ファイルに基づいてターミナルを自動で操作するためのコマンドラインツールです。自動操作するターミナルはブラウザで表示されます。そのため、「任意のターミナルアプリで cLive を起動して、ブラウザだけ画面共有して自動ライブコーディングをする」といった使い方ができます。JavaScript のライブコーディングデモもちろん日本語入力も可能ですし、任意のタイミングで一時停止しておけば必要に応じて手動による操作もできます。手動操作のデモ リポジトリhttps://github.com/koki-develop/cliveス...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[3-shake 秋季インターンブログ] eBPF によるコンテナセキュリティツールの Tetragon を検証してみた]]></title>
            <link>https://sreake.com/blog/ebpf-tetragon/</link>
            <guid>https://sreake.com/blog/ebpf-tetragon/</guid>
            <pubDate>Mon, 14 Nov 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Sreake事業部で2022年10月11日 ~ 24日に開催された短期インターンに参加しました。eBPF によるコンテナランタイムセキュリティツールの Tetragon の技術検証と運用方法の提案を行いました。以下では、その成果をまとめたいと思います。The post [3-shake 秋季インターンブログ] eBPF によるコンテナセキュリティツールの Tetragon を検証してみた first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RPM の install, uninstall 時に実行される script の確認]]></title>
            <link>https://blog.1q77.com/2022/11/rpm-scripts/</link>
            <guid>https://blog.1q77.com/2022/11/rpm-scripts/</guid>
            <pubDate>Thu, 10 Nov 2022 23:38:02 GMT</pubDate>
            <content:encoded><![CDATA[ある RPM Package のインストール、アンインストール時にどんな処理が行われているのか確認したいことがある そんな時な rpm コマンドの --scripts オプションを使用する rpm -qp --scripts ./some.rpm]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS IAM ポリシーの StringNotEquals 条件の複数値指定は AND になる]]></title>
            <link>https://zenn.dev/toshikish/articles/2d9274783acbae</link>
            <guid>https://zenn.dev/toshikish/articles/2d9274783acbae</guid>
            <pubDate>Thu, 10 Nov 2022 08:31:56 GMT</pubDate>
            <content:encoded><![CDATA[AWS IAM ポリシーの条件で同一キーに対して複数値を指定した場合，通常は OR で評価されます。例えば，以下の StringEquals 条件の例では，aws:PrincipalTag/role が audit または security のいずれかであれば true になります。"Condition": {  "StringEquals": {    "aws:PrincipalTag/role": [ "audit", "security" ]  }}では StringNotEquals 条件にするとどうでしょうか？例えば以下のポリシーで aws:Principal...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[3-shake 秋季インターンブログ] Config Connectorの検証]]></title>
            <link>https://sreake.com/blog/config-connectortest/</link>
            <guid>https://sreake.com/blog/config-connectortest/</guid>
            <pubDate>Wed, 09 Nov 2022 03:02:42 GMT</pubDate>
            <content:encoded><![CDATA[SRE技術の調査と研究を行う目的で2022年10月11日 ~ 24日に開催された短期インターンに参加しました。2週間という期間を使って、Google CloudのConfig Connectorについて調査を行ったので、本記事ではその調査結果をまとめます。The post [3-shake 秋季インターンブログ] Config Connectorの検証 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2022年10月のふりかえり、まとめ]]></title>
            <link>https://blog.masasuzu.net/entry/2022/11/09/082007</link>
            <guid>https://blog.masasuzu.net/entry/2022/11/09/082007</guid>
            <pubDate>Tue, 08 Nov 2022 23:20:07 GMT</pubDate>
            <content:encoded><![CDATA[7年ぶりにふり返りするような気がします。これぶりですかね。blog.masasuzu.net10月は思い立って細かいことでも記録に残すようにし始めたのでサブブログの月間投稿数が増えてます。このまま続けたいところです。メインブログは相変わらず0なのでちゃんと書きたいところではあります。2022-10-01から1ヶ月間の記事一覧 - ふり返る暇なんて無いね仕事10月は端境期だったので、技術検証をメインでやってました。技術メインブログの方はどちらかというとパブリック向けに書いてます。ただ、この方針だと記事がゆるい記事が書きにくくなってきたので、サブブログを作った経緯があります。サブブログの技術記事は他の誰かのためではなく未来の自分が思い出すために書くをモットーに書いてます。なのでゆるく、細かい系のことも気軽に書いてます。分からないことは分からないと明示する。途中でも経過を残す。恥も残す。そんな感じです。以前とくらべてGoogle Cloud回りを10月はいじってた感じですね。build-in commandのmanが引けなくて困った - ふり返る暇なんて無いねt3系インスタンスのスペックについて - ふり返る暇なんて無いねGoogle Cloudの外部HTTP(S)ロードバランサと外部HTTP(S)ロードバランサ(従来型)の違いがわからなかった。 - ふり返る暇なんて無いね未解決: Google Cloud Storageの静的配信でnginxで言うところのtry_files的なことをしたかった。。。。 - ふり返る暇なんて無いねはてなブログのカテゴリごとのRSSフィード - ふり返る暇なんて無いねGitHub Actionsで save-state とset-output が廃止されるようです。 - ふり返る暇なんて無いね故障と障害の違いがわからずに困惑してた - ふり返る暇なんて無いね資格PCA取りました!11月にはPCA、KCNA、年内にCKA、CKADを取ることを目標に業務とは別に学習してます。なお、業務ではGoogle CloudもKubernetesも今のところ触る余地ないです。が、将来の投資として学習してます。近い未来で使うのが目に見えてるので。Google Cloud認定 Professional Cloud Architect合格してた - ふり返る暇なんて無いね11月末ターゲットで2個資格試験受けます - ふり返る暇なんて無いね旅土曜日の午前中に温泉入るのにはまってます。休日の早い時間に行動すると時間の有効活用ができるなとしみじみ感じてます。人生に疲れたので熱海で温泉入ってきた - ふり返る暇なんて無いね横須賀で温泉入ってきた - ふり返る暇なんて無いね江ノ島に行ってきて午前中だけで満足した - ふり返る暇なんて無いね生活寒くなりましたが、がんばります。今季初暖房使いました。 - ふり返る暇なんて無いね技術書を複数回読むということ - ふり返る暇なんて無いねワクチン4回目打った💉💉💉💉 - ふり返る暇なんて無いね11月に向けてといっても11月始まってますが。11月は資格の勉強もあるし、新しい固めのお仕事も始まるので、だいぶヘビーになる予感を感じてます。寒くなる季節なので体調には気を付けつつも、引き続き温泉につかり、ブログ書くのも続けて行きたいですね。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cognito ユーザープールに削除保護を設定できるようになったので試してみた]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/aws-cognito-user-pool-deletion-protection</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/aws-cognito-user-pool-deletion-protection</guid>
            <pubDate>Mon, 07 Nov 2022 10:49:54 GMT</pubDate>
            <content:encoded><![CDATA[Cognito ユーザープールに削除保護を設定できるようになりました。https://aws.amazon.com/jp/about-aws/whats-new/2022/10/amazon-cognito-console-user-pool-deletion-protection/削除保護の設定方法と、削除保護が有効なときに削除しようとしたときの挙動を調べてみました。 削除保護を有効にする手順 Terraform から設定する場合!AWS Provider のバージョンが 4.38.0 以上である必要があります。aws_cognito_user_pool Resou...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[3-shake 秋季インターンブログ] Trivy Operator を用いた脆弱性管理の提案]]></title>
            <link>https://sreake.com/blog/trivy_operator_vulnerability/</link>
            <guid>https://sreake.com/blog/trivy_operator_vulnerability/</guid>
            <pubDate>Mon, 07 Nov 2022 07:04:20 GMT</pubDate>
            <content:encoded><![CDATA[Sreake 事業部は SRE関連技術に強みを持つエンジニアによるコンサルテーションサービスを提供する事業部であり、私たちも SRE 技術の調査と研究を行う目的で2022年10月11日 ~ 24日に開催された短期インターンに参加しました。2週間という期間を使って、Trivy Operator の技術検証と運用方法の提案を行いました。本記事では、その成果をまとめたいと思います。The post [3-shake 秋季インターンブログ] Trivy Operator を用いた脆弱性管理の提案 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GoでHTTPミドルウェアをチェインするライブラリを書いた]]></title>
            <link>https://zenn.dev/pranc1ngpegasus/articles/30638ae4d15ae6</link>
            <guid>https://zenn.dev/pranc1ngpegasus/articles/30638ae4d15ae6</guid>
            <pubDate>Sun, 06 Nov 2022 00:07:27 GMT</pubDate>
            <content:encoded><![CDATA[GoでHTTPサーバを書くとき、ミドルウェアを利用することがある。関数を入れ子にすることで数珠つなぎにできるが記述が長くなってしまう。go-chiなどのHTTPフレームワークにはミドルウェアをチェインするメソッドが生えていることがある。しかし、このメソッドはフレームワークに強く依存していて使い回しにくいのでライブラリとして切り出した。https://github.com/Pranc1ngPegasus/middlechain どうやって使うのこのライブラリは以下のようにして使うことができる。mux := http.NewServeMux()handler := mid...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[/etc/hosts で wildcard や CNAME 対応させたい]]></title>
            <link>https://blog.1q77.com/2022/10/mac-etc-resolver/</link>
            <guid>https://blog.1q77.com/2022/10/mac-etc-resolver/</guid>
            <pubDate>Sun, 30 Oct 2022 14:56:34 GMT</pubDate>
            <content:encoded><![CDATA[macOS での話です。(macOS Ventura でも機能することを確認しました) /etc/hosts で 203.0.113.2 *.example.com みたいに wildcard に対応させたいことが稀にあります。 また、AWS の Application Load Balancer のように IP アドレスの固定され]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[VHS でターミナルを録画する]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/vhs-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/vhs-introduction</guid>
            <pubDate>Sun, 30 Oct 2022 09:27:18 GMT</pubDate>
            <content:encoded><![CDATA[VHS という CLI ツールを見かけて試しに使ってみたら最高すぎたので簡単な紹介です。https://github.com/charmbracelet/vhsVHS を使用すると、例えばこういう GIF を作成したりできます。CLI ツールのデモ動画を作成する際などに大活躍しそうです。 検証環境VHS v0.1.1 前提条件VHS を使用するには事前に ffmpeg と ttyd のインストールが必要です。例えば Homebrew を使っている場合は brew install でインストールすることができます。$ brew install ffmpeg tt...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes クラスタ内ホスト名に CNAME レコードでエイリアスを付与したい]]></title>
            <link>https://zenn.dev/toshikish/articles/7f555dbf1b4b7d</link>
            <guid>https://zenn.dev/toshikish/articles/7f555dbf1b4b7d</guid>
            <pubDate>Fri, 28 Oct 2022 10:45:26 GMT</pubDate>
            <content:encoded><![CDATA[Kubernetes クラスタ内で使えるホスト名に CNAME レコード相当でエイリアスを付与したい場合を考えます。クラスタ内では CoreDNS が使われているものとします。 TL;DRCorefile（CoreDNS の設定ファイル）で rewrite プラグインを使って記述します。例えば Service のアドレスである foo.default.svc.cluster.local を foo.example.com にエイリアスしたい場合は以下のように行を追加します。apiVersion: v1kind: ConfigMapmetadata:  name: cor...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CI/CD も Go で書いてみた]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/gogogo-cicd-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/gogogo-cicd-introduction</guid>
            <pubDate>Thu, 27 Oct 2022 10:07:42 GMT</pubDate>
            <content:encoded><![CDATA[Dagger が Go SDK を発表しました 🎉https://dagger.io/blog/go-sdkDagger を使うことでローカルマシン、 CI ランナー、専用サーバー、その他任意のコンテナホスティングサービス上などで実行可能な CI/CD パイプラインを構築することができます。以前「インフラもバックエンドもフロントエンドも Go で書いてみた」という記事を公開したのですが、 Dagger Go SDK ができたことで CI/CD までもが Go で書けるようになったので書いてみました。インフラ・バックエンド・フロントエンドの方に関しては下記の記事をご参照ください。...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SREとしてソフトウェアアーキテクチャの基礎を読んでないのに堂々と語る方法]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2022/10/27/170608</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2022/10/27/170608</guid>
            <pubDate>Thu, 27 Oct 2022 08:06:08 GMT</pubDate>
            <content:encoded><![CDATA[このエントリーで言いたいことシステムの構造や各種機能を実装することもアドバイスを求められることも非常に少ないがSREもソフトウェアアーキテクチャに関わることがある。それは、プログラマーとしてではなくアーキテクチャ特性の専門家としてアーキテクチャに触れる場面です。そのため、アーキテクチャ全体についての知識は得ておくことは良いこと。タイトル説明読んでいない本について堂々と語る方法という書籍がある。読んでいないにも色々あって…本当にぜんぜん読んだことのない本、ざっと読んだもしくは流し読みをしたことがある本。人から聞いたことがある本、ブログで書評だけ読んだ本、読んだことはあるが忘れてしまった本などあらゆる本を語る技術に書かれている読書論の本のタイトルだけのオマージュです。はじめに本日、10/27に『ソフトウェアアーキテクチャの基礎』を執筆した著者陣が書いた『ソフトウェアアーキテクチャ・ハードパーツ - 分散アーキテクチャのためのトレードオフ分析』が発売されました。絶対的な銀の弾丸がないソフトウェアアーキテクチャの世界ではトレードオフを見極め、状況に合った選択をすることが常に求められます。悔いなき判断には多くの知恵と経験が要求されると思います。ハードパーツは、読者が自身のアーキテクチャ上の難題に対して効果的なトレードオフ分析を行い、より良い決定ができるようにするための書籍です。また、我々SREはプロジェクトやシステムに対して意見や判断を求められることも多くあると思います。そんな時にきっと、ソフトウェアアーキテクチャの基礎やソフトウェアアーキテクチャ・ハードパーツ を読んでおけばよかったと思うことがあるかもしれません。このエントリーではその前作のソフトウェアアーキテクチャの基礎の概要を確認することでハードパーツへの理解をより深めていけるとおもいます。優秀なアーキテクチャになりたいから読んでほしいわけではありません。スペシャリストとして意見や判断を求められた時の判断材料や語彙の強化などで今後のエンジニア人生に役に立ってくれると思います。このエントリーは『ソフトウェアアーキテクチャの基礎』を読んでみた中での感想文となります。「ソフトウェアアーキテクチャの基礎」の目次部と章立ては以下の通りです。全24章もありこれだけでもすごく勉強になります。個人的には付録Aの自己評価のためのチェックリストをやってみてから本書を読むのも良いかな‐って思っているが自分はやっていないので何も責任は持てない。Ⅰ部では基礎や概念、Ⅱ部では詳細な各アーキテクチャについて、Ⅲ部ではソフトスキルとマネジメントテクニックみたいな話をしてます。1章 イントロダクション# 第I部 基礎2章 アーキテクチャ思考3章 モジュール性4章 アーキテクチャ特性5章 アーキテクチャ特性を明らかにする6章 アーキテクチャ特性の計測と統制7章 アーキテクチャ特性のスコープ8章 コンポーネントベース思考# 第II部 アーキテクチャスタイル9章　基礎10章　レイヤードアーキテクチャ11章 パイプラインアーキテクチャ12章 マイクロカーネルアーキテクチャ13章 サービスベースアーキテクチャ14章 イベント駆動アーキテクチャ15章 スペースベースアーキテクチャ16章 オーケストレーション駆動サービス指向アーキテクチャ17章 マイクロサービスアーキテクチャ18章　適切なアーキテクチャスタイルを選ぶ# 第III部　テクニックとソフトスキル19章 アーキテクチャ決定20章 アーキテクチャ上のリスクを分析する21章 アーキテクチャの図解やプレゼンテーション22章 効果的なチームにする23章 交渉とリーダーシップのスキル24章 キャリアパスを開く付録A　自己評価のためのチェックリスト参考文献訳者あとがき索引目次や本の詳細についてはO’Reilly Japanよりご確認ください。特徴と感想問われるシステムアーキテクチャとしての知見の広さと深さ目次を見ると分かると思います。が、単純にいくつかのアーキテクチャについての紹介しているだけではありません。アーキテクチャを考える際に必要な思考方法やどのような部分に思考を巡らせればよいか、リスク分析から立ち回りまで広大なトピックを凝縮し網羅的にまた、今という視点だけではなくどのような技術的な変化や背景があっては今に至るのか？ などの文脈まで考慮されて書かれています。この、書籍の好きなところは2点あります。1つ目は定義づけて不毛な議論を避けることです。Twitterで定期的に発生する背景なき不毛な議論もほとんど無くなるといいなと思ってます。2つ目は技術的な手法だけではなくところです。結局は人の問題で、全ての議論でチームや人を蔑ろにせずソフトスキルや技芸へのリスペクトがあるところです。また、『ソフトウェアアーキテクチャの基礎』を一冊読んだところで直ちに目の前にあるソフトウェアやアプリが急激によくなったりすることはない。が今後のソフトウェアの開発に関わって生きていく上でまた、様々な指標になる素晴らしい書籍だと思いました。本当は一章づつ振り返りたいのですが時間的にも余裕がないので少しだけ紹介させてほしいです。ソフトウェアアーキテクチャとは？ソフトウェアアーキテクチャと言われた時に、要件とその他すべてのアーキテクチャ特性から構成されるものをふわっとまとめてなんとなくそう考えていたり言及してました。本書では以下のように4つに分類され定義されます。あと、このあとに出てくる図がとても整理があると自分が何について考えなければならないのか明確になるので本書を読んで最初に勝ちを確信しました。私は洋書が出てからすぐに友人からすごい書籍があるから紹介されて読んだので読んだことはあるが忘れてしまった本に近いのだがこの時の感動は今でも覚えている。私たちのソフトウェアアーキテクチャについての考え方を示す。私たちは、ソフトウェアアーキテクチャを、システムの構造、システムがサポートしなければならないアーキテクチャ特性（「イリティ（-ility））、アーキテクチャ決定、そして設計指針の組み合わせで構成されるものだと考えている。システムの構造マイクロサービスやレイヤード、マイクロカーネルなどのシステムを実装するアーキテクチャスタイルの種類を指す。よくアーキテクチャの全てだと勘違いされがちです。アーキテクチャ特性(-ility)アーキテクチャ特性はシステムの成功基準を定めるものです。通りの良い単語でいうと非機能要件などが近い。通常、システムの機能とは直接関係しない。システムの機能に関する知識を必要としない。しかし、システムが適切に機能するには、これらの特性への理解が必要となる。SREとしてはこの分野に対して専門性を求められる機会が多い。アーキテクチャ決定アーキテクチャ決定は、システムをどのように構築すべきかのルールを定めるものだ。アーキテクチャ決定は、システムの制約を形作り、何が許されて何が許されないかに関する開発チームの指針となるように行う。設計指針設計指針は、堅苦しいルールではなくあくまでガイドラインです。サービス間通信のすべての条件、選択肢を完璧に網羅するアーキテクチャ決定を定めるのは不可能です。非現実的なコストをかければ別だが。その代わりに、設計指針として、望ましいアプローチに関するガイドを提供する。ソフトウェアアーキテクトへの8つの期待ソフトウェアアーキテクトがどのような役割が求められるかは組織やチームによって違いがあるような気がする。本書ではソフトウェアアーキテクトに対する8つの期待がある。そのうち3つがソフトスキルなのも優秀なソフトウェアアーキテクトが人間と向き合わなければならないのを示している。SREの探求の5章 サードパーティとの協力を円滑に進める重要性でも事業に対する理解と政治の重要性について何度も言及されている。アーキテクチャ決定を下すアーキテクチャを継続的に分析する最新のトレンドを把握し続ける決定の順守を徹底する多様なものに触れ、経験している事業ドメインの知識を持っている対人スキルを持っている政治を理解し、かじ取りするソフトウェアアーキテクチャの法則ソフトウェアアーキテクチャはトレードオフがすべてだ。 ソフトウェアアーキテクチャの第一法則「どうやって」よりも「なぜ」の方がずっと重要だ。ソフトウェアアーキテクチャの第二法則ソフトウェアアーキテクチャのすべてはトレードオフがあるが、どちらを優先しても10年後の結果は誰にも分からなかった。だから、まぁ「なぜ」が重要なんだろうな。悔いが残らない方をチームや組織で選ばなきゃいけないんだろうな。しかし、数ある選択肢の中でなぜその選択がなされたのか他の技術ではだめなのか？ を説明するのは難しい。だから、アーキテクトには技術の深さより幅が求められるんだろうな。基礎の概念は開発に関わる全ての人間は知っておいて良いアーキテクチャにおける重要なトレードオフを理解するには、開発者はコンポーネント、モジュール性、結合、そしてコナーセンスに関する基本的な概念と用語を理解しなければならないが自分がここで説明してもめちゃくちゃ薄く複数の解釈ができるようになってしまうので読んでないのに堂々と語るというには言及が難しく。著者が大事にしている軸になる考え方です。ここについて堂々と語るにはやっぱりちゃんと理解する必要がある。ソフトウェアアーキテクトへの期待されるソフトスキルソフトウェアアーキテクトへの8つの期待でも「対人スキルを持っている」と「政治を理解し、かじ取りする」などがあるがそれ以外にも『ソフトウェアアーキテクチャの基礎』では図解やプレゼンテーションの大切さ、過不足なくチームを管理する方法、開発チーム、ビジネスチームに対してどう向き合うか？ キャリアの形成についての言及もある。読みものに近い気もするがヒントがあるかもしれないです。まとめ『ソフトウェアアーキテクチャの基礎』はシステム設計に関わったことがある人ならばあの時、本書を読んでいればあの時の設計の判断はなにかが変わったかもしれないと思えるほど学びのある一冊でした。読まずに堂々と語るにはやっぱり惜しい書籍です。アーキテクチャには絶対的で正解な選択肢がなくそれぞれにトレードオフがあり地上最強の〇〇は限定的です。脳死で要はバランスとしか言う人にもなりたくない。トレードオフを一定の水準や基準で見極めることができる能力のあるエンジニアになりたいです。カンファレンスや技術ブログ記事で紹介されているツールやシステム構造にすぐに飛びつきたくなる私のような無知で軽率な若者にはとても響きました。SREはプログラマーとしてではなくアーキテクチャ特性の専門家としてアーキテクチャに対する意見を求めれます。アーキテクチャ全体についての知識は得ておくと良いのではないか？ と思いますみなさんも『ソフトウェアアーキテクチャの基礎』及び『ソフトウェアアーキテクチャ・ハードパーツ』をぜひ手に取ってみてください。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud Binary Authorization 徹底調査]]></title>
            <link>https://sreake.com/blog/google-cloud-binary-authorization/</link>
            <guid>https://sreake.com/blog/google-cloud-binary-authorization/</guid>
            <pubDate>Thu, 27 Oct 2022 00:46:10 GMT</pubDate>
            <content:encoded><![CDATA[Binary Authorization とは 概要 コンテナベースのアプリケーションに ソフトウェアサプライチェーンのセキュリティを提供する Google Cloud のサービスです。 補足 ソフトウェアサプライチェー […]The post Google Cloud Binary Authorization 徹底調査 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gitlab Ci で Kaniko build し Trivy で scan する]]></title>
            <link>https://blog.1q77.com/2022/10/gitlab-ci-kaniko-and-trivy/</link>
            <guid>https://blog.1q77.com/2022/10/gitlab-ci-kaniko-and-trivy/</guid>
            <pubDate>Wed, 26 Oct 2022 14:34:28 GMT</pubDate>
            <content:encoded><![CDATA[GitLab CI でコンテナイメージを Docker daemon の不要な Kaniko で build し、それを Trivy でスキャンする方法 まず、kaniko で --tarPath を指定して tar ファイルで書き出す 書き出す先を artifacts で指定したディレクトリ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[PodSecurityPolicy について考えてみた]]></title>
            <link>https://sreake.com/blog/pod-security-policy/</link>
            <guid>https://sreake.com/blog/pod-security-policy/</guid>
            <pubDate>Mon, 24 Oct 2022 02:15:18 GMT</pubDate>
            <content:encoded><![CDATA[話すこと 案件で Kubernetes のセキュリティについて調べることがあったので、各レイヤで何が必要かを検討しました。 Node レイヤ・Inspector・(falco) Pod レイヤ・(falco)・セキュリテ […]The post PodSecurityPolicy について考えてみた first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
    </channel>
</rss>