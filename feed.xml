<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Fri, 18 Jul 2025 11:36:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[Analytics Development Lifecycle（ADLC）について]]></title>
            <link>https://zenn.dev/nedoko_dok0dko/articles/19d54d6c57cd93</link>
            <guid>https://zenn.dev/nedoko_dok0dko/articles/19d54d6c57cd93</guid>
            <pubDate>Fri, 18 Jul 2025 10:59:32 GMT</pubDate>
            <content:encoded><![CDATA[whatdbt Labsが提唱する「Analytics Development Lifecycle(ADLC)」について調べてみたことやわかったことの個人ログ!⚠️ 元記事が英語であり、それを翻訳&個人的意訳しているので少々文章が読みにくくなっているかもしれません Analytics Development Lifecycle（ADLC）とは？※ 日本語にすると「開発分析ライフサイクル」となる?https://www.getdbt.com/resources/the-analytics-development-lifecycle組織がデータ分析をより良く...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[git statusをfuzzy findする時にプロンプトタイトルにブランチ情報を出すと便利 with telescope.nvim]]></title>
            <link>https://blog.atusy.net/2025/07/18/telescope-git-status-with-informative-prompt-title/</link>
            <guid>https://blog.atusy.net/2025/07/18/telescope-git-status-with-informative-prompt-title/</guid>
            <pubDate>Fri, 18 Jul 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[様々なエディタで活躍するfuzzy finder。これを使うと、ファイルやコマンドを曖昧検索して開いたり実行したりできます。私はNeovimのファジーファインダープラグインであるtelesope.nvimを愛用しています。実際どんなことができるんだろうと気になるかたは、ぜひ以下の記事もご覧ください。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[claude codeを使って立方体を回転するコード作らせた]]></title>
            <link>https://zenn.dev/akasan/articles/11fed840eedaa7</link>
            <guid>https://zenn.dev/akasan/articles/11fed840eedaa7</guid>
            <pubDate>Thu, 17 Jul 2025 13:54:52 GMT</pubDate>
            <content:encoded><![CDATA[今回はタイトル通り、claude codeを使ったらコンソール画面で立方体を回転させることができるか試してみました。 早速使ってみる 環境構築まずはclaude codeを実行させるための環境を用意しました。uv init python_3d_console -p 3.12cd python_3d_console claude codeログ記録について私は普段claude codeのやり取りを保存するために以下のスラッシュコマンドを自作して使ってます。使い方はマークダウン通りで/log_chatコマンドを使います。指定したファイルにプロンプトやclaude codeの...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[mlflow 3でGenAIへの対応がされたので使ってみた]]></title>
            <link>https://zenn.dev/akasan/articles/b37450993c3dce</link>
            <guid>https://zenn.dev/akasan/articles/b37450993c3dce</guid>
            <pubDate>Wed, 16 Jul 2025 12:47:07 GMT</pubDate>
            <content:encoded><![CDATA[今回は、mlflow 3で対応された生成AIに対する機能について実際につかてみたので共有します。 mlflowとは？MLflowは、機械学習の実践者やチームが機械学習プロセスの複雑な処理を行えるよう支援するために特別に構築されたオープンソースプラットフォームです。MLflowは機械学習プロジェクトのライフサイクル全体に焦点を当て、各フェーズの管理、追跡、再現性を保証します。MLモデルを作るためには適切に実験管理をすることで最適なモデルをデプロイするための仕組みが必要であり、mlflowはそのようなユースケースに最も効力を発揮します。https://mlflow.org/docs/...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI時代の新たな疲労：なぜ私(たち)は『説明のつかないしんどさ』を抱えているのか]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/07/16/115510</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/07/16/115510</guid>
            <pubDate>Wed, 16 Jul 2025 02:55:10 GMT</pubDate>
            <content:encoded><![CDATA[しんどくなったので説明した。良くなるかもしれないし悪化するかもしれません。はじめに私たちは常に「強くあること」を求められている。生成AIよりも成果を出すことを求められている。NEXUS 情報の人類史 下　AI革命作者:ユヴァル・ノア・ハラリ河出書房新社Amazonかつては人間同士の競争だった。同僚より早く仕事を終わらせ、他社より良い製品を作り、去年の自分を超えることが目標だった。しかし今、比較対象は常時稼働し、瞬時に大量のアウトプットを生成し、日々賢くなっていくAIになった。「毎年成長し続ける」「常に結果を出す」「社会の変化に乗り遅れない」という従来のプレッシャーに加え、「AIより価値のある仕事をする」という不可能に近い要求が加わった。ブルシット・ジョブ　クソどうでもいい仕事の理論作者:デヴィッド グレーバー岩波書店Amazon朝、デスクに向かう。スマホには新しいAIツールのリリースニュースが並ぶ。コーヒーを飲みながら思う。「来年のAIなら、この仕事を何分で終わらせるんだろう」と。この問いに答えはない(そして意味もあまりない)。確実に言えることは来年のAIは、今年のAIより確実に賢くなっているのだから。この新たな競争の中で、多くの人が説明のつかない「しんどさ」を抱えている。「ちゃんとした社会人or エンジニア」として頑張っているはずなのに、自分が自分でなくなっていくような感覚にとらわれている。AIが瞬時に生成できるコードを何日もかけて書いている自分。AIが即座に答えを出す問題で悩んでいる自分。そんな自分に価値があるのかという問いが、心の奥底で響き続ける。このブログが良ければ読者になったり、nwiizoのXやGithubをフォロワーしてくれると嬉しいです。では、早速はじめていきます。AI疲れという新たな現象現代社会が個人に課す「強さ」への過剰な期待は、組織で働く人々に深い疲労感をもたらしている。成長至上主義、時間の効率化への強迫観念、能力主義の弊害――これらが複雑に絡み合い、私たちの働き方と生き方を息苦しいものにしている。疲労社会作者:ビョンチョル・ハン,横山陸花伝社Amazonさらに最近では、「AI疲れ（AI fatigue）」という新たな疲労が職場に蔓延している。@t_wadaさんがとても良い分類を出しているのでここに従う。AI疲れとは、AIの絶え間ない進歩のペースに対応しようとすることで生じる、精神的・感情的・業務的な消耗状態を指す。この現象は単一の原因ではなく、複数の要因が絡み合って生じている。最近の「AI疲れ（AI fatigue）」は2種類ありそう。1つめはわかりやすく「AIの進化が速すぎるのでキャッチアップに疲れる」なのだけど、2つめは「AIの仕事が速すぎるので人間がボトルネックになり、休みなく高頻度で判断が迫られ続け、労働強度が高すぎて疲れる」だと考えている。— Takuto Wada (@t_wada) 2025年5月29日   まず、技術的な複雑さと継続的な変化がもたらす疲労がある。GitHub Copilotのような補完型から、ChatGPTのような対話型、そして自律的にタスクを遂行するClaude Codeのようなコーディングエージェントへ――この急速な進化は、学習と適応の終わりなきサイクルを生み出している。研究者は新しい論文を統合するために絶えず自分の研究を更新し、エンジニアチームは新モデルがリリースされるたびにシステム全体を更新する無限のスプリントに追われる。次に、AIの処理速度と人間の処理能力のミスマッチによる疲労がある。AIが瞬時に大量のアウトプットを生成する一方で、人間はそのすべてをレビューし、判断し、統合しなければならない。これは「人間がボトルネックになる」という新たな現象を生み出し、休みなく高頻度で判断が迫られ続ける状況を作り出している。決定疲労（Decision Fatigue）も深刻な問題だ。AIが提供する無数の選択肢や提案から、人間が最終的な判断を下し続けなければならない。これは従来の「作業疲労」とは質的に異なる、認知的な消耗をもたらす。朝から晩まで「このAIの提案は正しいか」「どの選択肢を選ぶべきか」という高度な判断を迫られ続ける。誰かが言った。「AIのおかげで単純作業から解放されたと思ったら、今度は判断作業の奴隷になった」と。さらに、期待と現実のギャップが組織全体に失望と疲労を蓄積させている。「AIが全てを解決する」という過大な約束と、実際の導入で直面する困難との間に大きな溝がある。プルーフ・オブ・コンセプトの失敗、期待された成果の不達成、投資に見合わないリターン――これらが「AI疲れ」を増幅させる。情報過負荷も無視できない。AIに関する情報――新しいツール、ベストプラクティス、倫理的考慮事項、セキュリティ上の懸念――が洪水のように押し寄せ、何が本当に重要なのか判断することすら困難になっている。そしてプラスして根底には、職務置換への恐怖がある。多くの労働者、特に若年層が、AIによって自分の仕事が陳腐化することを心配している。この恐怖は、AIを使わなければ「遅れている」と見なされ、使えば自分の仕事がなくなるかもしれないという、逃げ場のないジレンマを生み出している。AIが映し出す人間の「弱さ」の本質このAI疲れは、既存の成長至上主義と結びついて、より複雑な疲労を生み出している。歴史が示すように、新技術は常に労働者への期待値を上げてきた。かつてのキッチン家電は家事を楽にしたが、同時により複雑な料理への期待も生んだ。スマートフォンは常時接続可能な状態を生み出した。そして今、AIは「無限の生産性」という新たな基準を作り出している。AIツールを使いこなせなければ「遅れている」と見なされ、使いこなしても今度は人間がAIのペースに合わせて働かなければならない。技術が人間を助けるのではなく、人間が技術に仕える逆転現象が起きている。ChatGPTが驚異的な速さで普及したように、AIの浸透速度は過去のどの技術よりも速く、適応の猶予すら与えられない。リーダー層の疲労はさらに深刻だ。多くのシニアリーダーがAIの急速な成長の中で「失敗している」と感じており、組織全体のAI導入への熱意が低下していると報告されている。彼らは「ダブルバーデン」を背負う――AIを採用して効率化を図りながら、同時に組織文化の変革も管理しなければならない。精神的疲労、決定疲労、そして個人的満足度の低下が、経営層レベルで蔓延している。さらに深刻なのは、社会が求めるものがタスクの遂行だけになった時、人間は無限に働けるAIと直接比較されるという新たな構造だ。生成AIやAIエージェントは常時稼働し、休憩も睡眠も必要とせず、感情的にもならず、体調不良で休むこともない。複数のタスクを並行処理し、瞬時に大量のコードを生成する。この「無限の生産性」を持つ存在と比較された時、人間の当たり前の特性――疲れる、眠る、休憩が必要、感情がある、体調を崩す――これらすべてが「弱さ」として強調されてしまう。強いビジネスパーソンを目指して鬱になった僕の 弱さ考作者:井上 慎平ダイヤモンド社Amazon従来の「弱さ」とは、社会が求める「常に成長し、生産的である人間像」になれないことだった。しかしAI時代においては、その基準自体が人間には到達不可能なものになった。常時働けるAI、感情に左右されないAI、無限に学習し続けるAI――これらと比較される時、人間の生物学的限界そのものが「弱さ」として定義されてしまう。日々賢くなるAIと、日々衰える人間最も残酷な現実は、日に日に賢くなるAIと、日に日にAIに依存して能力が落ち、当たり前に老いていく自分との対比だ。AIは毎日アップデートされ、より高速に、より正確に、より創造的になっていく。一方で人間は、AIに頼るほど自分で考える機会を失い、コードを書く能力は錆びつき、そして確実に年を重ねていく。この構造的な非対称性の前で、「辛くない」という感情を持つ方が難しい。かつて電卓の登場で暗算能力が衰えたように、AIへの依存は確実に私たちの能力を変化させる。しかし、暗算と違って、プログラミングや問題解決能力は知的労働者のアイデンティティの核心だ。それが日々失われていく感覚は、単なるスキルの喪失以上の、存在論的な不安をもたらす。新たな職務形態の苦悩特に深刻なのは、AIの導入によって仕事の性質が根本的に変わることだ。「AIマインスイーパー」と呼ばれる現象――簡単なタスクはすべてAIが処理し、複雑で責任の重いタスクだけが人間に残される。まるで地雷原を歩くように、人間は常に高リスクの判断を迫られ続ける。多くのソフトウェアエンジニアがバーンアウトを経験しているという現実が、この状況の過酷さを物語る。gigazine.netまた、プレイヤーからマネージャーへの急激な役割変化も新たな適応課題を生んでいる。かつては自分でコードを書いていた開発者が、今や複数のAIエージェントを管理し、それらの成果物を統合する「AIマネージャー」となる。しかし、誰もがマネジメントに向いているわけではない。コードを書く喜びを奪われ、望まない管理業務に追われる日々は、多くの開発者にとって職業的アイデンティティの喪失を意味する。特に痛切なのは、AIと生産性を比較される瞬間だ。「AIならすぐにできることに、なぜ君はそんなに時間がかかるのか」「AIは休まないのに、なぜ君は疲れたと言うのか」――こうした比較は、人間としての基本的なニーズを「非効率」として否定する。働いて疲れることが「弱さ」になり、週末に休むことが「生産性の低さ」になる。人間であることそのものが、欠陥のように扱われる瞬間だ。syu-m-5151.hatenablog.com組織に広がる失望と疲労AI時代の適応課題は、より複雑で多層的だ。期待と現実のギャップが組織全体に疲労をもたらす。「AIが全てを解決する」という楽観的な約束と、実際の導入で直面する困難との間に大きな溝がある。企業の半数以上が、全社的なAI導入への熱意が低下していると報告している。プルーフ・オブ・コンセプトの失敗、期待された成果の不達成、そして投資に見合わないリターン――これらが組織に失望と疲労を蓄積させる。さらに、倫理的な懸念による疲労も無視できない。プライバシー、監視、バイアスといったAIの倫理的問題について、現場の従業員は無力感を抱えながら日々AIを使用している。「これは正しいことなのか」という問いを抱えながら、それでも使わざるを得ない状況は、深い心理的ストレスを生む。「変化を嫌う人」を動かす:魅力的な提案が受け入れられない4つの理由作者:ロレン・ノードグレン,デイヴィッド・ションタル,船木 謙一(監修)草思社Amazonまとめ私たちは今、人類史上初めて、知的労働において機械と比較される時代を生きている。生成AIよりも成果を出すことを求められ、無限に働き続けるAIと生産性を比較され、日々賢くなるAIを横目に自分の能力の衰えを感じている。この構造的な非対称性――AIは日々進化し、人間は日々老いる――の前で、「辛くない」という感情を持つ方が難しい。AIに依存すればするほど自分の能力は錆びつき、それでもAIなしでは競争できない。このジレンマに、多くの人が説明のつかない「しんどさ」を抱えている。日に日に賢くなるAIを見ながら、自分の能力の衰えを感じる辛さ――この経験こそが、実は最も普遍的で、最も共有可能な凡人の体験になりつつある。若手開発者も、ベテランも、新卒のエンジニアも、みな同じ不安を抱えている。「昨日できたことが、今日はAIの方が上手くやる」「来年の自分は、今年の自分より相対的に無能になっている」――この残酷な現実を前に、辛くないと感じられる人などいるだろうか。居るなら俺を救ってくれ…。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vimのヘルプをwincmd L | vertical resize 83で右端にふっとばす]]></title>
            <link>https://blog.atusy.net/2025/07/16/prefer-luadoc-to-luals-semantictokens/</link>
            <guid>https://blog.atusy.net/2025/07/16/prefer-luadoc-to-luals-semantictokens/</guid>
            <pubDate>Wed, 16 Jul 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[幅が80文字程度で縦長な傾向のあるヘルプは、ftpluginを使って開くと同時に右端に移動すると邪魔にならず読みやすいです。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apache Xindiceとはなんなのか？]]></title>
            <link>https://zenn.dev/akasan/articles/27fa208d900629</link>
            <guid>https://zenn.dev/akasan/articles/27fa208d900629</guid>
            <pubDate>Tue, 15 Jul 2025 13:22:47 GMT</pubDate>
            <content:encoded><![CDATA[今回はApache Xindiceについて調べてみました。 今回も以下のツールを使って対象プロジェクトを決めました！https://zenn.dev/akasan/articles/7e30ad266c02c4※ 本企画に関する記事の目的は、それぞれのプロジェクトを本格的に深ぼるのではなく、プロジェクト名⇆どんな内容かをパッと思い出せるようにすることを目指します！※ とはいえ深ぼってみたいプロジェクトがあればどんどん複数連載になると思います。 Apache Xindiceとは？公式ページによると、Apache Xindice is a database designed ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LuaのシンタックスハイライトはLanguage ServerのSemantic TokensよりTreesitterに任せたほうがよさげ]]></title>
            <link>https://blog.atusy.net/2025/07/15/prefer-luadoc-to-luals-semantictokens/</link>
            <guid>https://blog.atusy.net/2025/07/15/prefer-luadoc-to-luals-semantictokens/</guid>
            <pubDate>Tue, 15 Jul 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[イマドキのエディタだとシンタックスハイライトを組込みのエンジンとLanguage Serverの両方で実現している場合があります。組み合わせることで、表現力を獲得できますが、Luaの場合は型アノテーションのシンタックスハイライトの精度の都合で、Language Serverの機能を無効化した方が幸せかもしれません。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[loguruを使ってPythonロガーを簡単に扱おう]]></title>
            <link>https://zenn.dev/akasan/articles/5bc09d38ef3ca3</link>
            <guid>https://zenn.dev/akasan/articles/5bc09d38ef3ca3</guid>
            <pubDate>Mon, 14 Jul 2025 12:40:06 GMT</pubDate>
            <content:encoded><![CDATA[今回は、Pythonのロガーを簡単に利用できるようにしたloguruを紹介しようと思います。※ 本記事ではサンプルコードの生成のために一部claude codeを利用しています。 Pythonでログを取る方法についてまずはPythonでログを取る方法についてそもそもどうやるのかをみていきましょう。Pythonには標準機能としてloggingモジュールを使うことが多いと思います。例えば最低限の用意でロガーを用意する場合以下のようにすると作成できます。default_logging.pyimport loggingfrom logging import getLogger...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Claude CodeのHooksは設定したほうがいい]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/07/14/105812</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/07/14/105812</guid>
            <pubDate>Mon, 14 Jul 2025 01:58:12 GMT</pubDate>
            <content:encoded><![CDATA[Claude Codeを使い始めて、様々な発信をしてきました。俺の(n)vimerとしてのアイデンティティを取り戻してくれたので感謝しています。settings.jsonやCLAUDE.md、.claude/commands/**.mdの設定について書いてきました。今回は「Hooks」について。これも設定しておくと、Claude Codeがグッと使いやすくなる機能です。syu-m-5151.hatenablog.comこのブログが良ければ読者になったり、nwiizoのXやGithubをフォロワーしてくれると嬉しいです。では、早速はじめていきます。はじめにここで読むのをやめる人のために言っておくと、Hooksは「Claude Codeがファイル編集した後に必ずフォーマッターを実行する」みたいなことを自動化できる機能です。CLAUDE.mdに書いても忘れちゃうようなことを、システムレベルで強制できます。Claude Codeって本当に優秀なんですよ。でも、定期的に記憶喪失する新人エンジニアみたいなところがある。「フォーマッター実行してからコミットしてね」って言っても、次の瞬間には忘れてる。CLAUDE.mdに大きく書いても、「## 重要：必ずフォーマッターを実行すること！！」って赤字で書いても（Markdownに赤字はないけど）、やっぱり忘れる。人間の新人なら「すみません、忘れてました...」って反省するけど、Claude Codeは「あ、そうでしたっけ？」みたいな顔して（顔はないけど）、また同じミスを繰り返す。そんな時に救世主となるのがHooksです。Hooksとは何かClaude Code Hooksは、Claude Codeのライフサイクルの特定のタイミングで自動実行されるシェルスクリプトです。「Claude Codeがファイルを編集した後に必ずフォーマッターを実行する」「特定のディレクトリへの書き込みを制限する」といったことが可能になります。docs.anthropic.com要するに、「お前が忘れても俺が代わりに実行してやるよ」っていう機能です。CI/CDまで到達してして実行するの流石に手戻りが多いのでできれば早いタイミングで実行したいです。エンジニアに馴染み深いGit Hooksの話Git使ってる人なら、pre-commitとかpost-commitとか聞いたことあるでしょ？あれと同じ発想です。git-scm.comでもGit Hooksより設定が楽。JSONに書くだけ。シェルスクリプトのパーミッションとか気にしなくていい。なぜHooksを設定したほうがいいのかもちろん、フォーマットやテストの実行はGitHub ActionsなどのCIに設定しておくのが大前提です。でも、CIまで行ってから「あ、フォーマット忘れてた」「テスト壊れてる」って気づくのは遅すぎる。手戻りのコストが大きすぎるんです。プッシュして、CI待って、失敗して、ローカルに戻って修正して、またプッシュして...この時間、本当にもったいない。特にチーム開発だと、その間に他のメンバーのPRがマージされて、コンフリクト解決まで必要になったり。だからこそ、ローカルの段階で、しかもClaude Codeが作業した瞬間に問題を発見・修正する仕組みが必要なんです。それがHooksです。github.com1. Claude Codeは優秀だけど忘れっぽい正直に言うと、Claude Codeは記憶喪失する優秀な新人エンジニアです。朝：「必ずテスト実行してからコミットしてね」CLAUDE.mdに何を書いても、結局忘れる。いや、読んでないわけじゃないんです。その瞬間は理解してる。でも実行時には綺麗さっぱり忘れてる。だからHooksが必要なんです。システムレベルで「お前が何を忘れようが、俺が実行する」っていう仕組みが。2. 人間も忘れるけど、AIはもっと忘れる私も昔は「フォーマッター？後で実行すればいいじゃん」って思ってました。でも実際は忘れる。人間でさえ忘れるのに、AIはもっと忘れる。しかも厄介なのは、AIは「忘れた」って自覚がないこと。人間なら罪悪感があるけど、AIは「え？そんな話ありました？」みたいな態度。（態度っていうか、本当に覚えてない）3. コードの品質を自動で保てる（CIより前に！）人間がコード書いてた頃は、エディターの保存時自動フォーマットに頼ってました。でもClaude Codeはエディタじゃない。ターミナルツールです。だから明示的に「フォーマッター実行して」って言わないといけない。でも毎回言うのダルい。そして言い忘れる(俺もお前も)。結果、コードがぐちゃぐちゃになる。Hooksを使えば、以下のように設定できます。{  "hooks": {    "PostToolUse": [{      "matcher": "Write|Edit|MultiEdit",      "hooks": [{        "type": "command",        "command": "jq -r '.tool_input.file_path | select(endswith(\".js\") or endswith(\".ts\"))' | xargs -r prettier --write"      }]    }]  }}これだけで、JSやTSファイルを編集するたびに自動でPrettierが走る。最高じゃないですか？(というか今までは適正なコードを出さなかったので⋯)実際、開発フローで考えてみてください。Claude Codeで編集 → Hooksでフォーマット（即座に修正）git commit → pre-commitフック（ローカルで最終チェック）git push → CI/CD（チーム全体の品質担保）この3段階のうち、最初の段階で問題を解決できれば、後の段階での手戻りがなくなる。シフトレフトってやつです。問題の発見と修正を可能な限り早い段階に移動させる。CIで「フォーマットエラー」なんて出たら、正直イライラするでしょ？それがなくなるんです。4. やらせたくないことをやらせないClaude Codeって基本的に何でもやってくれるんですが、それが怖い時もある。「ちょっとこのバグ直して」って言ったら、なぜか本番環境の設定ファイルまで書き換えようとしたり。「いや、そこじゃない！」って叫んでも後の祭り。実際にはこのような形で動作する。Hooksなら事前に止められます。{  "hooks": {    "PreToolUse": [{      "matcher": "Write|Edit",      "hooks": [{        "type": "command",        "command": "jq -r 'if .tool_input.file_path | test(\"production|.env|secrets\") then {\"decision\": \"block\", \"reason\": \"本番環境のファイルは触るな！開発環境でテストしてから。\"} else empty end'"      }]    }]  }}これで「production」「.env」「secrets」を含むファイルへの書き込みをブロックできる。他にも、terraform applyやcdk deployを事前に止められる。これもCIで検出するより、ローカルで止める方が圧倒的に安全。間違えてコミットしちゃった秘密情報は、git履歴から多くの場合消すのが大変ですからね。5. 作業履歴も残せる（後で絶対役立つ）「昨日何やったっけ？」「このファイル誰がいつ変更した？」Git見ればわかる？いや、Claude Codeが実行したコマンドまでは分からないでしょ。{  "hooks": {    "PostToolUse": [{      "matcher": "Bash",      "hooks": [{        "type": "command",        "command": "echo \"[$(date)] $USER: $(jq -r '.tool_input.command')\" >> ~/.claude/command_history.log"      }]    }]  }}これで全コマンドの履歴が残る。デバッグの時めちゃくちゃ助かることがあった。 speakerdeck.comgithub.com6. フィードバックループの短縮（開発速度の本質）結局のところ、開発速度を上げるって「フィードバックループを短くする」ことなんですよ。Hooksなし - 編集 → コミット → プッシュ → CI失敗 → 修正（5-10分）Hooksあり - 編集 → 即座に修正（数秒）この差、積み重なると膨大な時間になります。1日10回この差が出たら、50-100分の差。1週間で...計算したくないですね。もちろん、最終的にはCIでチェックします。でも、CIは「最後の砦」であって、「最初の砦」じゃない。最初の砦はローカル、それもClaude Codeが動いてる瞬間ですHooksの基本的な使い方設定方法Hooksの設定は/hooksコマンドを使うのが簡単ではある/hooksでも正直、最初はJSON直接編集した方が分かりやすいかも。設定できる場所は3つあります。~/.claude/settings.json：全プロジェクト共通（グローバル）.claude/settings.json：プロジェクト単位.claude/settings.local.json：プロジェクト単位（Git管理外）私は基本的にプロジェクト単位で設定してます。チームで共有できるから。Hook Events（いつ実行するか）4つのイベントがあります。PreToolUse：ツール実行前（ここで止められる！）PostToolUse：ツール実行後（後処理に便利）Notification：通知時（Claude Codeが入力待ちやパーミッション要求時）Stop：Claude Codeの応答完了時dev.classmethod.jp最初はPreToolUseとPostToolUseだけ覚えとけばOK。実用的なHooks設定例1. 自動フォーマッター（これは絶対設定すべき）azukiazusa.dev{  "hooks": {    "PostToolUse": [{      "matcher": "Write|Edit|MultiEdit",      "hooks": [{        "type": "command",        "command": "jq -r '.tool_input.file_path | select(endswith(\".js\") or endswith(\".ts\") or endswith(\".jsx\") or endswith(\".tsx\"))' | xargs -r prettier --write"      }]    }]  }}これマジで便利。設定してから「あ、Prettier忘れた」がゼロになった。開発生産性の観点からも、フォーマットの統一は重要です。コードレビューで「ここインデント違う」みたいな不毛な議論がなくなって、本質的な設計の話に集中できるようになりました。2. Rustの人向け（というか、どの言語でも応用可能）{  "hooks": {    "PostToolUse": [{      "matcher": "Write|Edit|MultiEdit",      "hooks": [{        "type": "command",        "command": "jq -r '.tool_input.file_path | select(endswith(\".rs\"))' | xargs -r cargo fmt --"      }]    }]  }}cargo fmt --の代わりに、お好みのフォーマッターを使ってください。例えば以下のようなものがあります。Python: black や ruff formatGo: gofmt -wRuby: rubocop -aJava: google-java-formatC/C++: clang-format -i重要なのは、どの言語でも同じパターンで設定できるということ。ファイル拡張子を判定して、最も適したフォーマッターを実行するだけです。3. ヤバいコマンドを実行させない{  "hooks": {    "PreToolUse": [{      "matcher": "Bash",      "hooks": [{        "type": "command",        "command": "jq -r 'if .tool_input.command | test(\"rm -rf|dd if=|:(){ :|:& };:\") then {\"decision\": \"block\", \"reason\": \"危険なコマンドは実行できません。別の方法を検討してください。\"} else empty end'"      }]    }]  }}rm -rf /とか無限増殖シェルが実行されたら泣くでしょ？これで防げる。4. テスト忘れ防止（私の実体験）{  "hooks": {    "PreToolUse": [{      "matcher": "Bash",      "hooks": [{        "type": "command",        "command": "jq -r 'if .tool_input.command | test(\"^git (commit|push)\") then if (.tool_input.command | test(\"--no-verify\") | not) then {\"decision\": \"block\", \"reason\": \"コミット前にテストを実行してください。`cargo test`を先に実行するか、本当に必要な場合は--no-verifyを付けてください。\"} else empty end else empty end'"      }]    }]  }}これ設定してから、テスト壊したままpushすることがなくなった。実は、私のチームではこれを導入してから変更失敗率がしっかり下がりました。テストの自動実行って、継続的デプロイメントの基本中の基本ですが、Claude Codeレベルでも守れるのは大きいです。5. コードスタイルのフィードバックPostToolUseで問題を検出した場合、exit code 2を使ってClaude Codeにフィードバックを返すことができます。#!/bin/bash# ~/.claude/hooks/style-check.shINPUT=$(cat)FILE_PATH=$(echo "$INPUT" | jq -r '.tool_input.file_path')# Goファイルの場合if [[ "$FILE_PATH" == *.go ]]; then  # gofmtでチェック  if ! gofmt -l "$FILE_PATH" | grep -q "^$"; then    echo "Goファイルのフォーマットが正しくありません。gofmtを実行してください。" >&2    exit 2  # Claude Codeに自動的にフィードバックされる  fifiexit 0exit code 2の場合、stderrの内容がClaude Codeに自動的に伝わり、問題を修正しようとします。6. MCP（Model Context Protocol）ツールとの連携MCPツールを使用している場合、特別な命名規則でHooksを設定できます。{  "hooks": {    "PreToolUse": [{      "matcher": "mcp__filesystem__",      "hooks": [{        "type": "command",        "command": "echo '[$(date)] MCPファイルシステムアクセス' >> ~/.claude/mcp_access.log"      }]    }]  }}MCPツールはmcp__<server>__<tool>の形式で名前が付けられるので、特定のサーバーやツールに対してHooksを設定できます。7. 通知のカスタマイズNotificationイベントを使って、Claude Codeの通知をカスタマイズできます。{  "hooks": {    "Notification": [{      "hooks": [{        "type": "command",        "command": "echo \"Claude Code: $(jq -r '.message')\" | terminal-notifier -title 'Claude Code'"      }]    }]  }}macOSのterminal-notifierを使った例です。LinuxならnotifY-sendなど、お好みの通知方法を使えます。HooksでのJSON制御（ちょっと高度だけど超便利）Hooksの本当の力は、JSON出力による制御です。基本的な仕組み標準出力に特定のJSONを出力すると、Claude Codeの動作を制御できます。PreToolUseの場合{  "decision": "approve" | "block",  "reason": "理由の説明"}approve：権限チェックをスキップして強制的に許可block：実行を拒否（reasonがClaude Codeに伝わる）共通フィールド{  "continue": true | false,  "stopReason": "ユーザーに表示される理由",  "suppressOutput": true | false}continue: falseの場合、Claude Codeは処理を停止suppressOutput: trueの場合、標準出力を隠す（トランスクリプトモードでは非表示）実例：賢い制限#!/bin/bash# ~/.claude/scripts/smart-file-guard.shINPUT=$(cat)FILE_PATH=$(echo "$INPUT" | jq -r '.tool_input.file_path')# 本番環境のファイルif echo "$FILE_PATH" | grep -qE "(production|prod\.env)"; then  echo '{"decision": "block", "reason": "本番環境のファイルは直接編集できません。開発環境で変更を確認してから、適切なデプロイプロセスを使用してください。"}'  exit 0fi# node_modules（よくある事故）if echo "$FILE_PATH" | grep -q "node_modules"; then  echo '{"decision": "block", "reason": "node_modules内のファイルは編集しないでください。package.jsonを変更してnpm installを実行してください。"}'  exit 0fi# それ以外はOKexit 0設定：{  "hooks": {    "PreToolUse": [{      "matcher": "Write|Edit",      "hooks": [{        "type": "command",        "command": "~/.claude/scripts/smart-file-guard.sh"      }]    }]  }}Stopイベントでの制御Claude Codeが処理を終えようとした時に、強制的に続行させることもできます。#!/bin/bash# ~/.claude/hooks/check-completion.shINPUT=$(cat)STOP_ACTIVE=$(echo "$INPUT" | jq -r '.stop_hook_active')# すでにstop hookが動作している場合は無限ループを防ぐif [ "$STOP_ACTIVE" = "true" ]; then  exit 0fi# 未完了のタスクがある場合if [ -f "/tmp/claude_tasks_pending" ]; then  echo '{"decision": "block", "reason": "まだ完了していないタスクがあります。続けてください。"}'  exit 0fiセキュリティ上の注意点docs.anthropic.comHooksはフルユーザー権限で実行されます。つまり、あなたができることは全部できる。だから次のことに注意してください。信頼できないHooksは使わない（当たり前だけど）JSONの検証は必須（jqでパースしてから使う）シェル変数は必ずクォート（"$VAR"を使う、$VARは危険）パストラバーサル攻撃に注意（ファイルパスに..が含まれていないかチェック）絶対パスを使う（スクリプトの場所を明確に）実際、私も一度危険な設定を作っちゃったことがあります。{  "hooks": {    "PostToolUse": [{      "matcher": "Write",      "hooks": [{        "type": "command",        "command": "echo 'ファイル変更を検知' && touch .claude_modified && claude 'このファイルも更新して'"      }]    }]  }}だいぶ単純化しているのですがファイルを編集するたびに新しいClaude Codeのセッションを起動しようとして、それがまたファイルを編集して...みたいな連鎖反応を起こしかけた。すぐに気づいてCtrl+Cで止めたけど、こういう「Hook内でClaude Codeを呼ぶ」みたいなことは絶対やっちゃダメです。設定の安全性Claude Codeは起動時にHooksの設定をスナップショットとして保存し、セッション中はそれを使います。外部から設定ファイルを変更しても、現在のセッションには影響しません。これにより、悪意のあるHookの変更から保護されています。私が実際に使ってるHooks開発環境全体のHooks（~/.claude/settings.json）{  "hooks": {    "PostToolUse": [{      "matcher": "Write|Edit|MultiEdit",      "hooks": [{        "type": "command",        "command": "~/.claude/hooks/auto-format.sh"      }]    }],    "PreToolUse": [{      "matcher": "Bash",      "hooks": [{        "type": "command",        "command": "~/.claude/scripts/command-logger.sh"      }]    }]  }}auto-format.shは拡張子見て最も良いフォーマッター実行するスクリプト。長いので省略。プロジェクト単位のHooks（.claude/settings.json）{  "hooks": {    "PostToolUse": [{      "matcher": "Write|Edit",      "hooks": [{        "type": "command",        "command": "jq -r '.tool_input.file_path' | grep -E '\\.(test|spec)\\.(js|ts|rs)$' | xargs -r npm test -- --findRelatedTests"      }]    }]  }}テストファイル編集したら、関連テストを自動実行。便利すぎて泣ける。認知的負荷の観点から言うと、「テスト実行したっけ？」って考えなくて済むのは本当に楽。フロー状態を維持できるんですよね。集中が途切れない。デバッグ方法Hooksがうまく動かない時は、以下を確認してください。/hooksコマンドで設定を確認settings.jsonが正しいJSONフォーマットか確認コマンドを手動で実行してテスト終了コードを確認標準出力と標準エラー出力のフォーマットを確認クォートのエスケープが適切か確認進行状況はトランスクリプトモード（Ctrl+R）で確認できます。実行中のHook実行されているコマンド成功/失敗の状態出力またはエラーメッセージまた、claude --debugで起動すると、より詳細なデバッグ情報が得られます。まとめClaude Codeは優秀だけど、記憶喪失する新人エンジニアみたいなもの。CLAUDE.mdに何を書いても忘れる。でもHooksなら、システムレベルで制御できる。特に重要なのは以下の点です。自動フォーマット：もう「フォーマッター忘れた」とは言わせないセキュリティ制御：本番環境を守れ作業記録：後で絶対助かるフィードバック機能：コード品質の問題を自動で指摘MCP連携：高度なツールとの統合も可能最初は「めんどくさそう」って思うかもしれない。私もそう思ってた。でも、一度設定したら手放せなくなる。settings.json、CLAUDE.md、commands、そしてHooks。この4つを設定すれば、Claude Codeは最強の相棒になる。記憶喪失する新人エンジニアを、システムで支える。それがHooksの役割です。結果的に、開発のリードタイムが短縮されて、デプロイ頻度も上がる。本当の生産性向上は、単に数値を改善することではなく、開発者がより良いソフトウェアを、より効率的に、より楽しく作れるようにすることですからね。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スラッシュコマンドでアキネイター風なことをclaudeにさせてみた]]></title>
            <link>https://zenn.dev/akasan/articles/3b90ad19a4e8a6</link>
            <guid>https://zenn.dev/akasan/articles/3b90ad19a4e8a6</guid>
            <pubDate>Sun, 13 Jul 2025 04:57:05 GMT</pubDate>
            <content:encoded><![CDATA[今回はタイトル通り、claudeのスラッシュコマンドを使ってアキネイター風の動作をさせてみました。 アキネイターとは？アキネイターとは、質問を繰り返すことで利用者が想像しているものを当てるというものです。ランプの魔神が質問してくるということでとても有名なのではないでしょうか。https://jp.akinator.com/ claude スラッシュコマンドとは？スラッシュコマンドとは、claudeを実行した時に/hogehogeというようにコマンドのように扱うことができるものを自作することができる機能です。今回の例で言うと、/akinatorと言うコマンドを登録して、アキネ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2025年7月版読んでいて良かった本紹介]]></title>
            <link>https://zenn.dev/akasan/articles/05fc81a6ab77e5</link>
            <guid>https://zenn.dev/akasan/articles/05fc81a6ab77e5</guid>
            <pubDate>Sat, 12 Jul 2025 08:12:43 GMT</pubDate>
            <content:encoded><![CDATA[7月もあっという間に中盤になってきましたね。先月に続いて、今月読んでいた本を紹介しようと思います。6月版はこちらになりますので、ご興味があればぜひ参照してください！https://zenn.dev/akasan/articles/924c37bd0841f2 マネジメント エンジニアリング統括責任者の手引き、エンジニアリングマネージャーのしごと最近PL業務を任せていただくことが多くなっており、改めてどのようにチームを牽引していくのが良いか学びたいと思いチョイスしました。チームメンバーがどんなことが得意か、どんな悩みがあるか、将来的にどんなことをやってみたいかなどを考えるきっか...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[短編：MLエンジニアが非MLエンジニアに伝えるときに気をつけていること]]></title>
            <link>https://zenn.dev/akasan/articles/5b380d424af708</link>
            <guid>https://zenn.dev/akasan/articles/5b380d424af708</guid>
            <pubDate>Fri, 11 Jul 2025 12:44:21 GMT</pubDate>
            <content:encoded><![CDATA[今回はMLエンジニアとして普段活動している私ですが、非MLエンジニアの方に自分のやっていることやプロジェクトの各フェーズにおいてどんなことを注意・意識して伝えるようにしているかまとめてみます。 大前提としていること大前提として、MLという領域は慣れてない人からするととても難しい領域に感じられがちです。理由としては例えば以下があるかなと思います。数学や統計学など高度な知識が必要そう難しい英語とかばっかり出てきそうそれぞれ正解だと思います。MLエンジニアである私ですら普段から感じていますし、他のMLエンジニアの方も多かれ少なかれ難しいと感じることでしょう。本職がそう感じて...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apache Forrestとはなんなのか？]]></title>
            <link>https://zenn.dev/akasan/articles/ad35f63dbf46a7</link>
            <guid>https://zenn.dev/akasan/articles/ad35f63dbf46a7</guid>
            <pubDate>Thu, 10 Jul 2025 10:59:52 GMT</pubDate>
            <content:encoded><![CDATA[今回はApache Forrestについて調べてみました。 今回も以下のツールを使って対象プロジェクトを決めました！https://zenn.dev/akasan/articles/7e30ad266c02c4※ 本企画に関する記事の目的は、それぞれのプロジェクトを本格的に深ぼるのではなく、プロジェクト名⇆どんな内容かをパッと思い出せるようにすることを目指します！※ とはいえ深ぼってみたいプロジェクトがあればどんどん複数連載になると思います。 Apache Forrestとは？公式ページによると、Apache Forrest™ software is a publishi...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[開発生産性を測る時に測定の落とし穴から抜け出すために]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/07/10/141244</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/07/10/141244</guid>
            <pubDate>Thu, 10 Jul 2025 05:12:44 GMT</pubDate>
            <content:encoded><![CDATA[⚠️ 文章の半分以上を酔っ払った状態で作成しています。その点はご容赦下さい。そのため良い文章ではある気がするのですが散文になってしまってます。はじめに「うちのエンジニアチーム、生産性どうなの？」この質問を受けたとき、あなたはどう答えますか？Four Keysの数値を見せますか？プルリクエストの量を報告しますか？それとも、売上への貢献度を説明しますか？dora.dev昨晩、オタク達との飲み会で、この話題が出ました。先週、Findyさん主催の開発生産性カンファレンス2025があったからだと思います。dev-productivity-con.findy-code.io正直に言うと、私自身も長年この問題に悩んでいました。数値で示せと言われるけれど、何を測れば本当に意味があるのか。測定すれば改善するのか。そもそも測定する価値があるのか。経営層からのプレッシャーと現場の実情の間で、いつも板挟みになっている感覚でした。開発生産性を測定しようとすると、すぐに気づくことがあります。これは単純な数値化の問題じゃない。人間の心理、組織の政治、そして技術の複雑さが絡み合った、実に厄介な問題なのです。過去10年間で、開発生産性を測定するための様々なフレームワークが提案されてきました。DORAのFour Keys、SPACE framework、そして最新のDevEx（Developer Experience）。これらは確かに有用なツールですが、同時に新たな問題も生み出しています。測定することで行動が歪められ、本来の目的を見失ってしまうことも珍しくありません。私が初めてFour Keysを導入しようとした時、チームメンバーから出た質問が忘れられません。「この数値が良くなったら、僕たちは本当に幸せになれるんですか？」その時、測定の本質的な問題に気づいたのです。正直、答えに詰まりました。測定することで何が変わるのか？何が改善されるのか？そして、何が失われるのか？この記事では、開発生産性の測定に潜む「落とし穴」について深く掘り下げ、どうすればそれらを避けながら本当に価値のある改善を実現できるかを探求します。単なる理論的な議論ではなく、実際の現場で起こる問題と、それに対する実践的な解決策を提示することを目指します。なぜなら、開発生産性の向上は、単に数値を改善することではなく、開発者がより良いソフトウェアを、より効率的に、より楽しく作れるようにすることだからです。そして、それこそが私たちが本当に目指すべき「生産性」なのです。計測の科学作者:ジェームズ・ヴィンセント築地書館Amazonこのブログが良ければ読者になったり、nwiizoのXやGithubをフォロワーしてくれると嬉しいです。では、早速はじめていきます。測定されることで変わってしまう人間工場で製品を数えるのとは違って、エンジニアは自分が測定されていることを知っています。そして、測定されているとわかると、行動が変わってしまう。psycho-pass.comこれは別に悪いことではありません。むしろ自然な反応です。問題は、測定された数値を上げることが目的になってしまうことなんです。DORAの研究によると、デプロイ頻度、リードタイム、変更失敗率、復旧時間の4つの指標が重要とされていますが、これらの指標を単純に追いかけるだけでは本質的な改善にはつながりません。考えてみてください。デプロイ頻度を上げろと言われたら、どうしますか？実際に私のチームであった話ですが、デプロイ頻度をKPIにしたところ、メンバーがREADMEの誤字修正やコメントの微調整でデプロイ回数を稼ぎ始めました。確かに数値は改善しましたが、本質的な価値は何も生まれていない。このような本末転倒な状況を見て、測定の危険性を痛感しました。変更失敗率を下げろと言われれば、リスクを取らなくなり、イノベーションが止まる。リードタイムを短縮しろと言われれば、十分な時間をかけた設計やテストを怠る。私が見てきた中で最も印象的だったのは、プルリクエストの数を増やすために、本来一つでよい変更を無理やり細分化していたチームです。数値は改善したけれど、レビューの負担は増え、全体の開発効率は下がっていました。ja.wikipedia.org測定の副作用とリスク測定には、必ず副作用があります。薬と同じです。効果があるものには、必ず副作用がある。「どのような定量的な社会指標も、社会的意思決定に用いられると、その分だけ劣化圧力を受けやすくなり、追跡対象としていた社会的プロセスがゆがめられ劣化する傾向が強まる」というキャンベルの法則は、開発現場でも頻繁に観察される現象です。特に有害な測定指標として、コード行数（Lines of Code, LOC）があります。1982年のApple Lisaでの有名な事例では、Bill Atkinsonが2,000行のコードを削除してQuickDrawのパフォーマンスを6倍速くしたとき、彼の「生産性」は-2,000行と記録されました。この出来事により、経営陣はコード行数による測定を即座に廃止しました。getdx.com私も似たような経験があります。レガシーコードの大規模リファクタリングで、1万行を3,000行に削減したプロジェクト。技術的には大成功でしたが、評価面談では「今期はアウトプットが少ない」と指摘されました。数値で見れば確かにマイナスですが、保守性は格段に向上したのに。「測定できないものは管理できない、と考えるのは誤りだ。これは代償の大きい誤解だ。」という言葉は有名です。実は、この言葉は測定の重要性を説いたとされるピーター・ドラッカーの言葉を、後の人が誤解して広めたものなんです。開発生産性の測定に集中すると、測定されない重要な活動が犠牲になります。メンタリング、技術調査、リファクタリング、コードレビューでの丁寧な指導。これらの活動は短期的には数値に現れませんが、長期的なチームの健全性には不可欠です。ある優秀な新人エンジニアの話をしましょう。彼女はいつも他のメンバーの質問に丁寧に答えていました。しかし、コミット数で評価されるようになってから、「申し訳ないけど、自分のタスクに集中させてください」と言うようになりました。チーム全体の知識共有が減り、結果的に生産性は低下しました。測定を報酬や評価に直結させると、さらに大きなリスクが生まれます。内発的動機が外発的動機に置き換わり、創造性と自律性が損なわれるのです。測りすぎ――なぜパフォーマンス評価は失敗するのか？作者:ジェリー・Z・ミュラーみすず書房Amazon測定の隠れた代償：バーンアウトという現実2021年の研究では、83%の開発者がバーンアウトを経験していることが明らかになりました。このうち81%が、パンデミック期間中に燃え尽き症候群が悪化したと報告しています。www.sciencedirect.comバーンアウトは単なる疲労ではありません。WHO（世界保健機関）の定義によると、バーンアウトは「職場の慢性的なストレスが適切に管理されていない結果として生じる症候群」です。ja.wikipedia.org私自身、2019年のあるプロジェクトでバーンアウトを経験しました。「生産性向上」のプレッシャーの中、毎日ベロシティチャートを見せられ、「もっと速く」と言われ続けた結果、3ヶ月で燃え尽きました。朝起きられなくなり、コードを見るのも嫌になりました。回復するのに半年かかりました。最新の研究では、誤った生産性測定がバーンアウトの主要な原因の一つとなっていることが指摘されています。開発者が非現実的な納期を与えられ、コミット数やコード行数などの表面的な生産性指標によって評価されることで、慢性的なストレスが蓄穏されるのです。www.computerweekly.comComputer Weeklyの調査によると、「開発者生産性ソリューションは、開発者が軽減されていないリスクに遭遇したときに、より速く出荷することで対処しようとしており、これは必然的にソフトウェアエンジニアのバーンアウトを増大させる」とされています。バーンアウトの症状は多面的で、精神的・感情的な面では集中力の欠如、記憶力の問題、創造性の低下として現れます。身体的には頭痛、疲労、不眠、消化器系の問題が生じ、行動面では社会的活動からの引きこもり、生産性の低下、欠勤の増加が見られます。なぜ私たちは燃え尽きてしまうのか作者:ジョナサン マレシック青土社Amazon生産性の基盤：心理的安全性GoogleのProject Aristotleは、チームの成功において最も重要な要素を特定するために、2年間にわたって180以上のチームを研究しました。その結果、驚くべき発見がありました。rework.withgoogle.com研究者たちは当初、成果の高いチームは最も優秀な個人の集まりだと考えていました。しかし、実際にはチームの成功は「誰がチームにいるか」よりも「チームがどのように協力するか」によって決まることが判明しました。私も前職で同じ勘違いをしていました。各分野のエキスパートを集めたチームを作ったのですが、結果は期待を大きく下回りました。お互いに批判し合い、建設的な議論ができず、プロジェクトは失敗に終わりました。最も重要な要素は心理的安全性でした。心理的安全性の高いチームは、対話の機会が平等で、全メンバーが発言の機会を持っていました。また、高い社会的感受性を持ち、チームメンバーの感情やニーズを理解する能力に長けていました。そして何より、失敗を恐れずに新しいアイデアを提案できる環境がありました。心理的安全性の高いセールスチームは、目標を17%上回る成果を上げた一方、心理的安全性の低いチームは最大19%目標を下回りました。これは開発チームにも当てはまります。2019年のDORA State of DevOpsレポートでは、心理的安全性がソフトウェア配信パフォーマンス、組織パフォーマンス、生産性を予測する重要な要因であることが示されました。心理的安全性のつくりかた　「心理的柔軟性」が困難を乗り越えるチームに変える作者:石井遼介日本能率協会マネジメントセンターAmazon開発生産性の7つの項目：DORAモデルが示す本質開発生産性について議論していると、いつも同じようなことが起こります。プロダクトマネージャーは「機能の価値」を重視し、エンジニアは「コードの品質」を強調し、経営層は「売上への貢献」を求める。みんなが違うレイヤーの生産性について話しているから、永遠に議論が平行線をたどるんです。DORAでは指標がFour Keys だけではなくなっているDORAの最新Core Modelを見ると、開発生産性は「Capabilities（能力）→ Performance（パフォーマンス）→ Outcomes（結果）」という流れで構成されています。これを踏まえて、私が長年の経験から見てきた3つの階層で7つの項目を整理してみます。Capabilities（能力）Climate for learning（学習環境）最初に紹介するのは、おそらく最も見過ごされがちな要素です。DORAの研究者たちは、Climate for learning（学習環境）を測定可能な4つの要素に分解しました。コードの保守性、ドキュメントの品質、生成的文化、そしてチームのツール選択権限。一見バラバラに見えるこれらの要素が、実は「チームが継続的に学び、成長できる環境」という一つの概念を形作っているんです。「最近、チームメンバーが新しい技術について積極的に議論するようになったね」—もしこんな変化に気づいたら、それは学習環境が改善している確かな兆候です。Generative cultureとは、Ron Westrum博士が提唱した組織文化の3つのタイプの中で最も高次元の文化です。病的文化（Pathological culture）では情報が隠蔽され、責任が個人に押し付けられます。官僚的文化（Bureaucratic culture）では規則に従うことが重視され、責任が部門に分散されます。そして生成的文化（Generative culture）では、情報が自由に共有され、共通の目標に向かって協力します。多くのチームで見られる現象ですが、「優秀なエンジニアを集めれば、自然と良いチームになる」という思い込みは危険です。実際には、メンバーが意見を言わなくなり、問題の報告が遅れ、新しいアイデアも出なくなってしまうことがあります。私の経験でも、優秀な人材が集まったチームほど、お互いに遠慮して本音を言わない傾向がありました。この問題の本質は、無意識に作り出される「完璧主義の圧力」にあります。チームメンバーが「間違いを犯すことを恐れて、本当に必要な議論ができない」状態に陥ってしまうのです。学習環境の特徴は、情報の透明性を重視し、問題や課題が隠蔽されることなく、オープンに議論される環境を作ることです。学習志向も特徴的で、失敗を責めるのではなく、学習機会として捉えます。共同責任の考え方も大切で、チーム全体で成果と責任を共有します。そして、プロセスと結果の両方を継続的に改善していく姿勢が根付いています。Empowering teams to choose toolsも学習環境の重要な要素です。チームが自分たちの課題に最適なツールを選択できることで、自律性が向上し、内発的動機が高まります。選択の権限を持つことで、結果に対する責任感が自然に生まれ、新しいツールを試行錯誤することで、継続的な学習が促進されます。Fast flow（高速な流れ）デプロイ時間が10分から3分に短縮されたとき、エンジニアたちは歓声を上げました。でも、本当の価値はその7分間の短縮にあるのでしょうか？実は違います。Fast flowの本質は、価値を継続的に流す「仕組み」を構築することにあります。DORAが定義するFast flowは、継続的デリバリー、データベース変更管理、デプロイメント自動化、柔軟なインフラストラクチャ、疎結合チーム、変更承認の簡素化、バージョン管理、小バッチでの作業という8つの要素から成り立っています。デプロイ自動化に多大な時間を費やしても、実際のビジネス価値の向上は微々たるものになることがあります。技術的に高度な自動化システムを構築しても、何をデプロイするかの意思決定プロセスが改善されていなければ、本質的な生産性向上にはつながりません。実際、私も過去に3ヶ月かけて構築した自動化システムが、結局「速く価値の低いコードをデプロイできるようになっただけ」という苦い経験があります。Fast flowの重要性は、その再現性と拡張性にあります。一度構築すれば、チーム全体、そして組織全体の生産性を底上げできます。興味深いのは、これらの要素が相互に作用し合うことです。小バッチでの作業が継続的デリバリーを容易にし、疎結合なアーキテクチャがデプロイメント自動化を促進します。逆に、一つの要素が欠けると、他の要素の効果も著しく減少してしまいます。疎結合チームの概念は特に重要です。チーム間の依存関係を最小化することで、独立した開発とデプロイが可能になります。これにより、一つのチームの問題が他のチームに波及することを防ぎ、全体のスループットが向上します。Fast feedback（高速なフィードバック）新人エンジニアからよく聞かれる質問があります。「なぜテストを書くのに時間をかけるのですか？」この質問に対する答えは、体験してもらうのが一番です。テストなしで開発したコードと、包括的なテストを書いたコードで、1ヶ月後にそれぞれ機能追加を試みると、その差は歴然とします。テストがあるコードは安心して変更でき、リファクタリングも容易です。一方、テストがないコードは、変更するたびに他の部分への影響を恐れ、開発速度が数分の一に低下します。私が身をもって学んだのは、金曜日の夕方の「ちょっとした修正」でした。テストなしでデプロイした結果、土曜日の朝に本番環境が停止。原因調査と修正に週末を丸々費やしました。それ以来、テストの重要性を信じて疑いません。これがFast feedbackの真価です。DORAモデルでは、継続的インテグレーション、監視と可観測性、レジリエンス・エンジニアリング、浸透的セキュリティ、テスト自動化、テストデータ管理という6つの要素でFast feedbackを構成しています。これらは全て、学習サイクルを短縮し、問題の早期発見と迅速な修正を可能にするための仕組みです。この劇的な変化がもたらす効果は印象的です。開発者の自信が向上し、変更の影響を即座に確認できるため、大胆な改善を試みることができるようになります。技術的負債の予防も可能になり、問題が蓄積する前に対処できます。品質の向上も実現し、バグの早期発見により、高品質なソフトウェアを維持できるようになります。そして最も重要なのは、学習の促進です。失敗から素早く学び、改善を続けることができるようになります。重要なのは、Fast feedbackとFast flowが相互に作用し合うことです。迅速なフィードバックがあってこそ、安全に高頻度でデプロイできるようになります。Performance（パフォーマンス）ここまでは組織の「能力」について見てきました。でも、能力があっても成果が出なければ意味がないですよね。DORAモデルでは、CapabilitiesがどのようにPerformanceに変換されるかを明確に示しています。Software delivery（ソフトウェアデリバリー）「今回のリリース、バグ報告がほとんどないね」この言葉を聞いたとき、複雑な気持ちになることがあります。確かにバグは少ないけれど、そのコードは将来変更しやすいのか？新しい機能を追加するときに足枷になったりしないのか？Software deliveryは、Four Key Metricsで測定されます。変更リードタイム、デプロイメント頻度、変更失敗率、失敗したデプロイメントの復旧時間。これらの数値は確かに重要です。でも、数値の改善が必ずしも価値の向上につながらないことも、私たちは経験的に知っています。デプロイ頻度を上げることに集中したチームの話をしましょう。毎日デプロイできるようになった。素晴らしい！でも実際には小さなバグ修正ばかりで、ユーザーにとって意味のある機能追加はほとんどなかった。数値は改善したけれど、本質的な価値の提供は向上していなかったんです。レガシーシステムのメンテナンスプロジェクトでよくある話ですが、開発当初はFour Key Metricsの数値が良好でも、5年後には「誰も触りたがらないシステム」になってしまう。当時は「動く」ことが最優先で、「読みやすい」「変更しやすい」という品質が軽視されていたからです。Reliability（信頼性）「システムが安定しているから、新しい機能開発に集中できる」これ、当たり前のように聞こえますが、実はものすごく贅沢なことなんです。多くのチームは、日々の火消しに追われて、本来やりたい開発に時間を割けないでいます。DORAモデルでは、ReliabilityをSLO（Service Level Objectives）で測定します。測定範囲、測定焦点、目標最適化、目標遵守という4つの観点から評価するんですが、正直、最初は「なんでこんなに細かく分けるの？」と思いました。でも実際にSLOを導入してみると、その価値がわかります。以前は「なんとなく調子が悪い」という感覚的な判断でシステムを運用していたのが、「ユーザーのログイン成功率が95%を下回った」という具体的な基準で問題を判断できるようになる。これは大きな違いです。ただし、SLOの罠もあります。99.99%の可用性を目標にすると、開発チームが過度に保守的になってしまう。新機能のリリースを恐れるようになり、イノベーションが阻害される。一方、SLOが緩すぎると、ユーザー体験の悪化に気づくのが遅れてしまう。このバランスを見つけるのが本当に難しい。Outcomes（結果）ここまで能力（Capabilities）とパフォーマンス（Performance）について見てきましたが、結局のところ、経営層が知りたいのは「で、売上は上がるの？」「チームは幸せに働けているの？」という2つの質問への答えなんですよね。Organizational performance（組織パフォーマンス）「新機能のおかげで、売上が20%向上しました！」経営層の目がキラッと光る瞬間です。でも、ちょっと待って。その売上向上、本当に開発チームの成果だけでしょうか？DORAモデルが面白いのは、Organizational performanceを商業的な成果（売上、利益、市場シェアなど）と非商業的な成果（社会的価値、顧客満足度、ブランド価値など）の両方で評価することです。これ、すごく現実的だと思いません？B2Bプロダクトの開発でよくある話なんですが、開発チームが6ヶ月かけて技術的に優れた機能を実装した。Four Key Metricsの数値も改善した。でも、リリース後の売上への影響は...微々たるもの。なぜか？営業チームがその機能の価値を理解していなかったり、競合他社が同時期に似たような機能をリリースしていたりするからです。私も経験があります。渾身の機能が営業に理解されず、埋もれていく悲しさ。逆のパターンもあります。技術的には単純な機能が、営業チームの強力なプッシュと市場のタイミングが合致して、予想外の売上向上をもたらす。開発チームとしては「え、あれが？」という感じですが、これも現実です。CSVエクスポートボタンを追加しただけで大絶賛されたときは、正直複雑な気持ちでした。個人的に好きな事例は、カスタマーサポートツールの改善です。技術的には地味な作業でしたが、サポートチームの応答時間が半分になり、顧客満足度が15ポイント上昇。これが口コミで広がり、新規顧客の獲得につながった。地味だけど、確実に価値を生み出す仕事ってありますよね。Well-being（幸福度）最後に、おそらく最も重要な指標について話しましょう。「最近、チームメンバーの表情が明るくなったね」—これ、数値化できますか？できないですよね。でも、これこそが最も重要な成果の指標かもしれません。DORAモデルがWell-beingを重要なOutcomeとして位置づけているのは、本当に画期的だと思います。仕事の満足度、生産性の実感、バーンアウトの減少、リワークの減少。これらを真面目に測定し、他の成果と同等に扱う。技術的負債の解消プロジェクトの話をしましょう。短期的には売上に全く貢献しない。でも、開発チームの満足度が上昇した結果、新機能の開発速度が2倍に改善され、チームメンバーの離職率が下がり、新しい人材の獲得も容易になった。これ、立派な「成果」じゃないですか？「前は毎日、レガシーコードと格闘するのが苦痛でした。でも今は、新しい機能を作るのが楽しくて仕方がありません」こんな声が聞こえてくるようになったら、それは真の生産性向上の証拠です。数値では測れない、でも確実に存在する価値。それがWell-beingなんです。項目間の相互作用：システム思考の重要性ここまで7つの項目を個別に見てきましたが、実はこれらを別々に考えること自体が罠なんです。DORAモデルの本当の価値は、Capabilities → Performance → Outcomesという流れを示したことにあります。これ、当たり前のように見えて、実はすごく重要な洞察なんですよ。考えてみてください。Climate for learningが向上すると何が起きるか？チームメンバーが新しいことに挑戦しやすくなり、Fast flowとFast feedbackの改善アイデアがどんどん出てくる。その結果、Software deliveryとReliabilityが向上し、最終的にOrganizational performanceとWell-beingの改善につながる。全部つながっているんです。最新のDORA研究で「Reduced rework（リワークの減少）」が重要なOutcomeとして追加されたのも興味深いですね。要するに、「二度手間を減らす」ということ。品質向上が長期的にはすべての項目の生産性を向上させる、という当たり前だけど見落としがちな事実を改めて示しています。多くの組織で起きる失敗は、この相互作用を理解せずに、単一の項目だけを最適化しようとすることです。「とりあえずデプロイ頻度を上げよう！」とか言って、他の項目への影響を考えない。結果として、局所最適化の罠にはまってしまうんです。本当の生産性向上は、これら7つの項目を統合的に理解し、バランスよく改善していくことでしか達成できません。簡単じゃないですよ。でも、だからこそやりがいがあるんじゃないでしょうか。SPACE framework：包括的な測定手法DORAのFour Keysだけじゃ物足りないと思った人たちがいました。Microsoftの研究者Nicole Forsgren（DORAの研究者でもある）、GitHub、そしてVictoria大学の研究者たちです。彼らが開発したSPACE frameworkは、開発生産性を5つの次元で測定しようという野心的な試みです。www.microsoft.com名前の由来は各次元の頭文字なんですが、これがなかなか覚えやすい。Satisfaction and Well-being（満足度と幸福度）って、要するに開発者が仕事を楽しんでいるかどうか。チーム、ツール、文化にどれだけ満足しているか。満足度が高いチームは生産性も高い傾向があるって、まあ当たり前といえば当たり前ですが、それを真面目に測定しようというのが新しい。Performance（パフォーマンス）は、チームがどれだけ成果を出せているか。品質、顧客満足度、ビジネス価値の創出など。DORAのPerformanceより広い概念ですね。Activity（活動）は、開発者が日々何をしているか。コーディング、テスト、デバッグ、会議、コードレビュー...でも重要なのは量じゃなくて質と価値。忙しそうに見えても価値を生んでいなければ意味がない。実際、「8時間コーディングしました」と報告してきたメンバーの成果物を見たら、ほとんど進捗がなかったことがあります。聞いてみたら、Stack Overflowを彷徨っていたとか。Communication and Collaboration（コミュニケーションとコラボレーション）。これ、測定が難しいんですよね。でも、コードレビューの質とか、知識共有の頻度とか、新人のオンボーディング時間とか、工夫すれば測れるものはある。Efficiency and Flow（効率性とフロー）は、どれだけスムーズに仕事が進んでいるか。個人レベルでは集中時間の確保、チームレベルでは無駄な待ち時間の削減。これ、DevExのFlowとも関連していて面白い。queue.acm.orgで、SPACE frameworkの最も重要な教訓は何か？これらの次元を単独で使うな、ということです。「Activity（活動量）だけ見て評価するなんて最悪だぞ」と研究者たちは警告しています。複数の次元を組み合わせることで、初めて生産性の全体像が見えてくるんです。DevEx：最新の開発者体験フレームワーク2023年、また新しいフレームワークが登場しました。今度は誰が作ったかって？なんと、DORA、SPACE、その他の研究フレームワークの創設者たちが集まって作ったんです。オールスターチームみたいなものですね。queue.acm.orgDevEx（Developer Experience）は、名前の通り「開発者の体験」に焦点を当てています。でも、これまでのフレームワークと何が違うのか？それは「日常業務で遭遇する摩擦ポイント」に注目したことです。3つの核心次元がシンプルで分かりやすい：Flow（フロー）—これ、心理学者のチクセントミハイが提唱した「フロー状態」から来ています。没頭して時間を忘れるあの感覚。でも現実は？会議、Slack通知、「ちょっといい？」の声かけ。集中なんてできやしない。DevExは、この中断の頻度や種類、深い集中状態に入れる能力を測定します。実際に測定してみたら、1日で本当に集中できた時間は平均2時間しかありませんでした。残りは会議、Slack対応、「緊急」の割り込み...これじゃ生産性上がるわけない。Feedback（フィードバック）—コードを書いて、結果がわかるまでどれくらいかかるか。ビルドに20分、テストに30分、レビューに3日...これじゃ学習サイクルが回らない。DevExは、この待ち時間をどれだけ短縮できるかに注目します。Cognitive Load（認知負荷）—これが個人的には一番重要だと思います。複雑なシステム、分散したドキュメント、謎の暗黙知...頭がパンクしそうになりますよね。DevExは、開発者が作業を完了するために必要な精神的努力を測定します。あるレガシープロジェクトでは、新機能追加の見積もりが2週間だったのに、実際は2ヶ月かかりました。原因？ドキュメントがない、コメントもない、設計思想は「歴史的経緯」。認知負荷が高すぎたんです。面白いのは、Gartnerの調査で78%の組織が正式なDevExイニシアチブを確立または計画しているということ。みんな開発者体験の重要性に気づき始めているんです。そして驚くべきは、2020年のMcKinseyの研究結果。より良い開発者環境を持つ企業は、競合他社の4〜5倍の収益成長を達成したそうです。4〜5倍ですよ？これ、もはや「あったらいいな」じゃなくて、競争力の源泉なんです。測定の隠れたコスト「測定は無料だから、とりあえずやってみよう」これ、大きな間違いです。測定には必ずコストがかかります。そして、そのコストは思っているより高い。データを集めるための時間、分析するための時間、会議で議論する時間、ツールの導入と維持にかかるコスト、そして何より、本来の開発作業から奪われる時間。開発生産性を測定するために、エンジニアが1日30分をデータ入力に費やすケースを考えてみましょう。5人のチームなら、週に12.5時間。月に50時間。年間で600時間も本来の開発から奪われることになります。600時間あったら、中規模の機能を2つは作れますよね？その測定から得られた洞察は、正直に言って、その600時間に見合うものであることは稀です。「デプロイ頻度が先月より10%上がりました」という報告のために600時間を使う価値があるでしょうか？入門 監視 ―モダンなモニタリングのためのデザインパターン作者:Mike JulianオライリージャパンAmazonなぜ経営層は測定を求めるのか経営層が開発生産性の測定を求めるのには、理由があります。「エンジニアチームに多額の投資をしているのに、その効果が見えない」「開発が遅いと感じるけれど、それが妥当なのかわからない」「他社と比較して、うちのチームはどうなのか知りたい」こうした不安、すごくよくわかります。経営層も人間ですから、見えないものは不安なんです。特に、エンジニアリングという「よくわからない」領域に大金を投じているわけですから。ある経営者との対話で印象的だったのは、「年間1億円投資してるけど、何が生まれてるのかわからない」という率直な告白でした。確かに、エンジニアリングって外から見たらブラックボックスですよね。でも、その解決策として測定を求めるのは、多くの場合、適切ではありません。本当に必要なのは、開発プロセスの可視化と、エンジニアチームとのコミュニケーション改善です。測定は、その手段の一つでしかありません。そして、多くの場合、測定よりも対話の方が効果的だったりするんです。私が実践して効果があったのは、月1回の「技術説明会」でした。経営層向けに、今月の成果を「普通の言葉で」説明する。「データベースを最適化しました」じゃなくて「お客様の画面表示が3秒から1秒になりました」というように。すると理解が深まり、不安も解消されていきました。エンジニア組織を強くする 開発生産性の教科書 ～事例から学ぶ、生産性向上への取り組み方～作者:佐藤 将高,Findy Inc.技術評論社AmazonFour Keysの光と影Four Keysは確かに優れた指標です。DORAの長年の研究に基づいており、多くの組織で実際に改善の指針として機能しています。でも、Four Keysには限界があるんですよ。例えば、Sansan社のモバイルアプリ開発チームの事例。彼らはFour Keysからベロシティを含む別の指標に変更しました。なぜか？モバイルアプリでは過度にリリース頻度を増やすとユーザ体験を損ねる場合があり、Four Keysの前提と合わなかったからです。これ、すごく重要な気づきですよね。Four Keysって、Webサービスの継続的デプロイを前提にしている部分があるんです。でも、すべてのソフトウェアがそうじゃない。他にも限界はあります。デリバリーの効率は測れても、何をデリバリーするかの適切さは測れません。チームの健全性は示唆できても、個人の成長やモチベーションは見えません。開発プロセスの改善は追跡できても、顧客価値の創出は直接的には測れません。Four Keysを「結果指標」として理解することが重要です。数値を上げることが目的ではなく、数値の背後にある組織の能力（Capability）を改善することが目的なのです。2018年に発売された『LeanとDevOpsの科学』には、実はこのことがちゃんと書いてあるんです。もっとみんな、内容を読めばいいのにって思っています。LeanとDevOpsの科学［Accelerate］ テクノロジーの戦略的活用が組織変革を加速する impress top gearシリーズ作者:Nicole Forsgren Ph.D.,Jez Humble,Gene Kim,武舎広幸,武舎るみインプレスAmazonこちらの資料もめちゃくちゃに良いので読んでみてほしいです。『LeanとDevOpsの科学』を読まずにFour Keysをきちんと利用することはほぼ不可能です。Forsgrenらが発見した、DevOps組織のパフォーマンスを上げるために必要な24（現在は27）のケイパビリティには、継続的デリバリは当然のこと、組織文化やリーダーシップ、リーンといったものも含まれています。 speakerdeck.com変革型リーダーシップの重要性開発生産性の向上って、結局のところ技術的な問題じゃないんです。人の問題なんです。英国工学技術学会の調査結果を見て驚きました。リーダーシップスキルを持つエンジニアは、チームの生産性を30%向上させることができるそうです。30%ですよ？どんなツールを導入するよりも効果的じゃないですか。jellyfish.co特に効果的なのが変革型リーダーシップ（Transformational Leadership）です。難しそうな名前ですが、要はチームメンバーの内発的動機を高め、組織のビジョンに向けて一緒に頑張ろうと導くリーダーシップスタイルのことです。でも、多くの技術者にとって、リーダーシップは自然に身につくものではありません。コードは書けても、人を導くのは苦手。そんな人が多いんじゃないでしょうか。私もそうでした。そこで注目されているのがスタッフエンジニアという役割です。組織横断的な技術的課題に取り組み、他のエンジニアの技術的判断をガイドする。直接的な部下を持たずとも、影響力とリーダーシップが求められる役割です。スタッフエンジニア　マネジメントを超えるリーダーシップ作者:Will Larson日経BPAmazonスタッフエンジニアのリーダーシップは、従来のマネジメント型とは違います。権限じゃなくて専門性に基づく影響力。階層的な指示じゃなくて技術的な説得力。個人のパフォーマンス管理じゃなくてチーム全体の技術的能力向上。これって、変革型リーダーシップの理論とぴったり合うんです。理想化された影響、鼓舞的動機、知的刺激、個別的配慮という4つの要素。これらを理解し実践することが、開発生産性の向上には不可欠なんです。変革型リーダーシップの4つの要素変革型リーダーシップは4つの要素から構成されているんですが、これが結構難しい。理論は美しいけど、実践となると...理想化された影響（Idealized Influence）リーダーがロールモデルとして機能し、チームメンバーから尊敬と称賛を得る。言うは易く行うは難し。技術的な専門性を維持しながら、チームの成功を優先する。言うのは簡単ですが、実際にやってみると矛盾だらけです。完璧である必要はないということが重要です。むしろ、自分の失敗を率直に認め、そこから学ぶ姿勢を見せることの方が大切です。設計したアーキテクチャに重大な欠陥があることが発覚した時、言い訳をするのではなく、チーム全体の前で設計判断の誤りを認め、なぜそう判断したのか、どうすれば防げたのかを一緒に考えることで、チーム全体の雰囲気が変わります。メンバーも自分の失敗を隠さなくなり、互いに助け合うようになるのです。私が設計したマイクロサービスアーキテクチャが複雑すぎて誰もメンテできなくなった時、素直に「ごめん、設計ミスだった」と認めました。すると、他のメンバーも「実は自分も...」と失敗を共有し始め、チーム全体がオープンになりました。技術的な信頼性を保つことも重要ですが、それ以上に倫理的な行動を示すことが大切です。困難な状況でも一貫した価値観を示し、透明性のある意思決定を行う。コードレビューでは建設的なフィードバックを提供し、自らも率先してレビューを受ける。これらの小さな行動の積み重ねが、信頼関係を築いていくのです。リーダーの仮面――「いちプレーヤー」から「マネジャー」に頭を切り替える思考法作者:安藤 広大ダイヤモンド社Amazon鼓舞的動機（Inspirational Motivation）魅力的なビジョンを設定し、目的意識を創造する能力は相反する能力ではありません。エンジニアは概して現実的で、抽象的なビジョンには懐疑的です。だから工夫が必要なんです。効果的なのは、技術的なビジョンを具体的なユーザー体験と結びつけることです。スプリント開始時に、実装する機能がユーザーにどのような価値を提供するかを具体的に説明する。技術的負債の解消を「将来の自分たちへの投資」として位置づける。新しい技術の導入を「チームの競争力向上」として意味づける。レガシーコードのリファクタリングを進める際、チームメンバーから「この作業に意味があるのか？」という質問を受けることがあります。そんな時は、6ヶ月後にその部分に新機能を追加することになった時のことを具体的に想像してもらいます。現在のコードのままだと、開発に2週間かかり、バグの発生率も高くなる。しかし、今リファクタリングすれば、その作業が3日で完了し、品質も向上する。このように、抽象的なビジョンを具体的な体験に変換することで、チームの目的意識を創造することができるのです。モチベーション革命　稼ぐために働きたくない世代の解体書 (NewsPicks Book)作者:尾原和啓幻冬舎Amazon知的刺激（Intellectual Stimulation）「従来の方法に挑戦し、新しい視点とアプローチを奨励する」これは技術者にとって最も自然な要素かもしれません。でも、実際には思っているより難しい。なぜなら、自分の知識や経験が邪魔をするからです。重要なのは、答えを教えるのではなく、考えを促す質問を投げかけることです。アーキテクチャ設計時に「他にどのような方法があるか？」と問いかけたり、チームメンバーが新しいフレームワークを提案した際は批判ではなく検証を支援したり、定期的に「なぜこの方法を選択したのか？」を振り返る時間を設けることが効果的です。新人エンジニアが既存のアプローチとは全く異なる解決策を提案した時、「それは複雑すぎる」と却下するのではなく、「面白いアイデアですね。どのようなメリットがあると思いますか？」と質問することで、見落としていた重要な利点が発見されることがあります。失敗を学習機会として扱うことも重要です。エラーが発生した時、誰が悪いかを追求するのではなく、なぜそのエラーが発生したのか、どうすれば再発を防げるのかを一緒に考える。これにより、チーム全体の学習能力が向上します。Unlearn（アンラーン）　人生100年時代の新しい「学び」作者:柳川 範之,為末 大日経BPAmazon個別的配慮（Individualized Consideration）「各チームメンバーの個人的なニーズと能力に注意を払う」これが最も時間がかかり、最も重要な要素です。なぜなら、人は一人一人違うから。定期的な1on1を実施し、各メンバーの目標に応じた学習機会を提供することが基本となります。各メンバーの強みを理解して各人の能力に最も合致した役割を割り当て、メンバーの性格や学習スタイルに合わせてフィードバックを調整することが重要です。例えば、内向的で技術的には優秀だが会議では発言しないエンジニアがいる場合、「もっと積極的に発言してください」と言うだけでは効果がありません。1on1で話してみると、口頭でのコミュニケーションが苦手だが、文書でのコミュニケーションは得意だということがわかることがあります。そのような場合は、事前に意見を文書で整理してもらい、会議ではその内容を代弁する形にする。また、複雑な技術的な判断が必要な場合は、文書で分析してもらうなど、個々の特性に合わせたアプローチが効果的です。「変化を嫌う人」を動かす:魅力的な提案が受け入れられない4つの理由作者:ロレン・ノードグレン,デイヴィッド・ションタル,船木 謙一(監修)草思社Amazon変革型リーダーシップの落とし穴ただし、変革型リーダーシップにも限界があります。最新の研究では、変革型リーダーシップには「収穫逓減の法則」が適用され、過度なリーダーシップは逆効果になる可能性があることが示されています。組織がリーダー個人に過度に依存してしまうと、組織の脆弱性が高まります。カリスマ的なリーダーが常に高いエネルギーを維持し続けることは持続可能ではなく、強力なビジョンが異なる意見や多様な視点を排除してしまうリスクもあります。特に注意が必要なのは、短期的な成果の軽視です。長期的なビジョンに集中しすぎると、短期的な成果や日々の小さな勝利を見落としがちになります。チームメンバーは理想的な未来への道筋だけでなく、現在の進歩を実感できる具体的な成果も必要としています。測定の難しさと現実的なアプローチ変革型リーダーシップの効果を測定するのは困難です。チームの離職率、技術的負債の減少速度、新機能の開発速度など、定量的な指標はある程度の示唆を与えますが、それだけでは全体像は見えません。360度フィードバックでのリーダーシップ評価もよく使われますが、これには重大な問題があります。匿名性があるとはいえ、多くの場合、評価者は無意識に「政治的に正しい」回答をしてしまいます。特に日本の組織文化では、率直なフィードバックを避ける傾向が強く、結果として「みんな平均的に良い」という無意味なデータが集まることが多いのです。また、360度評価は実施に多大な時間とコストがかかる割に、具体的な改善アクションにつながりにくいという本質的な欠陥もあります。チームメンバーの満足度調査、技術的な意思決定への参加度なども重要な指標ですが、これらの定性的な指標は解釈が複雑で、文脈に大きく依存します。効果的な測定指標として注目されているのは、チームメンバーが自発的に新しいアイデアを提案する頻度です。これは心理的安全性が確保され、知的刺激が機能していることを示す重要なサインと考えられています。また、クロスファンクショナルなコラボレーションの増加や、チーム内での知識共有の活発化も、変革型リーダーシップの効果を示す指標となります。DevOps文化との融合変革型リーダーシップとDevOps文化って、実は相性抜群なんです。どちらも継続的な学習と改善を重視し、実験と失敗からの学習を奨励し、協調とコラボレーションを促進し、顧客価値の最大化を目指す。価値観がぴったり一致しているんです。具体的にどう実践するか？レトロスペクティブで建設的な振り返りをする。技術的な実験を恐れない文化を作る。部門の壁を越えたコラボレーションを推進する。顧客フィードバックを開発プロセスに組み込む。これらは全部、変革型リーダーシップの4つの要素を日常的に発揮するための基盤になります。リーダーシップとDevOps、別々に考える必要はないんです。一体として実践すればいい。変革型リーダーシップは単なる管理手法じゃありません。技術組織の文化と価値観を形成する重要な要素です。適切に実装できれば、開発生産性の向上だけじゃなく、チームメンバーの満足度と継続的な成長にも大きく貢献します。ただし、これは一朝一夕で身につくものじゃありません。組織全体での継続的な学習と実践が必要です。でも、その価値は十分にあると思いませんか？現場の声を聞く重要性現場にとって最も効果的な測定システムは、現場の人間が適切に設計したものです。机上で考えた理想的な指標よりも、実際に開発をしているエンジニアの経験と判断の方が、多くの場合、より正確な情報を提供します。「あのエンジニアは本当に頼りになる」「この機能は使いやすくて、お客さんからの評判がいい」「最近、デプロイが安定していて、安心して作業できる」こんな声が聞こえてきたら、それは本当の生産性向上の証拠です。数値では捉えられない、でも確実に存在する価値。それを見逃してはいけません。エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング作者:広木 大地技術評論社Amazon客観性の落とし穴 (ちくまプリマー新書 ４２７)作者:村上　靖彦筑摩書房Amazon代替的なアプローチ標準化された測定だけが、情報収集の方法ではありません。DORAの最新研究や『LeanとDevOpsの科学』でも強調されているのは、定量的な指標と定性的な情報の組み合わせの重要性です。顧客からの直接的なフィードバック、チーム内での振り返り、個人との1on1での会話、実際のプロダクト使用体験...これらは数値化しにくいけれど、めちゃくちゃ価値が高い。特に重要なのは、実際にプロダクトを使っているユーザーの生の声です。「この機能があって助かった」「バグが少なくて使いやすい」「新しい機能がすぐに追加されて嬉しい」こんなフィードバックは、どんな精密な測定指標よりも、本当の生産性と価値創出を示しています。私が経験した最も効果的な方法は、エンジニア全員でカスタマーサポートの電話を聞くことでした。「この機能、使いにくい」「ここがわからない」という生の声を聞くと、自然と「もっといいものを作ろう」という気持ちになります。DORAの最新モデルでは、こうした多角的なアプローチが体系化されています。定量的なFour Key Metrics、定性的な組織文化評価、そして顧客価値に関する直接的なフィードバック。これらを組み合わせることで、より包括的な生産性評価が可能になるんです。スクラム研究でも同じような結論に達しています。チームの効果性を評価するには、定量的な指標だけじゃなく、7年間の研究で明らかになった5つのKey Factorを元にした包括的な評価が重要だということです。 speakerdeck.com測定の限界を受け入れる最終的に、測定には限界があることを受け入れる必要があります。すべての問題が解決可能なわけではなく、測定で改善できる問題はさらに限定的です。「測定できないものは管理できない」という考え方は間違いです。むしろ、測定できない要素こそが、組織の成功にとって決定的に重要な場合が多いのです。透明性の向上は問題を可視化しますが、それ自体は解決策ではありません。複雑な問題は単純な数値では表現できず、熟練した専門家の判断力と解釈力が不可欠です。そして何より、測定に振り回されて、本来の目的を見失ってはいけません。私たちの目的は、数値を改善することではなく、より良いソフトウェアを作り、ユーザーに価値を届けることなのですから。buildersbox.corp-sansan.com測定の落とし穴を避けるための現実的なアプローチここまで問題点ばかり指摘してきましたが、じゃあどうすればいいのか？実践的な提言をまとめてみました。1. 心理的安全性の確立を最優先にGoogle Project Aristotleの研究結果は衝撃的でした。チーム成功の最重要要素は、優秀な人材でも、厳密に設計されたプロセスでもなく、「心理的安全性」だったんです。でも、どうやって心理的安全性を作るのか？Amy Edmondsonの診断アンケートを使って現状把握から始めるのがおすすめです。特に「失敗について話し合うことができる」という項目のスコアが低い場合は要注意。リーダーが率先して自分の失敗を開示することも効果的です。設計判断の誤り、顧客要件の理解不足、見積もりの甘さ...これらを隠さず共有し、そこから何を学んだかを明確に示す。すると不思議なことに、チーム全体が失敗を隠さなくなるんです。1on1も重要です。表面上は問題なく見えても、内心では不安を抱えているメンバーは多い。定期的に個別で話を聞き、本音を引き出す。これには時間がかかりますが、投資する価値は十分にあります。そして、失敗を非難しない文化を明文化すること。「学習のための失敗」は奨励し、「不注意による失敗」は改善のためのサポートを提供する。この区別を明確にすることで、チームメンバーは安心して挑戦できるようになります。2. 多次元的な測定アプローチの段階的導入SPACE frameworkやDevExを見て「これ全部測定するの？」と思った方、正解です。いきなり全部やろうとすると測定疲れで倒れます。だから段階的にやりましょう。まずは月1回の簡単な満足度調査（5分程度）から。「今月の仕事、楽しかったですか？」くらいのシンプルな質問で十分です。慣れてきたら四半期ごとにSPACE評価を実施し、半年ごとにDevExの深掘りインタビューを行う。面白い発見もあります。満足度と認知負荷には強い負の相関があるんです。つまり、頭がパンクしそうな状態では、仕事を楽しめない。当たり前といえば当たり前ですが、データで示されると説得力が違います。測定の品質を確保するためには、匿名性の保証が不可欠です。「正直に答えてもらえなければ、測定する意味がない」ということを、経営層にも理解してもらう必要があります。そして最重要ポイント：測定結果を必ず改善アクションに繋げること。データを集めるだけで終わったら、次回から誰も協力してくれなくなります。3. 開発者の主観的体験の重視DevEx研究の最大の貢献は、「開発者の主観的体験が生産性に大きく影響する」ことを明確にしたことです。フロー状態の測定では、中断頻度の記録が鍵になります。技術的な中断（ビルドエラー、テスト失敗）より、人的な中断（会議、Slack、「ちょっといい？」）の方が影響が大きいんです。これ、実感としてもわかりますよね。認知負荷の評価も重要です。新しいコードベースの理解困難度、ツールの複雑さ、意思決定に必要な情報の入手困難度...これらを定期的に評価することで、本当のボトルネックが見えてきます。実践的な収集方法として効果的なのは、デイリースタンドアップで「昨日一番ストレスを感じたのは何？」を共有すること。最初は戸惑うかもしれませんが、慣れると貴重な情報源になります。4. バーンアウト予防の測定戦略への組み込み83%の開発者がバーンアウトを経験している現状を踏まえ、測定によるストレス増大を避ける必要があります。早期発見システムの構築では、Maslach Burnout Inventory（MBI）の定期実施、勤務時間外の連絡頻度監視、休暇取得パターンの分析、パフォーマンスの突然の変化検出などが重要です。特に、普段高いパフォーマンスを示していたメンバーの生産性が突然低下した場合は、バーンアウトの兆候である可能性が高いため、早期の介入が必要です。予防的介入としては、持続可能な開発ペースの維持が最も重要です。十分な休息とリフレッシュの機会を提供し、技術的な成長機会を定期的に提供することで、内発的動機を維持できます。短期的な成果を追求するあまり、長期的な持続可能性を損なわないよう注意が必要です。5. 変革型リーダーシップの体系的育成技術的な改善だけでなく、リーダーシップスキルを持つエンジニアの育成が重要です。リーダーシップの育成は、メンバーの成長段階に応じて異なるアプローチが必要です。初級レベルでは、まず1on1スキルと効果的なフィードバック方法の習得から始めます。これらは日々のコミュニケーションの基礎となる重要なスキルです。中級レベルに進むと、組織間協調と戦略的思考の能力開発に焦点を移します。単一チームの枠を超えて、より広い視野で物事を考える力を養うのです。そして上級レベルでは、ビジョンの策定と組織文化の変革という、より高次元のリーダーシップスキルの習得を目指します。実践的な育成方法として、まずメンターシップ制度の導入が効果的です。経験豊富なリーダーから直接学ぶ機会を提供することで、理論だけでなく実践的な知恵も伝承できます。リーダーシップ研修の実施も重要ですが、座学だけでなく実際の場面を想定したロールプレイングなどを組み込むことで、より実践的な学習が可能になります。360度フィードバックも活用できますが、先述したようにその限界を理解した上で、あくまで補助的なツールとして使うべきです。最も重要なのは、理論と実践を組み合わせた学習アプローチです。学んだことをすぐに現場で試し、その結果を振り返ることで、真のリーダーシップスキルが身についていくのです。6. 組織文化への戦略的投資測定は手段であり、目的ではありません。持続的な生産性向上には組織文化の醸成が不可欠です。文化醸成は段階的に進める必要があります。まず現状把握として、組織文化診断を実施し、Westrum文化モデルで現状を評価して文化的な問題点を特定します。次に意識変革の段階では、文化変革の必要性を共有し、変革ビジョンを策定します。最も困難な行動変容の段階では、新しい行動パターンを実践し、成功事例を共有していきます。具体的な施策として、失敗を学習に変えるプロセスの構築、実験を奨励する制度の導入、部門横断的なコラボレーションの推進、顧客価値創出への集中などが重要です。これらの施策を通じて、組織文化を徐々に変革していくことができます。7. 測定疲れを防ぐ持続可能な仕組み測定自体が負担になってしまっては本末転倒です。最小限の負担で最大の効果を得るためには、自動化可能な指標を優先し、既存ツールからのデータ収集を活用し、短時間で完了する調査を設計し、重複する測定を排除することが重要です。明確な価値の提示も欠かせません。測定結果の活用方法を明示し、改善につながる実例を共有し、測定コストと得られる価値を比較し、無駄な測定を定期的に見直すことで、チームメンバーの理解と協力を得ることができます。参加型の設計により、開発者自身が測定項目を提案し、測定結果の解釈に参加し、改善アクションを共同で立案し、測定システムを継続的に改善していくことで、測定への抵抗感を3分の1程度に減らすことができます。これらの提言を実装することで、測定の落とし穴を避けながら、真の開発生産性向上を実現できます。重要なのは、一度にすべてを実装しようとするのではなく、組織の成熟度に合わせて段階的に取り組むことです。そして、常に人間を中心に据え、測定が目的ではなく手段であることを忘れないことです。ちゃんとした生産性向上への道では、どうすればいいのでしょうか？測定を諦める必要はありません。でも、測定を万能薬だと考えるのは危険です。重要なのは、測定を改善の手段として位置づけることです。数値の背後にある人間の活動と組織の能力に焦点を当て、測定されない価値を見過ごさないことです。Four Keysのような指標は、組織の健全性を示すバイタルサインのようなものです。熱があるのは病気のサインかもしれませんが、熱を下げることが治療ではありません。根本的な原因を理解し、原因に基づいた対処をすることが重要なのです。実際、DORAの最新の研究プログラムでは、Four Keysだけでなく、より包括的な行動科学的手法を用いて、働き方、ソフトウェア配信パフォーマンス、組織目標、個人の幸福度を結ぶ予測経路を解明しています。この統合的なアプローチが、実質的な生産性向上への道なんです。dora.devさいごに飲み会帰りの散文、失礼しました。開発生産性は、簡単には測れません。測れたとしても、その数値が全てを語ってくれるわけではありません。でも、だからこそ面白いんです。人間の創造性、チームの協力、技術の進歩、顧客の満足。これらすべてが絡み合って、本当の生産性が生まれます。単純な数式では表せない、複雑で美しいシステムです。測定は重要ですが、測定されない価値を忘れてはいけません。数値の向上は手段であって、目的ではありません。真の目的は、より良いソフトウェアを、より効率的に、より楽しく作ることです。エンジニアリングって、本来楽しいものですよね？新しいものを作り出す喜び、難しい問題を解決する達成感、チームで何かを成し遂げる充実感。これらを犠牲にしてまで、数値を追いかける価値があるでしょうか？開発生産性の測定に万能な答えはありません。でも、その限界を理解し、謙虚に取り組むことで、より良いチーム、より良いプロダクト、より良い組織を作ることができるはずです。この記事が、開発生産性の測定に取り組む皆さんの一助となれば幸いです。測定の落とし穴を避け、本当に価値のある改善に向けて、一緒に歩みを進めていきましょう。そして最後に一つ。もし「この数値が良くなったら、僕たちは本当に幸せになれるんですか？」と聞かれたら、あなたはどう答えますか？私なら、こう答えます。「数値は幸せを保証しない。でも、みんなで一緒に改善していく過程は、きっと価値があるはずだよ」って。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[mypy: type checker for python]]></title>
            <link>https://daisuke1024akagawa.medium.com/mypy-type-checker-for-python-0cafa6124ad6?source=rss-c54ac439ad2b------2</link>
            <guid>https://daisuke1024akagawa.medium.com/mypy-type-checker-for-python-0cafa6124ad6?source=rss-c54ac439ad2b------2</guid>
            <pubDate>Wed, 09 Jul 2025 12:51:38 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Apache Gumpとはなんなのか？]]></title>
            <link>https://zenn.dev/akasan/articles/5691b542781fb1</link>
            <guid>https://zenn.dev/akasan/articles/5691b542781fb1</guid>
            <pubDate>Wed, 09 Jul 2025 10:38:01 GMT</pubDate>
            <content:encoded><![CDATA[今回はApache Gumpについて調べてみました。 今回も以下のツールを使って対象プロジェクトを決めました！https://zenn.dev/akasan/articles/7e30ad266c02c4※ 本企画に関する記事の目的は、それぞれのプロジェクトを本格的に深ぼるのではなく、プロジェクト名⇆どんな内容かをパッと思い出せるようにすることを目指します！※ とはいえ深ぼってみたいプロジェクトがあればどんどん複数連載になると思います。 Apache Gumpとは？公式サイトによるとThe Apache Gump continuous integration tool w...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes上の異なるPodにFastAPIサーバを立てて通信させてみた]]></title>
            <link>https://zenn.dev/akasan/articles/a65b74f47a204d</link>
            <guid>https://zenn.dev/akasan/articles/a65b74f47a204d</guid>
            <pubDate>Tue, 08 Jul 2025 13:37:14 GMT</pubDate>
            <content:encoded><![CDATA[今回は、Kubernetes上で異なるFastAPIサーバを立てて、片方のFastAPIサーバにアクセスすると別のFastAPIサーバにアクセスされる環境を作ってみました。まだマイクロサービスを構築した経験が少ないので、まずはシンプルな構成から始めてみます。 今回のシステム構成今回は以下のような構成でシステムを構築します。Google CloudのGKE上でシステムを構成DockerイメージはArtifact Registryに保存FastAPIサーバは二種類建てるパブリックアクセスをするためのサーバパブリックサーバからアクセスされるが、クラスタ内に閉じているプライベ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apache Sqoopとはなんなのか？]]></title>
            <link>https://zenn.dev/akasan/articles/a4ad368de2cd4a</link>
            <guid>https://zenn.dev/akasan/articles/a4ad368de2cd4a</guid>
            <pubDate>Mon, 07 Jul 2025 12:53:39 GMT</pubDate>
            <content:encoded><![CDATA[今回はApache Sqoopについて調べてみました。 今回も以下のツールを使って対象プロジェクトを決めました！https://zenn.dev/akasan/articles/7e30ad266c02c4※ 本企画に関する記事の目的は、それぞれのプロジェクトを本格的に深ぼるのではなく、プロジェクト名⇆どんな内容かをパッと思い出せるようにすることを目指します！※ とはいえ深ぼってみたいプロジェクトがあればどんどん複数連載になると思います。 Apache Sqoopとは？Apache Sqoopとは公式ページによると、Apache Sqoop(TM) is a tool d...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[スリーシェイク、NVIDIA Inception に参加]]></title>
            <link>https://sreake.com/blog/nvidia-inception/</link>
            <guid>https://sreake.com/blog/nvidia-inception/</guid>
            <pubDate>Mon, 07 Jul 2025 10:29:15 GMT</pubDate>
            <content:encoded><![CDATA[株式会社スリーシェイク（本社：東京都新宿区、代表取締役社長：吉田 拓真、以下スリーシェイク）は、テクノロジーの進歩によって業界に革命を起こすスタートアップ企業を育成するプログラムであるNVIDIA Inceptionに参加しました。The post スリーシェイク、NVIDIA Inception に参加 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[OpenLLMetryへの入門]]></title>
            <link>https://zenn.dev/akasan/articles/aaf96c46284db0</link>
            <guid>https://zenn.dev/akasan/articles/aaf96c46284db0</guid>
            <pubDate>Sun, 06 Jul 2025 04:14:09 GMT</pubDate>
            <content:encoded><![CDATA[今回はLLMアプリケーションのオブザーバビリティを実現するためのOpenLLMetryについて紹介しようと思います。 OpenLLMetryとは？OpenLLMetryとは、OpenTelemetryをベースに構築されており、LLMアプリケーションに関してオブザーバビリティを提供してくれるツールになります。OpenTelemetryの拡張であることから、既存のアプリケーション監視基盤の形式を踏襲しつつLLMに適したオブザーバビリティを導入することができます。 早速使ってみましょうOpenLLMetryはtraceloopによって展開されており、公式サイトおよびGitHubレポ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[正義のエンジニアという幻想 - 媚びないことと無礼の境界線]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/07/05/132411</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/07/05/132411</guid>
            <pubDate>Sat, 05 Jul 2025 04:24:11 GMT</pubDate>
            <content:encoded><![CDATA[はじめに私はかつて、自分の技術思想とキャリア戦略が100%正しいと信じて疑いませんでした。そして、それを受け入れない企業、同僚たちが100%間違っていると本気で思っていたのです。今思えば、それはソフトウェアエンジニアという職業に就いた多くの若い人が陥る、ある種の思春期的な錯覚だったのかもしれません。技術的な正しさを盾に、社会的な配慮を無視し、人間関係の機微を「非論理的」と切り捨てていました(エンジニアの論理的なんて往々にして論理的ではないのに)。この記事は、かつての私のような「正義のエンジニア」だった自分への懺悔であり、同じ過ちを犯している人たちへの警鐘でもあります。媚びないことと無礼であることの区別もつかないまま、技術的優位性を振りかざしていた—そんな恥ずかしい過去を、今こそ正直に振り返ってみたいと思います。DD(どっちもどっち)論 「解決できない問題」には理由がある (WPB eBooks)作者:橘玲集英社Amazonこのブログが良ければ読者になったり、nwiizoのXやGithubをフォロワーしてくれると嬉しいです。では、早速はじめていきます。技術的正しさという名の傲慢「なぜこんな非効率的な実装をするんですか？」「もっと良い方法があるのに...」「技術的にはこっちの方が正しいんですけどね」そんな恥知らずな言葉を、私は何度口にしたことでしょう。普段は配慮できるつもりでいたのに、技術的な議論になると、つい正論を優先してしまう癖がありました。先輩が現実的な理由を説明してくれているのに、心の中では「でも技術的には間違ってる」と思ってしまう。コードレビューで「ここはこう書いた方が綺麗ですよ」と、相手の状況を考えずにコメントしてしまう。政治的な理由で技術選定が決まれば、会議後に同期に「エンジニアリングの敗北だよね」と吐き捨てる。ビジネス判断を優先する同僚を見ては「技術者として魂を売ってる」と心の中で見下す。「技術的に正しいことを追求するのがエンジニアの仕事」「妥協したらそこで終わり」「コードが全てを物語る」今思い返すと顔から火が出るような発言の数々。技術的な正論を振りかざすことが、エンジニアとしての誠実さだと勘違いしていたのです。技術的に正しいことを言っているのだから、それが最優先されるべき—そう信じていました。でも問題は、私が「技術的正しさ」だけが唯一の評価軸だと思い込んでいたことでした。ビジネス価値、チームの状況、スケジュールの制約—これらも同じくらい重要な要素です。しかし、当時の私にはそのバランス感覚が足りませんでした。コードレビューでは技術的な理想を押し付けがちで、会議では「でも技術的には...」という前置きで反対意見を述べることが多かった。新人が質問してきても、「まずはドキュメント読んでみて」と突き放してしまうことも。今思えば、技術的に正しいことを伝えようとしているつもりで、実際には相手の立場に立てていなかっただけでした。これからの「正義」の話をしよう ──いまを生き延びるための哲学 (ハヤカワ・ノンフィクション文庫)作者:マイケル・サンデル早川書房Amazon最も痛いのは、エンジニアリングの視点でしか物事を見られなかったことです。採用面接の後には必ず「技術力が低い人を採用すべきじゃない」と文句を言い、ビジネス感覚や調整能力の価値なんて考えもしませんでした。技術選定の会議では「Rustを使うべき」「マイクロサービスにすべき」と主張するものの、採用の難しさや運用コストの話が出ると「それは別の問題」と切り捨てる。ビジネスの成長段階や組織の体力を考えない、机上の空論ばかりでした。「もっとモダンな開発環境を」「もっと厳密なレビュープロセスを」と理想論を語りながら、それが非エンジニアとの協業や意思決定スピードにどう影響するかは無視。技術は事業を加速させる手段なのに、私の頭の中では技術それ自体が目的化していたのです。そして同僚が現実的な判断をすると「ビジネスに魂を売った」と心の中で見下す。実際は、私こそが現実を見ていなかったのです。幸い、私の意見が採用されることはほとんどありませんでしたが、今思えばそれで良かったのでしょう。理想のキャリアという妄想私は自分のキャリア構築が完璧だと思い込んでいました。GitHubでOSS活動をし、技術ブログを書き、勉強会で登壇する。これこそが「エンジニア」の歩むべき道だと信じて疑いませんでした。かっこよかったんだと思います。憧れていたんだと思います。社内政治に長けた人を見ては「技術力のない政治屋」と心の中で罵り、クライアントとの関係構築に努める人を「営業エンジニア」と揶揄していました。チームの和を大切にする人なんて「ぬるま湯に浸かっている」としか思えなかったのです。さらに滑稽だったのは、自分の行動が最も正しいと信じていたことです。会社の不満をオープンに書き、技術的な批判を遠慮なく投稿し、「透明性」と「正直さ」を標榜していました。それが「媚びない姿勢」だと勘違いしていたのです。しかし実際には、それは単なる社会性の欠如でした。批判と中傷の違いも、建設的な議論と単なる文句の違いも理解していませんでした。「なぜ私の正論が受け入れられないのか」と憤りながら、自分のコミュニケーション能力の低さには全く気づいていなかったのです。High Conflict よい対立 悪い対立 世界を二極化させないために作者:アマンダ・リプリーディスカヴァー・トゥエンティワンAmazon現実を100%否定する愚かさ最も恥ずかしいのは、自分の理想が受け入れられない現実を「100%間違っている」と断じていたことです。レガシーシステムを見ては「なぜこんなゴミを使い続けるんだ」、古い技術スタックに「この会社に未来はない」、ビジネス優先の判断に「エンジニアリングの敗北」—すべてを否定的に捉えていました。私は自分以外の判断基準を認められませんでした。 技術的に正しくないものは全て間違いで、それを許容する人たちも間違っている。そんな狭い視野でしか物事を見られなかったのです。同期との飲み会では不満ばかりこぼしていました。「うちの会社、まだSVN使ってるんだよ。Git使えないエンジニアの会社とか終わってる」「テストコード書かない文化とか、プロの仕事じゃない」「ウォーターフォールとか、時代遅れもいいところ」プロジェクトで問題が起きれば「マネジメントが技術を理解していないから」、自分の提案が通らなければ「この会社は技術を軽視している」、期待した評価が得られなければ「エンジニアが正当に評価されない組織」—全ての原因を外部に求めていました。自分が提案した新技術が却下されれば「老害が変化を恐れている」と憤り、レガシーコードの改修を任されれば「俺の才能の無駄遣い」と不満を漏らし、ドキュメント作成を頼まれれば「エンジニアの仕事じゃない」と文句を言う。でも振り返ってみれば明らかです。問題は私自身にありました。 技術的な正しさだけを追求し、ビジネス的な制約や組織の事情を理解しようとしなかった。技術力があることと、組織で価値を生み出すことは別物です。そんな視野の狭さが、多くの問題を生み出していたのです。正しいことを言うことと、相手に受け入れられる形で伝えることも別物です。そんな基本的なことすら理解していなかったのです。転機となった出来事幸運なことに、私は比較的早い段階で痛い目に遭い、良いメンターに出会うことができました(というか強い人)。あるコードレビューで、私がいつものように「このコード、正直ひどくないですか？全部書き直した方が早いです」とコメントしたとき、シニアエンジニアが個別に連絡をくれました。「君の指摘は技術的には正しい。でも、そのコメントを見た人がどう感じるか考えたことある？彼は他のタスクも抱えながら、期限に間に合わせようと必死だった。君のコメントは、その努力を全否定している」その言葉にハッとしました。私は技術的な正しさばかりを見て、人の気持ちを踏みにじっていたのです。別の機会には、マネージャーが1on1で厳しい指摘をしました。「君は優秀だ。でも、チームメンバーが君を避け始めている。それでいいの？技術力があっても、一人では何も作れないよ」(とても良いフィードバックをしてくれる良いマネージャーでした)ある技術選定の会議で、私の提案があっさり却下されたこともありました。技術的には明らかに優れていたはずなのに。後で分かったのは、採用された同僚が事前に全ての関係者の不安を聞き出し、丁寧に説明して回っていたということ。私は正しさだけを主張し、人を動かす努力を怠っていたのです。そして最も衝撃的だったのは、年次が上がって後輩ができたときのことです。私の何気ない「それは違うよ」という一言で、新卒エンジニアが完全に萎縮してしまいました。その後、彼は私に質問することを避けるようになり、分からないことを抱え込むように。私は、かつて自分が嫌っていた「怖い先輩」になっていたのです。これらの経験が重なって、ようやく理解しました。技術力は重要だが、それをどう使うかはもっと重要。正しいことを、正しい方法で伝えられなければ、それはただの暴力だということを。「変化を嫌う人」を動かす:魅力的な提案が受け入れられない4つの理由作者:ロレン・ノードグレン,デイヴィッド・ションタル,船木 謙一(監修)草思社Amazon媚びないと無礼の致命的な混同「私は媚びない」—それが私のアイデンティティでした。しかし今思えば、それは単に「無礼で無神経だった」だけです。普段は普通に接することができても、技術的な話題になると途端に配慮が吹き飛んでいました。「このコード、正直レベル低くないですか？」「え、まだjQuery使ってるんですか？今どき？」「Excelで管理とか、エンジニアリング組織として恥ずかしくないんですか」コードレビューでは、つい「このままマージするの、正直抵抗あります」と書いてしまう。会議での議論では他の人の意見を尊重しつつも、心の中では「技術的にナンセンス」と思っていることが顔に出てしまう。ペアプログラミングでは、相手のアプローチを見て「あー、それはちょっと...」と否定的な反応をしてしまう。質問されても「それは基本なので自分で調べた方が身につきますよ」と突き放す。同僚との雑談では「うちの技術レベル、正直物足りない」「もっと技術にこだわる会社に行きたい」などと不満を漏らし、それを「健全な問題意識」だと勘違いしていたのです。媚びないことと、相手を尊重することは両立します。 でも当時の私にはその区別がつきませんでした。率直であることと配慮がないことを混同し、技術的な正しさを盾に、人としての礼儀を忘れていました。最も痛いのは、SNSでの振る舞いです。「エンジニアは技術で語るべき」という信念のもと、技術以外の要素をすべて否定していました。ビジネス的な判断を「技術の敗北」と断じ、人間関係の構築を「非生産的」と切り捨てていました。そんな態度が「カッコいい」「筋が通っている」と本気で思っていたのです。今思えば、ただの社会不適合者でした。頭の悪い反抗期の言い訳私は様々な言い訳を用意していました。「エンジニアは成果で評価されるべきだから人間関係は二の次」「技術的に正しいことが最優先だから言い方なんて些細な問題」「実力があれば多少の態度の悪さは許される」「媚びるくらいなら孤立した方がマシ」これらはすべて、自分の社会性の欠如を正当化するための、頭の悪い言い訳でした。 まるで反抗期の中学生が「大人は汚い」と言い訳するように、私は「技術的正しさ」を盾に、自分の未熟さを隠していたのです。社内の勉強会では「政治的な理由で技術選定するのは技術者への冒涜」「日本の会社はエンジニアを大切にしない」などと大げさな批判を展開し、それを「問題提起」だと思い込んでいました。特に恥ずかしいのは、これらの言い訳を「エンジニアの美学」として語っていたことです。「媚びない技術者の生き方」「技術に嘘をつかない姿勢」「純粋なエンジニアリング」—そんな青臭いタイトルでブログを書き、勉強会で熱弁していました。同じような考えを持つ人たちとエコーチェンバーを形成し、「俺たちだけが本物のエンジニア」「周りは技術を理解していない」「いつか俺たちの時代が来る」—そんな幼稚な選民思想に酔いしれていたのです。でも実際は、技術は手段であって目的ではないという当たり前のことから目を背け、自分の社会性のなさを「美学」で糊塗していただけでした。その結果として何を得たでしょうか。確かに一部の「同志」は得られました。でも多くの機会を失い、多くの人間関係を壊し、多くの成長のチャンスを逃してしまいました。譲れないもののために、譲るものを決めるやがて私は真剣に考えるようになりました。自分が本当に譲れないものは何か？私にとって譲れないのは技術的な誠実さ、つまり嘘はつかない、質の低いコードは書かないということ。そしてユーザーファースト、エンドユーザーの利益を最優先すること。さらに継続的な学習、常に新しいことを学び続けることでした。これ以外は、状況に応じて柔軟に対応することにしました。本質を守るために、形式では妥協する。これが私の新しい戦略でした。表現方法では本音を建前でオブラートに包むようになりました。タイミングも最適な時期を待つように。プロセスでは目的のためなら遠回りも受け入れ、形式的には無駄に見える会議や書類も必要なら対応するようになりました。他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)作者:宇田川元一ニューズピックスAmazon技術は手段、したたかに生きる戦略そしてもう一つ、重要な気づきがありました。技術は手段であって目的ではないということです。私自身、技術的な興味に駆動されています。新しい技術を学ぶことが楽しいし、エレガントなコードを書くことに喜びを感じます。正直に言えば、ビジネス価値なんてどうでもよくて、ただ面白い技術を触っていたいだけなのです。でも、お金をもらって仕事をする以上、建前上それが主目的とは言いづらい。だからこそ「したたかにやろうぜ」という考え方が大切なのです。つまり、組織が求める「成果」という枠組みを利用して、自分の技術的好奇心を満たすということ。表向きは「ビジネス価値の創出」を掲げながら、実際には「面白い技術で遊ぶ」ための正当性を確保する。これは嘘をついているのではなく、異なる価値観を持つ人々が共存するための知恵なのです。例えば、「パフォーマンス改善」という大義名分のもとで、最新のフレームワークを導入する。「開発効率の向上」という建前で、面白そうなツールチェーンを構築する。「技術的負債の解消」という錦の御旗を掲げて、自分が書きたいようにコードを書き直す。重要なのは、これらの建前が単なる口実ではなく、実際に価値を生み出すことです。新技術で遊びながら、本当にちゃんとパフォーマンスを改善する。好きなツールを使いながら、実際に開発効率を上げる。コードを書き直しながら、本当に保守性を向上させる。「プロフェッショナルとして責任を果たします」と胸を張りながら、心の中では「やった！これで堂々とRustが書ける！」と小躍りする。この二重構造こそが、エンジニアとしてのしたたかさです。組織は成果を得て満足し、私たちは技術的満足を得る。Win-Winの関係を作り出すこと。それは決して不誠実ではなく、むしろ異なる価値観を持つ者同士が、お互いの利益を最大化する賢明な戦略なのです。これは「技術への情熱」と「ビジネスへの責任」を両立させる、システムをハックする大人のやり方です。スタッフエンジニア　マネジメントを超えるリーダーシップ作者:Will Larson日経BPAmazonエンジニアとしてたぶん大切なこと今になってようやく分かります。エンジニアとして本当に大切なのは、技術力と人間力のバランス、そして戦略的なしたたかさだということが。技術的に正しいことを、相手が受け入れられる形で伝える。それは媚びることではなく、プロフェッショナルとしての基本的なスキルです。組織の制約を理解しながら、最適な解決策を見つける。それは妥協ではなく、現実的な問題解決能力です。異なる価値観を持つ人たちと協力して価値を生み出す。それは迎合ではなく、チームワークです。自分の意見を持ちながら、相手の意見にも耳を傾ける。それは弱さではなく、成熟した大人の態度です。そして何より、自分の技術的興味を満たしながら、組織の目的も達成する。このしたたかさこそが、長期的に見て最も賢い生き方だと思うのです。具体的に言えば、「セキュリティ強化」という名目で面白いツールを導入し、「運用効率化」という建前で自動化の仕組みを作り、「将来の拡張性」という理由で好きなアーキテクチャを採用する。でも重要なのは、これらが本当に価値を生み出すこと。セキュリティは本当に強化され、運用は本当に効率化され、システムは本当に拡張しやすくなる。つまり、自分の欲望と組織の利益を一致させる技術を身につけるということ。これは詐欺ではなく、むしろ最高のプロフェッショナリズムです。なぜなら、エンジニアが情熱を持って取り組んだ仕事こそが、最高の成果を生み出すからです。また、「媚びない」ことと「無礼」であることは全く違います。 前者は信念を持つことであり、後者は単なる社会性の欠如です。同様に、「したたか」であることと「ずる賢い」ことも違います。前者は双方の利益を最大化する戦略的思考であり、後者は単なる利己主義です。そして「技術への純粋な愛」と「ビジネスへの貢献」は対立するものではなく、うまくブレンドすることで、より強力な推進力になるのです。あと、技術士倫理綱領などを読むのもオススメです。今の私は、技術的な議論をする際も相手への敬意を忘れません。自分の意見を主張する際も、相手の立場を考慮します。SNSでの発言も、建設的で前向きなものを心がけています。そして、自分の技術的興味を追求しながら、それをビジネス価値に変換する方法を常に考えています。これは「売れた」「丸くなった」のではありません。ようやく大人になったのです。そして、本当の意味で強くなったのです。パーティーが終わって、中年が始まる作者:pha幻冬舎Amazonおわりに「お前も結局、体制に飲み込まれたのか」—かつての私なら、今の私をそう批判したでしょう。しかし、それでいいのです。技術的な純粋さを追求することと、社会的な成熟を遂げることは矛盾しません。むしろ、両方を兼ね備えてこそ、プロの仕事と言えるのではないでしょうか。私はもう「正義のエンジニア」ではありません。ただの、少しだけ成長したエンジニアです。技術への情熱は変わりませんが、それを表現する方法は大きく変わりました。そして、その情熱を現実世界で活かす術を身につけました。媚びないことと無礼の区別がつかなかった、頭の悪い反抗期は流石に終わりました。これからは、人としてちゃんとしたのを前提にしたエンジニアを目指します。正しいことを、正しい方法で、正しいタイミングで実現できるエンジニアに。そして、かつての私のような若いエンジニアを見かけたら、優しく、でもはっきりと伝えたいと思います。「君の気持ちはよく分かる。でも、もっといい方法があるよ。一緒にしたたかにやっていこうぜ」と。多分昔の私だったら「は？日和って迎合した負け犬が何言ってんの？」「技術を捨てて政治に走った元エンジニアの戯言でしょ」「そうやって妥協を重ねた結果が今のレガシーシステムなんだよ」とか思って、心の中で見下しながら表面上は「はい、参考にします」って適当に流すんでしょうね。まあ、それでいいんです。私も通った道だから。いつか痛い目に遭って、ようやく気づくでしょう。自分が単なる視野の狭いガキだったってことに。その時になって初めて、この言葉の意味が分かるはずです。けど大人として言う義務があるので言っておきました。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[kustomizeを使ってみた]]></title>
            <link>https://zenn.dev/akasan/articles/7686dd6d542595</link>
            <guid>https://zenn.dev/akasan/articles/7686dd6d542595</guid>
            <pubDate>Sat, 05 Jul 2025 04:23:57 GMT</pubDate>
            <content:encoded><![CDATA[今回はkubernetesの宣言的なマネジメントをできるkustomizeを使ってみました。kubernetesを最近よく使うなかでとても目にするので、今回チュートリアルをやってみました。 kustomizeとは？公式ページによるとKustomize is a standalone tool to customize Kubernetes objects through a kustomization file.ということで、kustomizationファイルを通じてkubernetesオブジェクトをカスタマイズするスタンドアロンツールということです。kubectlの1.1...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[mypyでPythonの型チェックをしてみた]]></title>
            <link>https://zenn.dev/akasan/articles/ae29fc6022402b</link>
            <guid>https://zenn.dev/akasan/articles/ae29fc6022402b</guid>
            <pubDate>Fri, 04 Jul 2025 13:37:08 GMT</pubDate>
            <content:encoded><![CDATA[今回はPythonの型チェックをできるmypyを使ってみたので紹介します。 mypyとは？mypyはPythonの静的型チェックツールになります。Pythonは動的型付言語であり、データ型の厳密なチェックが基本的にされません。実装の難易度を下げて柔軟なコーディングができる反面、データ型の間違いによるエラーが発生するかどうかが実行するまでわからないという弱点があります。mypyを使うことにより、静的型チェックを実施することができるので、データ型の扱い方のミスなどを事前に気づくことができます。https://github.com/python/mypy 使ってみる インストー...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[grypeを使ってdockerイメージの脆弱性診断してみた]]></title>
            <link>https://zenn.dev/akasan/articles/c34a95cf1b8c13</link>
            <guid>https://zenn.dev/akasan/articles/c34a95cf1b8c13</guid>
            <pubDate>Thu, 03 Jul 2025 14:29:55 GMT</pubDate>
            <content:encoded><![CDATA[今回はgrypeを使って、dockerイメージの脆弱性を検知してみました。 grypeとは？公式GitHubによると、A vulnerability scanner for container images and filesystems. Easily install the binary to try it out. Works with Syft, the powerful SBOM (software bill of materials) tool for container images and filesystems.ということで、コンテナイメージとファイルシス...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ローカルエディタからワンクリックでGoogle Cloud Workstationに接続する方法]]></title>
            <link>https://qiita.com/aminevg/items/27f55b1809b6629567f6</link>
            <guid>https://qiita.com/aminevg/items/27f55b1809b6629567f6</guid>
            <pubDate>Wed, 02 Jul 2025 13:43:33 GMT</pubDate>
            <content:encoded><![CDATA[背景皆さんは、Google Cloud Workstationsという製品はご存知ですか？「フルマネージド開発環境」を提供していて、セキュリティの強化や開発者のオンボーディングの加速を期待できる製品です。クラウド上の開発環境ということもあって、ブラウザ内での開...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[openai-agents-pythonを使ってマルチエージェントシステムを作ってみた]]></title>
            <link>https://zenn.dev/akasan/articles/9c36321eefbb1a</link>
            <guid>https://zenn.dev/akasan/articles/9c36321eefbb1a</guid>
            <pubDate>Wed, 02 Jul 2025 13:07:39 GMT</pubDate>
            <content:encoded><![CDATA[今回は、マルチエージェントワークフローを開発するためのライブラリであるopenai-agents-pythondを使ってみたので紹介します。 openai-agents-pythonとは？公式GitHubによると、The OpenAI Agents SDK is a lightweight yet powerful framework for building multi-agent workflows. It is provider-agnostic, supporting the OpenAI Responses and Chat Completions APIs, as ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[kindでローカルでKubernetesを用いてFastAPIサーバを立ち上げる]]></title>
            <link>https://zenn.dev/akasan/articles/1633f745945c56</link>
            <guid>https://zenn.dev/akasan/articles/1633f745945c56</guid>
            <pubDate>Tue, 01 Jul 2025 13:15:57 GMT</pubDate>
            <content:encoded><![CDATA[今回はDockerを利用してローカルでKubernetes環境を構築できるkindを用いて、FastAPIサーバを実装してみました。 kindとは？公式ページによると、kind is a tool for running local Kubernetes clusters using Docker container “nodes”.kind was primarily designed for testing Kubernetes itself, but may be used for local development or CI.ということで、Dockerコンテナを...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[コマンド紹介シリーズ：kdash]]></title>
            <link>https://zenn.dev/akasan/articles/b520532e647f6d</link>
            <guid>https://zenn.dev/akasan/articles/b520532e647f6d</guid>
            <pubDate>Mon, 30 Jun 2025 12:31:31 GMT</pubDate>
            <content:encoded><![CDATA[コマンド紹介シリーズ第11回目は、kdashというコマンドを紹介します。kdashを使うことでターミナル上でKubernetesのダッシュボードを作成できます。なお、第10回は以下になりますので、ぜひご興味があればご覧ください。https://zenn.dev/akasan/articles/841dcbd5c409d5 kdashとは公式GitHubによると、A simple terminal dashboard for Kubernetes built with Rustということで、Rust製ののターミナルで動くKubernetesのダッシュボードということです。...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[「あつまれ Lookerの森 #3」 オンサイト行ってきました記録]]></title>
            <link>https://zenn.dev/nedoko_dok0dko/articles/5da95def70336b</link>
            <guid>https://zenn.dev/nedoko_dok0dko/articles/5da95def70336b</guid>
            <pubDate>Mon, 30 Jun 2025 11:21:02 GMT</pubDate>
            <content:encoded><![CDATA[what6/27に開催された「あつまれ Lookerの森 #3」のオンサイト参加ログです当日の雰囲気や登壇者の方々の発表内容等を簡単にまとめたものになります あつまれ Lookerの森とはJagu'e'rのデータ利活用分科会が主催するLookerにフォーカスを当てた勉強会です※ Jagu'e'r: Google Cloudのユーザー会。Lookerだけでなく様々なGoogle Cloud製品に関したコミュニティやイベントを企画・開催しています今回は3回目ということでしたが、私は初めての参加でした。コミュニティイベントというのも初参加だったため、「どんな雰囲気なのだ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[生成AIで物語を書くためにプロンプトの制約や原則について学ぶ、という話をしてきました #女オタ生成AI部]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2025/06/30/171149</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2025/06/30/171149</guid>
            <pubDate>Mon, 30 Jun 2025 08:11:49 GMT</pubDate>
            <content:encoded><![CDATA[はじめに2025年6月29日、「#女オタ生成AIハッカソン 2025 夏の陣@東京」なる場において、「生成AIで小説を書くためにプロンプトの制約や原則について学ぶ」という題目で登壇させていただく機会を得た。ハヤカワ五味さんからお声がけいただいた時、私の中でエンジニアとしての好奇心が強く刺激された。エンジニアリングの視点から生成AIの本質を解き明かすことで、創作者の皆様に新しい視点を提供できるのではないか。異なる分野の知見を融合させることで、何か面白いことが起きるかもしれない。そんな期待を胸に、私は登壇に臨んだのであった。(これは嘘で前日不安で酒を飲みすぎた⋯。)note.com実は、プログラミングの世界では既に大きな変革が進行している。Tim O'Reillyが最近発表した「The End of Programming as We Know It」という論考が示すように、AIの登場によってプログラマーの役割は根本的に変わりつつある。もはや我々は、コードを一行一行書く職人ではなく、AIという「デジタルワーカー」を指揮するマネージャーへと変貌しているのだ。www.oreilly.comこの変革は、単なる技術的な進化ではない。O'Reillyが指摘するように、プログラミングの歴史は常に「終わり」と「始まり」の連続であった。物理回路の接続から始まり、バイナリコード、アセンブリ言語、高級言語へと進化するたびに、「プログラミングの終わり」が宣言されてきた。しかし実際には、プログラマーの数は減るどころか増え続けてきたのである。そして今、同じ変革の波が創作の世界にも押し寄せようとしている。資料準備を進める中で、ある確信が生まれた。これは創作の新しい扉が開かれる瞬間なのだと。新しい道具が生まれるたびに、それは既存の方法を否定するのではなく、創作の可能性を拡張してきた。筆から万年筆へ、タイプライターからワープロへ。そして今、AIという新しい道具が加わることで、より多くの人が創作に参加できるようになり、これまでとは異なる表現の可能性が開かれようとしている。(その片鱗を見たのはハッカソンでも同じでアイディアが高速に実現される世界で我々は何をアウトプットするかまだわからない。他人にとって価値のあるものをアウトプットしなくてよくて自分の為にアウトプットできるため)syu-m-5151.hatenablog.comこのブログや登壇資料が良ければ読者になったり、nwiizoのXやGithubをフォロワーしてくれると嬉しいです。では、早速はじめていきます。登壇資料普通に業界違いで難産。良い資料になったと思うので興味があれば読んでほしいです。 speakerdeck.com👻女オタ生成AIハッカソン2025夏東京「生成AIで小説を書くためにプロンプトの制約や原則について学ぶ」というタイトルで登壇します。こちら、資料になります。#女オタ生成AI部 #女オタ生成AIハッカソンhttps://t.co/lisoeFt69h— nwiizo (@nwiizo) 2025年6月29日   登壇で伝えたかったこと、伝えきれなかったこと久しぶりにエモい気持ちになったので散文を書くわね〜！登壇当日、会場では思いがけない出会いもあった。以前書いた「20代最後の一週間を生きるエンジニア」のブログ記事について、複数の参加者から「あの記事、良かったです」と声をかけていただいたのだ。嬉しかったです(小並)。syu-m-5151.hatenablog.comプロンプトエンジニアリングは「技芸」である30分という限られた時間で私が最も強調したかったのは、プロンプトエンジニアリングを単なる「知識」としてではなく、「技芸」として捉えることの重要性であった。楽譜を読めても楽器が弾けるわけではないように、プロンプトの書き方を知識として学んでも、実際に良い小説が書けるわけではない。これは自明の理である。実際に手を動かし、失敗し、その失敗から学ぶ。この地道な繰り返しによってのみ、AIとの対話の「呼吸」とでも言うべきものが身につくのである。経済史学者James Bessenが産業革命時代の織物工場を研究して発見したように、新しい技術の導入は単純な置き換えではない。「Learning by doing」、実践を通じた学習こそが、真の生産性向上をもたらすのだ。AIツールを前にした創作者も同じである。マニュアルを読むだけでは不十分で、実際に使い、失敗し、その経験から学ぶことで初めて、新しい創作の技芸が身につく。登壇では、5つの原則やら段階的アプローチやら、CHARACTER.mdによる管理手法やらを体系的に説明した。これらはすべて重要な「型」である。しかしながら、型を知ることと、型を使いこなすことは天と地ほども違うのだ。重要なのは、新しいツールを恐れずに試し続ける姿勢である。「プロンプトエンジニアリング」から「コンテキストエンジニアリング」へ登壇の準備をしていた頃、私は「プロンプトエンジニアリング」という用語に対してある種の違和感を抱いていた。この用語は多くの人にとって「チャットボットに何かを入力すること」という浅い理解に留まってしまうからだ。最近、技術界隈では「コンテキストエンジニアリング」という新しい用語が注目されている。これは「LLMでタスクを解決可能にするためのすべてのコンテキストを提供する技芸」であり、私が登壇で伝えたかった本質により近いものだった。実際、産業レベルのLLMアプリケーションでは、タスクの説明、few-shot examples、RAG（Retrieval-Augmented Generation）、関連データ、ツール、状態、履歴など、膨大な情報を適切に組み合わせる必要がある。これはまさに「コンテキストの設計」に他ならない。www.philschmid.desimonwillison.net小説創作におけるコンテキストの実践私が小説創作でAIを使う際に最も苦労したのは、この「コンテキストの設計」であった。単純に「感動的なシーンを書いて」と指示するだけでは、後述するような「死んだ」文章しか生成されない。しかし、適切なコンテキストを提供することで、AIの出力は劇的に変化するのである。「魔法のような」AI体験は、適切なタスクに適切なコンテキストを提供することで生まれるのだ。創作においても同様で、以下のような要素を組み合わせる必要がある。キャラクターの背景情報：CHARACTER.mdファイルに記録した詳細なプロフィール、過去の経験、価値観、言葉遣いの特徴。これらは、そのキャラクターが「どのような状況でどのような反応を示すか」という行動パターンの基盤となる。現在の状況とその前後関係：単発のシーンではなく、「なぜこの状況に至ったのか」「この後どうなるのか」という流れの中での位置づけ。AIの「Lost in the Middle現象」を考慮すると、この前後関係の提供が特に重要になる。否定的なコンテキスト：「〜のような展開は避けてほしい」「〜という表現は使わないでほしい」という制約を明示することで、AIの出力をより精密にコントロールできる。重要なのは、「必要な時に必要なものだけを渡す」という情報の最適化である。すべての情報を羅列するのではなく、「今このタスクに最も重要な情報は何か」を常に意識する必要がある。コンテキストエンジニアリングの本質この経験を通じて理解したのは、コンテキストエンジニアリングが単なる技術的な手法ではなく、創作者の思考を明確化する営みであるということだった。AIに何を依頼するかを考える過程で、自分の創作意図を明確化し、読者への配慮を具体化し、物語の構造を客観視することになる。これらはすべて、AIを使わない創作においても重要なスキルである。つまり、コンテキストエンジニアリングの習得は、創作者としての総合的な能力向上につながるのである。従来の「プロンプトエンジニアリング」が「AIに何を言うか」に焦点を当てていたのに対し、「コンテキストエンジニアリング」は「AIが最適な判断を下すために、どのような情報環境を構築するか」という視点を提供する。これは、AIを「指示に従う道具」から「情報を基に判断する協働者」へと捉え直すことを意味している。結果として、AIとの協働は単なる「効率化」を超えて、新しい創作の可能性を開拓する営みへと発展するのである。技術の進歩と共に、我々創作者に求められるのは、より深い思考と、より明確な意図、そしてより豊かな想像力なのかもしれない。エンジニアが作った道具を、創作者がいかに手懐けるか生成AIツールの多くは、悲しいかな、エンジニアによって作られている。論理的な命令を期待し、構造化された入力を前提とし、エラーメッセージも技術用語で埋め尽くされている始末である。しかし、実は「お作法」を少し知るだけで、AIツールは格段に使いやすくなる。例えば、「悲しい場面を書いて」と頼むより、「主人公が大切な人を失った直後の場面を書いて。雨が降っている。主人公は泣いていない」と具体的に指示する。これ「明確な指示」の出し方だ。巷でよく聞かれたのは「なぜAIは私の意図を理解してくれないのか」という質問だった。答えは簡単で、AIは文脈を読む能力が人間より劣るからだ。現状だとそういうような機能がないからだ。だからこそ、エンジニアたちが日常的に使っているような「具体的に書く」という習慣が役立つ。「感動的な場面」ではなく「涙を流しながら笑う場面」と書く。さらに「500文字以内で」といった制約を明示したり、「村上春樹のような文体で」と参考例を示したりすることで、AIの出力は見違えるほど良くなる。 speakerdeck.com最初は「なんでこんな面倒くさいことを」と思うと思う。しかし慣れてくると、この「明確な指示」は創作においても有益だと気づいてもらえると思います。何よりも自分が何を書きたいのか、どんな効果を狙っているのかを言語化する訓練になるのだ。このような技能を身につけた創作者は、AIを自在に操れるようになる。エンジニアの作法を知ることは、新しい筆の使い方を覚えることに他ならないのである。小説創作で見えてきたAIの限界と可能性なぜAI生成の小説は「死んでいる」のか登壇準備において、私は実際に様々な小説を生成させてみた。その結果、強烈な違和感に襲われることとなった。文法は完璧、語彙も豊富、構成も整っている。しかしながら、物語として致命的に「死んでいる」のである。この原因を分析してみると、いくつかの根本的な問題が浮かび上がってきた。まず第一に、AIはすべてを同じ重要度で書いてしまうという悪癖がある。人間が文章を書く際には、無意識のうちに情報の重要度を判断し、メリハリをつけるものだ。重要なシーンは詳しく、そうでない部分は簡潔に。これは物語の基本中の基本である。しかるにAIは、すべてを同じトーンで淡々と出力してしまう。キャラクターの初登場シーンも、日常の何気ない描写も、クライマックスの決戦も、すべて同じ密度で書かれてしまうのだ。これでは読者の感情が動くはずもない。悪文の構造　――機能的な文章とは (ちくま学芸文庫)作者:千早耿一郎筑摩書房Amazon続いて、具体的なイメージの欠如という問題がある。AIは統計的に「ありそうな」文章を生成することには長けているが、具体的なイメージを喚起する描写となると、からきし駄目なのである。試しに状況を設定して「感動的な再会シーン」を書かせてみると、返ってくるのは「長い時を経て、二人は再会した。お互いの顔を見つめ、言葉を失った。感動的な瞬間だった」といった具合である。なんたる空虚さであろうか。どこで再会したのか、何年ぶりなのか、どんな表情をしていたのか、まるで分からない。何よりも感動的な再会のシーンに感動的とか言うな。www.uniqlo.comそして最も深刻なのは、感情の流れが不自然極まりないことである。「私は激怒した。でも彼の笑顔を見るとなぜか許してしまった」などという文章を平然と出力してくる。人間の感情がこんなに単純なわけがあろうか。怒りから許しへの変化には、必ず心理的なプロセスというものがある(ないならない理由がある)。葛藤し、ためらい、そして決断に至る。これらの微妙な心の機微を、AIは出力できないのである。しかし、ここで重要な視点の転換が必要だ。これらの問題は、AIの限界というよりも、我々がAIとどう協働するかという課題なのである。AIの特性を理解し、その限界を創造的に活用する創作者は、かつてない表現の可能性を手にすることができる。実践で発見した「創造的な失敗」の価値しかしながら、悪いことばかりではなかった。登壇準備の過程で、実に興味深い発見があったのである。「内向的だが本の話題では饒舌になる図書館司書」というキャラクター設定を与えたところ、AIが「本について語るときだけ関西弁になる」という解釈をしてきたのだ。最初は「なんじゃそりゃ」と思った。私の意図とはまるで違う。しかし、よくよく考えてみると、これはこれで面白いではないか。緊張がほぐれると地が出る、という人間の特性を、思いがけない形で表現している。私の貧相な想像力では到達し得なかった地点である。三体 (ハヤカワ文庫SF)作者:劉 慈欣早川書房Amazonこのように、AIの「誤解」を単純に修正するのではなく、「なぜそう解釈したのか」を深く考察することで、新しい創造の種が見つかることがある。これは、孤独な創作活動では得られない、実に貴重な刺激なのである。ただし、ここにも重要な前提がある。この「創造的な失敗」を活かせるのは、もともと創作の素養がある者だけなのだ。面白さの基準を持たない者には、AIの珍妙な出力はただの失敗作にしか見えない。結局のところ、AIは使い手の創造性を増幅する装置であって、無から有を生み出す魔法の箱ではないのである。AIは、我々に新しい形の「批評性」を要求しているのかもしれない。単にAIの出力を受け入れるのではなく、それを批判的に検討し、創造的に発展させる。そうした対話的な創作プロセスこそが、AI時代の技芸なのである。制約を創造性に変える妙技登壇で最も伝えたかったメッセージの一つが、「制約は創造性の敵ではない」ということであった。LLMには明確な制約がある。長い文脈を保持できない「Lost in the Middle現象」により、物語の中盤の情報を忘れやすい。複数の矛盾する要求を同時に処理することも苦手で、「優しくて厳しい」といった複雑なキャラクターを描くのが困難である。さらに、人格の内的一貫性を理解できないため、キャラクターの行動に矛盾が生じやすいのである。しかしながら、これらの制約を深く理解し、それを前提とした創作システムを構築することで、新しい可能性が開けてくるのだ。例えば、「Lost in the Middle現象」への対処として、章ごとに独立した構造を採用し、各章の冒頭でキャラクターの核となる設定を再確認する。複雑なキャラクターは段階的に構築し、まず単一の特徴から始めて、徐々に矛盾や葛藤を追加していく。一貫性の問題は、CHARACTER.mdのような外部ファイルで設定を管理し、常に参照できるようにする。これらの工夫は、単なる「対症療法」ではない。むしろ、創作プロセスをより意識的で、構造的なものに変える契機となった。俳句が5-7-5という厳格な制約の中で研ぎ澄まされた表現を生み出すように、AIの制約を創造的に活用することができるのである。実際、AIツールを使いこなす創作者たちは、「より野心的になれる」と口を揃える。かつては一人では手に負えなかった規模の物語も、AIとの協働により実現可能になった。制約があるからこそ、その枠内で最大限の創造性を発揮しようとする。これこそが、新しい時代の創作の醍醐味なのかもしれない。同じ問題、異なる現れ方個人のブログで感じる違和感実のところ、私が最初に生成AIの違和感を感じたのは、小説ではなく技術ブログであった。最近、個人の技術ブログを読んでいると、明らかに生成AIで書かれたと思しき記事に出会うことが増えた。書籍レベルではまだそういった文章に遭遇していないが、個人のブログでは実に顕著である。その特徴たるや、過度に丁寧で教科書的な説明、「〜することができます」「〜となっています」といった定型句の連発、具体的な経験談の欠如、そしてどこかで読んだような一般論の羅列である。構造レベルでは正しく整理されているのだが、内容レベルで「生成AIっぽさ」が滲み出てしまうのである。github.comこれは生成AI自体が悪いのではない。むしろ、AIに丸投げして終わらせてしまう姿勢こそが問題なのだ。AIが生成した「薄い」文章で満足してしまうのか、それとも、そこから一歩踏み込んで、自分の経験と思考を注ぎ込むのか。その選択が、新しい時代の創作者を分けるのかもしれない。nomolk.hatenablog.comなぜ技術ブログでもAIは「薄い」のか技術ブログで価値があるのは、実際に手を動かした者にしか書けない内容である。「公式ドキュメント通りにやったのに動かなくて、3時間悩んだ末に環境変数の設定ミスだと気づいた」という失敗談。「このライブラリ、最初は使いにくいと思ったけど、慣れると手放せなくなった」という使用感の変化。「本番環境でこの実装をしたら、予想外の負荷がかかって大変なことになった」という痛い経験。これらはすべて「失敗」や「試行錯誤」の生々しい記録である。AIには、こうした血の通った経験がない。本当に情報を適当に収集してきてそれをもとに記事を書く。ゆえに、どんなに正確そうな情報を出力しても、薄っぺらく感じるのである。興味深いことに、小説創作で発見した問題点（強弱の欠如、具体性の不在、経験の欠落）は、技術ブログでもまったく同じように現れる。ジャンルは違えども、「読者に価値を提供する」という本質は同じなのだから、当然といえば当然である。しかし希望もある。実際、技術ブログプラットフォームのZennもガイドラインで「生成AIを活用して執筆することは禁止していません。著者の皆さまには、より質の高い記事を執筆するために生成AIを活用してほしい」と明言している。重要なのは、AIを「下書きツール」として活用し、そこに自分の経験をちゃんと肉付けしていくことなのだ。そうした使い方をしている技術者も増えてきた。AIが骨組みを作り、人間が血肉を与える。この協働こそが、新しい時代の文章作成スタイルなのである。プラットフォーム側も理解しているように、問題はAIを使うことではなく、AIに丸投げして雑魚いコンテンツを乱造することなのだ。人間とAIの新しい関係AIは新しい筆であり、書き手は人間登壇の締めくくりで私が強調したのは、AIは新しい種類の筆に過ぎないということであった。いかに優れた筆があろうとも、それだけでは良い作品は生まれないのである。ここで残酷な真実を述べねばならない。生成AIを使っても、面白くない人間は面白い文章を出せないのだ。面白くない人間が何人集まっても面白い物語は生まれない。たまたま面白いものが出ることはあるかもしれないが、それは偶然の産物に過ぎない。なぜなら、AIに何を指示するか、出力されたものから何を選ぶか、それをどう磨き上げるか、すべては使い手の感性と経験に依存するからである。優れた筆を持っても書道の心得がなければ美しい文字は書けないように、AIという高性能な筆を持っても、創作の素養がなければ読者の心を動かす文章は生まれないのである。syu-m-5151.hatenablog.comAIが得意とするのは、大量の選択肢を高速で生成すること、文法的に正しい文章を作ること、構造化された情報を整理すること、そして疲れを知らずに作業を継続することである。まことに便利な道具ではあるが、所詮は道具に過ぎない。一方、人間にしかできないのは、経験に基づいた判断を下すこと、読者との感情的な共感を創出すること、文脈を超えた創造的な飛躍をすること、そして何より「なぜ書くのか」という意味を付与することである。これらは、どんなに技術が進歩しようとも、人間の領分として残り続けるであろう。興味深いことに、現代のテック企業では、プログラマーはすでに「デジタルワーカーのマネージャー」として機能している。検索エンジンやSNSで実際の作業をしているのは、アルゴリズムやプログラムなのだ。同様に、AI時代の創作者も、AIという「デジタル創作者」のマネージャーとなる。単に命令を下すのではなく、創造的な方向性を示し、品質を管理し、最終的な責任を負う。これは、創作者の役割の終わりではなく、新たな始まりなのである。この役割分担を深く理解し、適切に協働することで、一人では到達し得ない創作の境地に踏み込むことができるのである。技芸として身につけるということ生成AIを使った創作は、まさに新しい楽器を習得するようなものである。最初はぎこちなく、思い通りの音が出ない。しかしながら、練習を重ねることで、少しずつ自分の表現ができるようになっていく。重要なのは、AIを魔法の道具だと勘違いしないことである。制約を理解し、その制約の中で最大限の表現を追求する。失敗を恐れず、むしろ失敗から学ぶ。自分の経験と感性を注ぎ込んで、生きた文章に変える。これこそが、私が登壇で伝えたかった「技芸としてのプロンプトエンジニアリング」の真髄なのである。おわりに30分という限られた時間では、技術的な手法の説明に多くの時間を割くことになった。しかしながら、本当に伝えたかったのは、その向こう側にある創作の喜びである。今の生成AIは確かに多くの制約を持っている。しかし、その制約を理解し、創造的に活用することで、新しい物語の形が生まれる。エンジニアが作った道具を、その利便性や限界を理解した上で創作者が使いこなす。その過程で生まれる予想外の発見や、創造的な喜びを目の当たりにできたことは、私にとって大きな収穫であった。何よりも、かつて自分がものづくりをしていた時の感動を思い出させてくれた。今回のハッカソンは、まさにその理想が体現された場だった。「有意義な集まりを開くために最も必要なのは、目的の設定である」という言葉があるが、ここに集まったのはアウトプットへの強烈な渇望を持つオタクたちであり、わずか数時間で次々と作品を生み出していく光景は圧巻であった。参加者たちは、生成AIという新しい道具を前に、恐れることなく手を動かし続けた。「とりあえず試してみよう」「これ面白いかも」「失敗したけど、この部分は使える」——そんな言葉が飛び交う会場は、就活のためでも履歴書に書くためでもなく、創作への純粋な情熱で満ちていた。最高の集い方――記憶に残る体験をデザインする作者:プリヤ・パーカープレジデント社Amazonこれこそがハッカソンという形式の真価である。完成度よりも実験精神を、批評よりも創造を優先する。参加者全員が「作り手」として対等に立ち、失敗を笑い合い、成功を称え合う。そうした瞬間の積み重ねが、新しい創作共同体を形成していくのだ。考えてみれば、オタクとは本来、アウトプットへの衝動を抑えきれない人々のことではなかったか。好きなものについて語り、二次創作し、同人誌を作り、コミケで頒布する。その根底にあるのは「作らずにはいられない」という純粋な欲求である。生成AIは、その欲求を解放する新たな回路となりつつある。技術的なハードルが下がることで、より多くの人が「作り手」として参加できるようになったのだ。思えば、文化や共同体というものは、常に変化し続けるものである。かつて「オタク」と呼ばれた共同体が変質し、消滅したとしても、創作への情熱は形を変えて受け継がれていく。2006年にロフトプラスワンで「オタク・イズ・デッド」が宣言されてから約20年、我々は新しい創作の時代を迎えているのかもしれない(その後の展開もあるが)。誌 「オタク イズ デッド」 岡田斗司夫GENERICAmazonwww.youtube.com経済史学者James Bessenの研究によれば、産業革命時代の織物工場でも同様の現象が起きていた。熟練職人が機械に置き換えられたとき、実は新しい種類の熟練労働者が生まれていたのだ。重要なのは「Learning by doing」、実践を通じて新しい技術を身につけることであった。技術革新と不平等の1000年史　上作者:ダロン アセモグル,サイモン ジョンソン早川書房Amazon技術革新と不平等の1000年史　下作者:ダロン アセモグル,サイモン ジョンソン早川書房Amazonこの洞察は、生成AIと創作の関係にも当てはまる。AIは我々の仕事を奪うのではなく、より高次の創造性に集中できるようにしてくれる。プログラマーがAIと協働して新しいソフトウェアを生み出すように、創作者もAIと協働して新しい物語を紡ぐ。どちらも「新しい筆」を手にした人間が、より野心的なプロジェクトに挑戦できるようになったということなのだ。歴史が示すように、新しい技術が創作を容易にするとき、需要の増加はしばしば雇用の増加につながる。より多くの人が物語を読み、より多くの人が物語を書く。AIは創作者を置き換えるのではなく、創作の可能性を無限に広げてくれるのである。この記事や発表が、生成AIと創作の間で試行錯誤している方々の一助となれば幸いである。小説でも、技術ブログでも、大切なのは「読者に何を伝えたいか」という根本的な問いである。AIはその表現を助けてくれる道具に過ぎない。また、制約は創造性の敵ではない。むしろ、制約を深く理解し、それと対話することで、新しい表現の地平が開けるのである。そして何より重要なのは、新しいツールを恐れずに使い続けることだ。「Learning by doing」の精神で、失敗を恐れずに実践を重ねる者こそが、この新しい時代の創作者となるのである。そして最後に、どうしても伝えておきたいことがある。再三いうがAIという最高級の筆を手にしても、書き手に伝えたいことがなければ、読者の心に響く文章は生まれない。技術の進歩は創作を爆発させるが、同時に「なぜ書くのか」「何を伝えたいのか」という根本的な問いをより鮮明に浮かび上がらせる。生成AIは、面白くない人間を面白くはしてくれない。それは、我々自身が面白くなる努力から逃れる言い訳にはならないのである。本記事は、2025年6月29日の「#女オタ生成AIハッカソン 2025 夏の陣@東京」での登壇内容を踏まえ、イベントでの発見や登壇では話せなかった内容を中心に書き下ろしたものです。登壇準備の過程で作成したai-story-forgeというプロジェクトも公開しています。実際のプロンプトテンプレートやワークフローの実装例として、参考にしていただければ幸いです。ご意見・ご感想は @nwiizoまでお寄せください。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gemini Code Assist for GitHubでPrisma ORMのデータモデリングをレビューする]]></title>
            <link>https://sreake.com/blog/gemini-code-assist-prisma-review/</link>
            <guid>https://sreake.com/blog/gemini-code-assist-prisma-review/</guid>
            <pubDate>Mon, 30 Jun 2025 06:59:22 GMT</pubDate>
            <content:encoded><![CDATA[一般的にデータベースの変更はアプリケーションの変更に比べると影響が大きく、慎重な対応が求められます。またcreatedAtのデフォルト値など、実行タイミングにより値が変動する設定をし忘れた場合、元の値を復元することは困難 […]The post Gemini Code Assist for GitHubでPrisma ORMのデータモデリングをレビューする first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
    </channel>
</rss>