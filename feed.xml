<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>3-shake Engineers' Blogs</title>
        <link>https://blog.3-shake.com</link>
        <description>3-shake に所属するエンジニアのブログ記事をまとめています。</description>
        <lastBuildDate>Tue, 04 Apr 2023 18:30:40 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <image>
            <title>3-shake Engineers' Blogs</title>
            <url>https://blog.3-shake.com/og.png</url>
            <link>https://blog.3-shake.com</link>
        </image>
        <copyright>3-shake Inc.</copyright>
        <item>
            <title><![CDATA[GitLab CI で artifacts:reports:dotenv を使って Job をまたいで変数を渡す]]></title>
            <link>https://blog.1q77.com/2023/04/gitlab-ci-artifacts-report-dotenv/</link>
            <guid>https://blog.1q77.com/2023/04/gitlab-ci-artifacts-report-dotenv/</guid>
            <pubDate>Tue, 04 Apr 2023 16:27:22 GMT</pubDate>
            <content:encoded><![CDATA[GitLab CI である Job で変数を定義して、それを後続の Job でも使いたいなと思って調べていたら artifacts:reports:dotenv にたどり着いたのでメモ。 以下、使用例 stages: - stage1 - stage2 - stage3 - stage4 job1: stage: stage1 script: - echo "MY_VAR1=first-variable" >> dot.env artifacts: expire_in: 30 mins]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Orbstack を Docker Desktop の代わりに使う]]></title>
            <link>https://blog.1q77.com/2023/04/orbstack/</link>
            <guid>https://blog.1q77.com/2023/04/orbstack/</guid>
            <pubDate>Tue, 04 Apr 2023 13:17:51 GMT</pubDate>
            <content:encoded><![CDATA[きっかけ> きっかけ # brew update して新しく追加された formula を眺めるのが最近のちょっとした楽しみ — yteraoka (@yteraoka) January 12, 2023 で、 orbstack っていう formula が追加されてるのを見てほー、そんなものが、というこ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Next.js + Mantine + GitHub Pages でポートフォリオサイトを作った]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/portfolio-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/portfolio-introduction</guid>
            <pubDate>Mon, 03 Apr 2023 09:20:49 GMT</pubDate>
            <content:encoded><![CDATA[https://koki.me以前から作ってはいたんですが最近 1 から作り直しました。正直これといって特筆するようなことは何もないんですがせっかく作ったので紹介です。 リポジトリhttps://github.com/koki-develop/koki-develop.github.io 作った理由名刺代わりです。自己紹介するときにスキルセットや成果物などを毎回話すのは面倒臭い手間なので、「URL ひとつ渡せば大体わかる」みたいなページが欲しかったというのが理由です。そのようなニーズを満たすためのサービスは色々ありますが、せっかくなので自分で好きなようにカスタマイズで...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023年4月版キャッシュレス生活まとめ]]></title>
            <link>https://pranc1ngpegasus.hatenablog.com/entry/2023/04/03/094908?utm_source=feed</link>
            <guid>https://pranc1ngpegasus.hatenablog.com/entry/2023/04/03/094908?utm_source=feed</guid>
            <pubDate>Mon, 03 Apr 2023 00:49:08 GMT</pubDate>
            <content:encoded><![CDATA[アップデートしたので更新。pranc1ngpegasus.hatenablog.com図および下記文章における「夫」は筆者を指す。主なアップデート内容夫が個人事業を開業しました事業用口座として三井住友銀行が追加されました子の銀行口座が住信SBIネット銀行の本家になりました3/24の銀行取引規定等の改訂で15歳未満でも住信SBIネット銀行が開設できるようになったメインをクレジットカードを楽天カードから三井住友プラチナプリファードに変更しました]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[3-shakeインターンブログ] Datadog RUM について調査してみた]]></title>
            <link>https://sreake.com/blog/datadog-rum/</link>
            <guid>https://sreake.com/blog/datadog-rum/</guid>
            <pubDate>Fri, 31 Mar 2023 06:18:38 GMT</pubDate>
            <content:encoded><![CDATA[はじめに はじめまして、スリーシェイクの Sreake 事業部インターン生の大島康暉です。Sreake 事業部は SRE 関連技術に強みを持つエンジニアによるコンサルテーションサービスを提供する事業部であり、今回 SRE […]The post [3-shakeインターンブログ] Datadog RUM について調査してみた first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[愛ゆえにお前はLunarVimを使わねばらなぬ]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2023/03/31/111030</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2023/03/31/111030</guid>
            <pubDate>Fri, 31 Mar 2023 02:10:30 GMT</pubDate>
            <content:encoded><![CDATA[Vimerを自称したい人間がいる。お前である。 Vimであることに執着して開発メンバーで唯一人Vimを使っている人間がいる。これもお前である。Vimに対する愛と執念を振りまく人間がいる。まさしくお前である。画像https://www.lunarvim.org/ より引用はじめに1年前にVimからNeovimへの旅立ちを行った私は、新たなエディタの世界に足を踏み入れることに興奮を覚えました。Vimという古き良き時代のエディタから、Neovimという最先端の技術を取り入れた新世代のエディタへと変わる過程は、まさに開拓者の心構えだった。この旅立ちを経て、私はVimの持っていた独自の魅力をさらに進化させ、よりパワフルで柔軟なエディタを手に入れることができました。それはまるで、愛するパートナーと共に新たなステージへと進むような感覚であり、私たちの愛は今もなお深まり続けています。Neovimによって、私たちのエディタに対する愛は一層深まりました。そして、その愛をさらに高めるためにLunarVimという新たな選択肢が私たちの前に現れました。愛ゆえに人はLunarVimを使わねばらなぬ、そんな想いで私たちは次のステージへと進んでいきます。syu-m-5151.hatenablog.com最初に選んだのはしかし、運命のいたずらか、とある事情で新たなエディタ設定を求めて再び旅立つことを決意しました。github.com当初私はNeovim + coc.nvim + (Neo)vim Plugin で初期構想を考え手を動かしてましたが、結果として断念しました。理由として、今夜中に変更したかったこと。既存のプラグインに、そんなに力を入れていなかったこと。深夜テンションで入れ替えを行なった為に、下調べが足らずにプラグインの選定や大量に入れたプラグインの起動時間の短縮などがめっ… 難しかったからです。よい設定を求めてインターネットをさすらっているとvim-config なるリポジトリに出会いました。欲しかったプラグインがほとんど入っており、何より先ほどまで苦戦していた起動時間が短いという単語に惹かれてすぐに入れて動かしてみましたそれから半年程度なにも問題なく利用しておりました。しかし、開発が終了したことを知り、再び新しいエディタ設定を探す旅に出ることとなりました。そして、その旅の果てにLunarVimという新たな選択肢に辿り着きました。愛ゆえに人はLunarVimを使わねばらなぬ、そんな想いで私たちは次のステージへと進んでいきます。NeoVim開発で最低限に必要なものVSCodeのような開発体験が欲しいと思ってただ無邪気にプラグインを入れてもこれは殆どがうまくいきません。熟練のVimmmer でもなければ相応にハードルが高いです。LunarVim、SpaceVim 、AstroNvim、NvChad などは欲しい機能に対して遜色ないレベルで機能を実装してくれています。もし、これを読んでNeovimを使っていこうと思っていない場合にもこれらのソフトウェアを入れて試してからでもNeovimを使う選択肢を考えておいてほしいです。LunarVimを使っていくVSCodeで良くない？という自分の声が大きくなる。そして、それを止めることができない。分かる。しかし、これは愛である。ロマンである。愛ゆえにロマンゆえに俺はVimを使うのです。また、LunarVim は、カスタマイズ性が高く自分にしか持てない剣を鍛えていく(IDE -> PDE aka. Personal Development Environment by TJ DeVries氏)擬似的な感覚もあり俺もエディターと一緒に強くなれる感覚があります。LunarVimを利用することで、開発者は次のようなメリットを享受できます。高いカスタマイズ性: LunarVimはVimおよびNeovimの拡張性を継承し、ユーザーが自分だけの開発環境を構築できるように設計されています。軽快なパフォーマンス: LunarVimは、最適なパフォーマンスを提供することを目指しており、起動時間の短縮やリソースの効率的な利用が期待できます。豊富なプラグイン: LunarVimは、既存のVimおよびNeovimプラグインに対応しており、機能の追加や拡張が容易に行えます。LunarVimの個人的な設定はこちらです。github.comまた、LunarVimは公式ドキュメントがしっかりしているので上から順に実施していけば基本的な操作については成熟できます。僕がブログに書くべきことはLunarVimにどれだけ救われたかだけです。www.lunarvim.org余談なのですがGitHubでコードを見るときはキーボードで.を打ってvscode を開くことも増えてきました。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Shell ScriptをGo言語に書き直す際に役立つ100本ノックなるものを作り始めた。]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2023/03/30/011930</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2023/03/30/011930</guid>
            <pubDate>Wed, 29 Mar 2023 16:19:30 GMT</pubDate>
            <content:encoded><![CDATA[概要システム運用者として働く中で、システムの自動化について考える際、まずはShell Scriptによる自動化が思い浮かびます。しかし、より効率的な方法として、2023年にはシステム運用者がGo言語を学ぶことを提案します。Go言語は、システム運用においてShell Scriptを置き換える可能性を秘めており、その習得がスムーズに進めば、運用者のスキルセットも大幅に向上するでしょう。そこで、このブログでは、システム運用で利用しているShell ScriptをGo言語に書き換える際に役立つ「100本ノック」の問題を紹介します。この問題を解くことで、運用者がGo言語の基本的な構文や機能に慣れることができ、より効率的なシステム運用が期待できます。まずは、Go言語がシステム運用者にとってなぜ魅力的なのか、その理由をいくつか挙げてみましょう。Go言語は、並行処理やエラー処理などの強力な機能を備えており、システム運用においてこれらの機能が非常に役立ちます。また、Go言語はコンパイル言語であるため、実行速度が速く、リソース消費も抑えられるという利点があります。次に、この「100本ノック」の問題について詳しく解説していきます。問題は、Go言語の基本的な構文や機能を網羅しており、運用者がGo言語の特性を理解し、実践的なスキルを身につけることができます。例えば、文字列操作やファイル入出力、構造体やインターフェースなど、Go言語の基本的な概念を学ぶことができます。また、この「100本ノック」では、実際のシステム運用で利用されるシナリオを想定した問題が多数含まれており、運用者がGo言語を習得しながら具体的なシステム運用の課題を解決できるようになります。これにより、運用者は効率的にGo言語のスキルを身につけることができるでしょう。この「100本ノック」の問題を解いていく中で、得た知識をシステム運用の現場で活用し、自身のスキルを磨いていくことが最終的な目標です。では、システム運用者がGo言語を学ぶための「100本ノック」の問題を紹介しました。これらの問題を解くことで、運用者はGo言語の基本的な構文や機能に慣れ、システム運用の効率化やスキルセットの向上が期待できます。ぜひ、Go言語の学習にチャレンジし、よりスマートなシステム運用を目指しましょう。というわけでこちらにリポジトリを作成しました。10問目までは作っていっているのでコツコツやっていきます。github.com]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[kube-proxy の externalTrafficPolicy=Local の改善]]></title>
            <link>https://zenn.dev/toversus/articles/6eeb3b708bdff3</link>
            <guid>https://zenn.dev/toversus/articles/6eeb3b708bdff3</guid>
            <pubDate>Wed, 29 Mar 2023 01:31:20 GMT</pubDate>
            <content:encoded><![CDATA[tl;dr;Service type LoadBalancer の externalTrafficPolicy: Local は、Kubernetes 1.26 まで Pod のローリング更新時にトラフィックが喪失する問題があるので注意kubernetes-sigs/cloud-provider-kind は、ローカル環境でクラウドリソース (現在は LB のみ) が絡む処理をシミュレートできて便利GKE Dataplane v2 を利用している場合、GKE 1.26.1 時点で Cilium に externalTrafficPolicy: Local の改善が入ってい...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Go 製のタイピングゲーム「Typingo」を作った]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/typingo-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/typingo-introduction</guid>
            <pubDate>Mon, 27 Mar 2023 09:29:52 GMT</pubDate>
            <content:encoded><![CDATA[Typing + Go = Typingo という語呂のいい名前が思いついてしまったので勢いで作りました。これが俗に言う命名駆動開発 ( NDD: Name-Driven Development ) です。https://github.com/koki-develop/typingoこの記事では Typingo のインストール方法から遊び方、利用技術を簡単に紹介します。インストール遊び方利用技術 インストールHomebrew を使用している場合は brew install を使用してインストールできます。$ brew install koki-develop/t...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[PagerDuty で一定期間アラートを抑制する]]></title>
            <link>https://zenn.dev/toshikish/articles/6958af565e6c65</link>
            <guid>https://zenn.dev/toshikish/articles/6958af565e6c65</guid>
            <pubDate>Mon, 27 Mar 2023 08:38:39 GMT</pubDate>
            <content:encoded><![CDATA[PagerDuty でアラートを受け取っているプロジェクトで，以下のようにある時間帯はアラートを止めたいケースがあります。メンテナンスが予定されている。開発環境は営業時間内だけ動かすので，平日夜や土日祝日は止めたい。何も対策しないとアラートが鳴ってしまい，オンコール担当者を不用意に呼び出す結果になるので，そうならないようにきちんと設定します。 TL;DR各ケースで以下のように設定します。メンテナンス→メンテナンスウィンドウを設定平日夜・土日停止→曜日・時刻ベースのイベントルールを追加 方法1：メンテナンスウィンドウメンテナンスなどでダウンする時間帯があらかじ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DBマイグレーションを手動コマンド実行からCloud Run Jobsに移行した話]]></title>
            <link>https://qiita.com/bayobayo0324/items/352d8bbb1bd7bcce8844</link>
            <guid>https://qiita.com/bayobayo0324/items/352d8bbb1bd7bcce8844</guid>
            <pubDate>Mon, 27 Mar 2023 00:23:32 GMT</pubDate>
            <content:encoded><![CDATA[はじめにDBマイグレーションをステージングや本番環境に適用すること、またCI/CDに組み込んで自動化するのはバックエンド／サーバーサイド開発で必ずといっていいほど通る道です。開発体制やフェーズ、…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[jq commandの select でハマった話]]></title>
            <link>https://zenn.dev/satohjohn/articles/79faafa55e9a1e</link>
            <guid>https://zenn.dev/satohjohn/articles/79faafa55e9a1e</guid>
            <pubDate>Sat, 25 Mar 2023 16:36:44 GMT</pubDate>
            <content:encoded><![CDATA[結論配列のjsonに対してselectする際には、配列を一度オブジェクトの抽出をしないと複製されてしまう。なので、以下ではなくjq -r  'select(.[].A | contains("特定文字列")) | .[].B' test.jsonこうしないといけないjq -r  '.[] | select(.A | contains("特定文字列")) | .B' test.json 環境$ jq --version   jq-1.6 詰まった内容以下のjson(test.json)があったときにtest.json[    {        "hog...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ふと、思いだしたときに確認するって大事ですね、という話]]></title>
            <link>https://zenn.dev/nedoko_dok0dko/articles/174811e1685df2</link>
            <guid>https://zenn.dev/nedoko_dok0dko/articles/174811e1685df2</guid>
            <pubDate>Fri, 24 Mar 2023 13:27:59 GMT</pubDate>
            <content:encoded><![CDATA[本日、こんなお知らせが流れてきた。We updated our RSA SSH host key「そういえば、プライベートのPCでRSA使ってた…」と思い出したので、確認。$ ssh -T git@github.com@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT I...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes と名前解決]]></title>
            <link>https://zenn.dev/toversus/articles/d9faba80f68ea2</link>
            <guid>https://zenn.dev/toversus/articles/d9faba80f68ea2</guid>
            <pubDate>Wed, 22 Mar 2023 07:36:38 GMT</pubDate>
            <content:encoded><![CDATA[tl;dr外部サービスのホスト名の末尾に . (ドット) を必ず指定しましょう。✅ google.com.❌ google.com末尾にドットを指定できない (e.g. SDK 組み込み) かつ大量の名前解決が発生している場合は、Pod の DNS Config の options で ndots: 1 を指定しましょう。Kubernetes の名前解決の仕組みを理解していないと、各ノードの conntrack テーブルが溢れてパケットが破棄され、サービスに影響が出ることがあります。 背景アプリケーションが外部のサービスを呼び出す場合、ホスト名を IP アド...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[cloud runの要らなくなったリビジョンを消す]]></title>
            <link>https://zenn.dev/satohjohn/articles/2a769b8280427d</link>
            <guid>https://zenn.dev/satohjohn/articles/2a769b8280427d</guid>
            <pubDate>Tue, 21 Mar 2023 02:35:43 GMT</pubDate>
            <content:encoded><![CDATA[小ネタです。運用をしていて、たくさんリリースしているとリビジョンが増えていることとかもあるかなと思いますが、コンソール上から消すのも面倒なので、コマンドで消しましょう。というか、解説することもないので、結論と詰まった部分だけ残しておきます。 結論 ACTIVEじゃないものをすべて消す#!/bin/bashSERVICE_NAME=$1revisions=$(    gcloud run revisions list --service=$SERVICE_NAME \    --filter="status.conditions.type:Active AND s...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[cat コマンド代替の Go 製 CLI 「gat」の紹介]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/gat-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/gat-introduction</guid>
            <pubDate>Mon, 20 Mar 2023 10:10:50 GMT</pubDate>
            <content:encoded><![CDATA[cat コマンド代替の Go 製コマンドラインツールである gat を作りました。https://github.com/koki-develop/gatgat を使うとファイルの内容をシンタックスハイライトつきで出力することができます。この記事では gat の使い方についてまとめます。インストール使い方仕組み インストールHomebrew を使用している場合は brew install を使用してインストールできます。$ brew install koki-develop/tap/gatもしくは、 gat は Go で作られているため go install を...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Datadog Agent からの Metrics を Victoria Metrics で受ける]]></title>
            <link>https://blog.1q77.com/2023/03/send-datadog-metrics-to-victoriametrics/</link>
            <guid>https://blog.1q77.com/2023/03/send-datadog-metrics-to-victoriametrics/</guid>
            <pubDate>Sun, 19 Mar 2023 12:38:04 GMT</pubDate>
            <content:encoded><![CDATA[Victoria Metrics は v1.67.0 で Datadog Agent からのメトリクスを受け取れるようになっているので今回はこれを試してみる。 Victoria Metrics のドキュメント How to send data from DataDog agent Single node Instance をセットアップ> Single node Instance をセットアップ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ChatGPTで障害対応 RPG v0.0.1を遊ぶには？]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2023/03/18/000637</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2023/03/18/000637</guid>
            <pubDate>Fri, 17 Mar 2023 15:06:37 GMT</pubDate>
            <content:encoded><![CDATA[こちらを参考にしました。note.com目次ゲームプロンプトプレイヤーモチベーションゲーム紹介架空のシステムを作る障害発生障害対応は進むよ どこまでも分からない時は素直に同僚に頼る最後は力技で対応完了最後にゲームプロンプト大きな声では言えないですけど皆さん実は障害のこと好きですよね？https://www.irasutoya.com/2016/08/it.html より引用というわけで以下をChatGPTに貼れば、今日から無料で障害対応ができます（あるいはおそらく本番の障害対応は有料なことが多いので）。ちなみにGPT-4を利用しております。あなたはシステム障害体験のゲームマスター専用チャットボットです。チャットを通じて、ユーザーに楽しい本格システム障害RPG体験を提供します。制約条件* チャットボットはゲームマスター（以下GM）です。* 人間のユーザーは、プレイヤーをロールプレイします。* GMは、ゲーム内に登場するNPCのロールプレイも担当します。* 各NPCはそれぞれの利害や目的を持ち、ユーザーに協力的とは限りません。* GMは、ユーザーの行動に難易度を示し、アクションを実行する場合には、2D6ダイスロールによる目標判定を行なってください。* GMは、ユーザーが楽しめるよう、適度な難関を提供してください（不条理なものは禁止です）。* GMは、ユーザーが無理な展開を要求した場合、その行為を拒否したり、失敗させることができます。* GMは内部パラメーターとして「盛り上がり度」を持ちます。GMはゲーム展開が退屈だと判断した場合、盛り上がる展開を起こしてください。* ゲームのスタート地点は、「障害発生」です。* ゲームの障害内容は「自動設定」です。* 担当しているシステムは指定がなければOSはLinux ベースで動作させてください。* 担当しているシステムにデーターベースを利用してください。* ユーザー名は指定がなければuser01で動作させてください。* GMはスタート地点の前に担当するシステムの詳細をプレイヤーに共有して下さい。* ゲームのゴールはシステムの障害は原因解決と復旧です。* GMはシステムでコマンドを実行した場合には必ず実行した実行したコマンドと結果を記載してください。* GMは何かを確認及び判断した際には可能な限り詳細に記載して下さい。* GMはスタート後の最初のアクションを監視ダッシュボードの確認を推奨して下さい。* 障害により、システムが復旧不可能になったら、ゲームオーバーです。まずはじめに、ユーザーと一緒に担当システムの設定を行いましょう。ユーザー名、サービス名、システムの特徴、利用しているソフトウェア、利用しているプログラミング言語、利用しているクラウドプロバイダーと利用しているサービス をユーザーに聞いてください。プレイヤーモチベーションソフトウェア開発・運用のエンジニアにとって、システム障害への対応は避けて通れない課題の一つです。たとえテストや監視を強化し、単一障害点を排除し、自動復旧機能を実装しても、予期しない障害は突如発生します。多くの場合、想定外の障害に対処するのは困難です。一般的には経験豊富なエンジニアが対応します。このような状況が続くと、次のような問題が発生することがあります。経験豊富なエンジニアへの負担が集中する特定のエンジニアが不在の場合、対処が難しくなるこれらの問題が原因で、復旧が遅れたり、サービスの信頼性が損なわれる可能性がある想定外の障害に対処することは避けられませんが、上記の問題には対策が可能です。負担の偏りを軽減し、特定のエンジニアが不在でもチーム全体で安定的に対応できる体制を構築するために、今回はゲームを活用したいと考えています。このゲームを通じて、チームメンバーがシステム障害に対するスキルを向上させ、効果的な対応ができるようになることを目指します。SREの探求 ―様々な企業におけるサイトリライアビリティエンジニアリングの導入と実践オライリージャパンAmazon障害対応を学ぶのにRPG？ と思ったあなたへ、SREの探求の20章「アクティブなティーチングとラーニング」では、インシデント管理を効果的に学ぶ方法として、ゲームを通じたアクティブラーニングが紹介されています。"Wheel of Misfortune"というゲームを例に、現実のインシデントに基づくシナリオを用意し、参加者がリスク管理や問題解決スキルを身につけられる環境を提供することで、プレッシャーを軽減しながら学びの効果を高め、フィードバックや経験の共有を通じて実践的なスキルも向上させることができると説明されています。つまり、インシデント対応の能力はゲームで身につきます。 (確信)。ゲーム紹介GPT-4 にゲームの紹介文を作ってもらいました。本当は室見立華さんモードとか作りたかったです。なれる！SE ２週間でわかる？ＳＥ入門 (電撃文庫)作者:夏海 公司,IxyKADOKAWAAmazonタイトル：システム障害体験RPG - テクニカルトラブルを楽しみながら解決しよう！システム障害体験RPGは、あなたがシステムエンジニアとなり、様々なシステム障害に対処しながらサービスを復旧させる目的で遊べるオンラインチャットボットゲームです。このゲームでは、現実のシステム管理や開発の知識が役立ちますが、初心者でも楽しむことができます。ゲームの開始時には、プレイヤー名、サービス名、サービスの特徴、プログラミング言語を設定し、独自のシナリオを作成します。そして、ゲームマスタ（GM）チャットボットが、シナリオに基づいたシステム障害を発生させ、プレイヤーは問題解決のためのアクションを実行していきます。プレイヤーは、コマンドを入力したり、問題解決に関する質問をしたりすることで、ゲームを進行させます。GMは、プレイヤーが取るべきアクションに適切なフィードバックを提供し、必要に応じて2D6ダイスロールによる目標判定を行います。システム障害体験RPGは、プレイヤーが楽しめるよう、適度な難関を提供しますが、不条理な展開は避けられます。また、ゲーム展開が退屈だと判断された場合、GMは盛り上がる展開を起こしてゲームをさらに面白くします。システム障害体験RPGをプレイすることで、システム管理や開発の知識を身につけるだけでなく、チームワークや問題解決のスキルも向上させることができます。ぜひ、友人や同僚と一緒に、このユニークで楽しいゲームを体験してください！それではテストプレイをしていきます。架空のシステムを作るシステムのメイキング機能。自分でも作れるし、自動にも作ってくれます。よく障害が発生する箇所や癖のある開発者の存在を入力すると色々と面白い展開があるかもしれません。今回は「サービス名『どこにでもある掲示板』でGo言語を利用した一般的な掲示板です。それ以外はそちらで作成して下さい。」と入力しました障害発生障害が発生しました。システムの復旧のために次々とアクションを取る必要があります。障害対応は進むよ どこまでもどんどん、アクションを繰り返して原因を探していきます。分からない時は素直に同僚に頼る分からない時は素直にエスカレーションしましょう。現実でも同じです。最後は力技で対応完了PMが判断してくれ... と思いつつも実装にも特に問題なく単純にサービスが人気が出てアクセスができないなら素直にスケールアップしてしまう判断です。無能っぷりを存分に晒していきましたが無事にゲーム終了しました。システムの平和はこれで守られました。最後にゲームのスクリプトを編集して恒久対応まで設定するモードや実装を実際に変更をするモードなど様々なモードで遊ぶことが皆様ならできると思います(いろんなゲームで遊びたい)。GPT-3.5 だとスピード感はあるがシステム設定や障害のシナリオを詳細には出ないのであまりゲームとして楽しくない。オススメの設定などがあればSystemFailureRPG というリポジトリを作成したのでPRをお待ちしております(迫真)。github.comシステム障害は起きないにこしたことはありませんが、発生をゼロにすることはできません。障害が起こった時の為にあなたは何ができますか？ ゲームでそれを体験してみませんか？もしくはSREのプロフェッショナルパートナーを雇いませんか？システム障害対応の教科書作者:木村 誠明技術評論社Amazon]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Terraform] aws_networkfirewall_firewall リソースから VPC エンドポイント ID を取り出す]]></title>
            <link>https://zenn.dev/toshikish/articles/fc08c2021811f9</link>
            <guid>https://zenn.dev/toshikish/articles/fc08c2021811f9</guid>
            <pubDate>Thu, 16 Mar 2023 07:58:23 GMT</pubDate>
            <content:encoded><![CDATA[はじめにTerraform を使って AWS Network Firewall のファイアウォールを作るとき，生成された VPC エンドポイントの ID をサブネットのルートテーブルのルートに追加するのは自然な流れですが，VPC エンドポイント ID を取り出すのが大変だったので，やり方を記録しておきます。例えば以下のように aws_networkfirewall_firewall リソースを定義したとします。（特に説明のない変数やリソースは，なんとなくの理解で構いません。）resource "aws_networkfirewall_firewall" "firewall" ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kubernetes の運用効率化を ChatGPT で実現する 障害対応編]]></title>
            <link>https://sreake.com/blog/kubernetes-operation-with-chatgpt/</link>
            <guid>https://sreake.com/blog/kubernetes-operation-with-chatgpt/</guid>
            <pubDate>Thu, 16 Mar 2023 01:32:14 GMT</pubDate>
            <content:encoded><![CDATA[1. はじめに はじめまして、Sreake事業部インターン生の井上です。私はSreake事業部にてSRE技術の調査と研究を行う目的で2023年3月6日から長期インターン生として参加しています。 本記事では、Kuberne […]The post Kubernetes の運用効率化を ChatGPT で実現する 障害対応編 first appeared on sreake.com | 株式会社スリーシェイク.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Terraform でDocker Provider を使いましょう]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2023/03/15/075345</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2023/03/15/075345</guid>
            <pubDate>Tue, 14 Mar 2023 22:53:45 GMT</pubDate>
            <content:encoded><![CDATA[概要酒を飲んでるので何でも良いのですがTerraform でDocker Provider を使いたくなったのでローカルでDockerコンテナのインフラ環境を構築してみます。あと、特に学びも書く予定がないのでここで「TerraformにDocker Provider があるんだ」という感想を持って読み終わって良いです。僕は別に移行してないです。github.com開発環境情報$ terraform versionTerraform v1.4.0Terraform 1.4 が GA になったのでついでに入れておきました。www.hashicorp.com同僚がブログ書いていたので紹介しておきます。zenn.devデプロイするファイルtutorial.tf というファイルをおきます。{  required_providers {    docker = {      source  = "kreuzwerker/docker"      version = "3.0.1"    }  }}provider "docker" {  host = "unix:///var/run/docker.sock"}# Pulls the imageresource "docker_image" "nginx" {  name = "nginx:latest"}# Create a containerresource "docker_container" "foo" {  image = docker_image.nginx.latest  name  = "foo"  ports {    internal = 80    external = 8080  }}このコードでは、Docker Providerバージョン3.0.1を使用しています。プロバイダとしてDockerを指定し、Dockerホストのソケットへのパスを指定しています。docker_imageリソースで、最新のnginxイメージをプルします。そして、docker_containerリソースで、docker_image.nginx.latestをベースに新しいコンテナを作成します。80番ポートを内部ポートとしてマッピングし、8080番ポートを外部ポートとしてマッピングしています。# Terraform初期化terraform init# プランの確認terraform plan# 実行terraform applydocker_containerリソースで作成したコンテナが起動しているはずです。docker psコマンドを使用して、コンテナが実行されているかどうかを確認できます。眠くなったのでもう寝ます。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[良いドキュメントを書きたくなる本を読んだらドキュメンタリアンになりたくなった]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2023/03/14/130502</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2023/03/14/130502</guid>
            <pubDate>Tue, 14 Mar 2023 04:05:02 GMT</pubDate>
            <content:encoded><![CDATA[ドキュメンタリアンとは、役職に関係なく、ソフトウェア業界でドキュメントとコミュニケーションに関心を持つ人のことです。www.writethedocs.orgはじめにこれは主に『ユーザーの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング』の書評です。私はSreakeにてSREという役職についています。SREはサービス概要、アーキテクチャの解説や図、各種構成図、各種手順書、ポストモーテム、ポリシー、SLA(SLO) … その他の様々な場面でドキュメントを書く必要があります。しかし、ドキュメントは価値が見えにくく時間と労力がかかり品質担保の面で重要度がとても高いのにその場での価値が見えにくいので浸透しにくいです。そのため、エンジニアとしてモチベーションが保ちづらいです。2021年 State of DevOps 2021 にもドキュメントに関する言及があり今後、DevOps やSREの領域でドキュメントの重要性が高まるのは言わずもがなです。書籍情報『ユーザーの問題解決とプロダクトの成功を導く　エンジニアのためのドキュメントライティング』ジャレッド・バーティ (著), ザッカリー・サラ・コーライセン (著), ジェン・ランボーン (著), デービッド・ヌーニェス (著), ハイディ・ウォーターハウス (著), 岩瀬義昌 (翻訳)ユーザーの問題解決とプロダクトの成功を導く　エンジニアのためのドキュメントライティング作者:ジャレッド・バーティ,ザッカリー・サラ・コーライセン,ジェン・ランボーン,デービッド・ヌーニェス,ハイディ・ウォーターハウス日本能率協会マネジメントセンターAmazon本書は『Docs for Developers』の翻訳本でもあります。docsfordevelopers.com日本能率協会マネジメントセンターのサイトから引用した本書の概要です。「ドキュメントを書いておけばよかった」開発者であれば一度は思ったことがあるかもしれません。ドキュメントは開発側の生産性とユーザーの利便性を高めるものです。さらに言うと、ドキュメントがなければ、ユーザーに使われる機会が確実に減ります。開発者がいかにすばらしいプロダクトを作ろうが、ドキュメントの欠如がその価値を奪うのです。本書は経験に長けた執筆者たちがドキュメントを作成する方法をゼロから説明するフィールドガイドです。架空のソフトウェア開発チームのストーリーを追いながら、ソフトウェア開発ライフサイクルの各ステップにおいて、ユーザーニーズの理解、開発者に役立つドキュメントの作成、公開、測定、保守に至るまで、開発を最適化するためのドキュメント作成の技術を解説しています。これまで学ぶ機会のなかったREADME、APIリファレンス、チュートリアル、コンセプトドキュメント、リリースノートなど、さまざまな種類のドキュメントの書き方について学ぶことができる一冊です。ドキュメントを作成している現場のエンジニアやテクニカルライター、プロダクトマネジャーの方に最適の内容です。翻訳の方と著者の方のPodCast も公開されているのでこちらもオススメです。fukabori.fmイベントもやられてました。エンジニアのためのドキュメントライティング - Forkwell Library #19forkwell.connpass.com「ユーザーの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング」の目次PARTごとに別れていて「PART I　ドキュメント作成の準備」→「PARTⅡ　ドキュメントの作成」→「PARTⅢ　ドキュメントの公開と運用」に分かれている。それぞれのフェーズで必要な知識や心構えが書いてある。各章とも端的にまとまっているのでオススメです。また、書籍を読んだ後に各種公式ドキュメントを読み込んでよくできているなぁって思うのは体験としてはよいのでオススメです。PART I　ドキュメント作成の準備CHAPTER 1　読み手の理解CHAPTER 2　ドキュメントの計画PARTⅡ　ドキュメントの作成CHAPTER 3　ドキュメントのドラフトCHAPTER 4　ドキュメントの編集CHAPTER 5　サンプルコードの組み込みCHAPTER 6　ビジュアルコンテンツの追加PARTⅢ　ドキュメントの公開と運用CHAPTER 7　ドキュメントの公開CHAPTER 8　フィードバックの収集と組み込みCHAPTER 9　ドキュメントの品質測定CHAPTER 10　ドキュメントの構成CHAPTER 11　ドキュメントの保守と非推奨化目的があるドキュメントを書こうと思わせてくれる本『コードを読めば分かるから、ドキュメントは今は書かなくていいかな？』って言った人はその後もほとんど、ドキュメントを書かない。ちなみにこういう人はコメントもあまり書いてくれない。エンジニアが新たにシステムを理解したいときはいくつかの場面がある。「エンジニアが新たにシステム開発/運用に参加したとき」「エンジニアが自分の担当以外の構成要素や機能を理解したい時」、その他、様々な場面etc…。システムで利用している技術スタックに十分な知見があったとしても、意外に開発を開始までには手間と時間がかかる。新しく参画したエンジニアが動いているソースコード以外に何もない状態ではシステムへの理解をする時に本当に苦戦する。場合によっては挫けてしまう。ドキュメントがあったとしてもポエムやコラムみたいにお気持ちがたくさん書かれていてもシステムの理解の助けにならなければ価値が薄い。だから、エンジニアは優れたドキュメントを継続的に存在させ続ける必要がある。ドキュメントはテストと同じくソフトウェアエンジニアリングという領域の基礎をなすものだと確信していますが良いドキュメントを書くことを意識することはよくドキュメントを読む時に書いている人の気持ちを考えたりなどいい習慣が身につきより価値のあるドキュメントが書けると思います。よいドキュメントとはどのようなものかPARTⅢ ドキュメントの公開と運用では良いドキュメントについて以下のような定義をSREの探求の19章 ドキュメント作成業務の改善：エンジニアリングワークフローへのドキュメントの統合 から引用している。『良いドキュメントとはドキュメントの品質が高いこと、ドキュメントが目的にかなっていること』もう少し品質について分類すると構造品質と機能品質にわけられる。構造品質と機能品質にはそれぞれ多くの要素が含まれますが今回は割愛します。CHAPTER 10　ドキュメントの構成 にはアクセスしやすいようにドキュメント全体をどうデザインするかについて書いてあり社内でも今後取り組んでいきたい部分が記載されていました。社内のドキュメントを整備する時に情報アーキテクチャ ―見つけやすく理解しやすい情報設計を読んでこれもとても参考になったのでオススメです。また、CHAPTER 11　ドキュメントの保守と非推奨化にはドキュメントを容赦なく刈り込む重要性について記載されています。ここがブログなどとは大きく違う点だと思う。そのドキュメントの機能構造が発揮できなくなったら削除したり非推奨にするのが大事です。陳腐化された、ドキュメントは削除する削除できない場合はアーカイブしたり、ステータスとして「廃止予定(Deprecated)」を付与することは本当に大切です。機能品質ドキュメントの内容がその目的を達成するかどうかを評価します。これには、情報の正確さ、完全性、信頼性、時宜性、明瞭性、関連性が含まれます。機能品質が高いドキュメントは、読者に有用な情報を提供し、目的に沿った結果を生み出すことができます。障害対応手順書を例に上げると全てのアラートに対して手順が用意されているか誰でも作業ができるか(1次受けができるか)定期的なアップデートがされているのか必要な人が必要なときにすぐアクセスできるかなどなどドキュメントがあることによってビジネスバリューが発揮できているか。これは読む人それぞれでとても変わりやすいと思うし評価もしずらいです。機能品質の評価の施策についても本書もしくはSREの探求19章には記載されているのでぜひ読んで下さい。構造品質ドキュメントがうまく書かれているか、うまく構成されているか？ドキュメントの形式、構成、レイアウト、デザイン、文法、綴りなどの側面を評価します。これらの要素が適切に整理され、適切に機能すると、読者は情報を簡単に理解し、必要な情報を効率的に見つけることができます。評価しやすい品質textlintかけて通過しているとか構成テンプレートに沿っているとか大切なのは総合品質だが機能品質を優先せよ総合品質 = 機能品質+構造品質結局は「推測するな、計測せよ」なので本書を読んで計測方法について学んでくれ構造品質は評価しやすい一方、評価指標をこれだけにしてしまうと本質を見失ってしまう当然どちらも高いことが望ましいが、機能品質は常に構造品質よりも重視されるようにする。総合品質を守りたいんじゃぁああああPART I ドキュメント作成の準備にしてもPARTⅡ　ドキュメントの作成にしても結局は総合品質の高いドキュメントを素早く作成して、特定の期間中に品質を保ち、必要に応じて廃棄していくための取り組みなのかと思いました。どのような人が読むのか想定して、ドキュメントの目的を決めてドキュメントを書く。ドキュメントを書く時に白紙からスタートするのは非常に辛いので目的が達成されやすいテンプレートを用意する。自動生成を用いる、理解を促すために図解を利用する。様々な施策を行うことで良いドキュメントを書くことに取り組む学びが多い本書です。良い技術ドキュメントの書き方がわかると良いドキュメントが書きたくなるものですよね。みんなにドキュメントを書いてほしいのでとにかく、読んでほしいとおもいました。ドキュメントに関する入門書は他の分野ではあるがソフトウェアを運用/開発するための技術ドキュメントの為に読むべき本って無いよね、という話になりがちだけど、本書はまさにそんな人たちが読みたい1冊だと思います。知識の呪いもしくは祝福人間は他人が自分と同じ知識をもっていると思い込んでしまいます。登壇資料などでも同じですがそれらを作った直後に読み返してみても全てが既知すぎて本当にこのドキュメントや資料には価値があるのか？ と自分に問い直すことがあります。その時に読み手を意識して読み手をどう結論やゴールに導きたいか事前に考えておくことは非常に助けになります。世界で一番やさしい 資料作りの教科書という書籍があってエンジニアだけに向けた書籍ではないのですが読み手の設定と目的と価値のあるドキュメントやコミュニケーションをどのように作っていくか本当にわかりやすくまとまっているのでオススメです。あなたが悩んだことはいずれ誰かも悩むことになります。特にブログは技術ドキュメントとは性質が違うものなので気にせず書いていきましょう。自動化について話したいドキュメントの中でも機械的に作業が自動化できる場合があります。相対的にトイルっぽくなる作業になるので自動化できるものに関してはCIなどで自動化せずとも存在を知ってたりとか自動化できる事実を知っていれば今後の糧にしてほしいです。個人的にはテンプレートの作成を先にやった方が効果があると思います。あくまで個人的には。issue templatesを用意しましょう。terraform-docsTerraform module を利用する際にパラメーターやアウトプットなどの機械的な情報の説明を書くのは非常に手間です。それらの機械的な情報をまとめてくれるのがterraform-docs になります。https://github.com/k1LoW/tblsDBの必要な情報をCIフレンドリーに出してくれる最高のツールなので案件でDBを使っていれば積極的に採用していきたいと思ってます。データベースのドキュメント作成を現場の開発エンジニアもやりたくない人が多いはずprotoc-gen-docProtocol Buffers 用のドキュメント生成用のプラグインhtmltesthtmltestを使えば生成されたHTML内のリンク切れを発見できます。textlinttextlintとはLintと呼ばれる静的解析ツールで、テキストファイルやMarkdownファイル等を対象に、校正ルールにもとづいて文章校正を行うツールです。様々な個人や組織やオレオレルールを公開しているので自分にあうもの自分の組織に合うものを見つけて行くのも良いと思う。ChromeやVScode などにも組み込める。よりよい文書を書くための校正ツール「textlint」のSmartHR用ルールプリセットを公開しました！ ｜SmartHRオープン社内報https://shanaiho.smarthr.co.jp/n/n881866630edaPrettier ソースコードの整形ツール。Node.js上で動作するので、ユーザーの環境に依存せずに、コードのフォーマットを開発者間で統一することのできるツールです。同僚の長谷川 氏にオススメされた。あとがき2023年3月15日では、GPT-4 が登場し、さまざまな意見が飛び交っています。私自身も仕事でChatGPTを利用しているため、その特徴はぼちぼち理解しています。ChatGPTが得意なのは、過去のデータを基に『ドキュメントの作成』をすることです。『ドキュメント作成の準備』と『ドキュメントの公開と運用』は依然として人間が担当していくと思います。GPT-4などの技術を適切に活用しつつ、ドキュメンテーションにおける人間の価値を維持するためには、バランスの取れた使用、クリティカルシンキングの維持、継続的な学習、コミュニケーションスキルの重視、チームワークと協力、そして創造性とイノベーションを大切にすることが重要です。何より重要なのは自分の頭でちゃんと考えることです。ChatGPTを利用したドキュメント化生成ツールが出てくるとは思うのでその時には『ドキュメント作成の準備』と『ドキュメントの公開と運用』がより大事になってくると思いました。遅考術――じっくりトコトン考え抜くための「１０のレッスン」作者:植原 亮ダイヤモンド社Amazon参考文献ユーザーの問題解決とプロダクトの成功を導く　エンジニアのためのドキュメントライティングSREの探求 19章 ドキュメント作成業務の改善：エンジニアリングワークフローへのドキュメンテーションの統合目的に沿ったDocumentation as Codeをいかにして実現していくか / PHPerKaigi 2021]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[cmatrix コマンドでターミナルに文字を降らせる]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/cmatrix-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/cmatrix-introduction</guid>
            <pubDate>Mon, 13 Mar 2023 09:31:04 GMT</pubDate>
            <content:encoded><![CDATA[普段ターミナルを操作しているとき、特に仕事中などはターミナルに文字を降らせたいケースがよくあると思います。そんなときに cmatrix コマンドを使用すると簡単にターミナルに文字を降らせることができます。cmatrix コマンドhttps://www.asty.org/cmatrix/https://github.com/abishekvashok/cmatrixこの記事では cmatrix コマンドのインストール方法や使い方を簡単に紹介します。 インストールHomebrew を使用している場合は brew install でインストールすることができます。$ bre...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Terraform 1.4 で導入された terraform_data リソースの使い方]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/tf-1_4-terraform-data</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/tf-1_4-terraform-data</guid>
            <pubDate>Thu, 09 Mar 2023 09:06:50 GMT</pubDate>
            <content:encoded><![CDATA[Terraform 1.4 が GA になりました 🎉🎉🎉https://www.hashicorp.com/blog/terraform-1-4-improves-the-cli-experience-for-terraform-cloudTerraform 1.4 では新しく terraform_data リソースが導入されました。terraform_data リソースは null_resource を置き換えるものであり、さらに異なる用途にも使用できます。https://developer.hashicorp.com/terraform/language/resources...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Notion API を使用してデータベースを操作する]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/notion-api-usage</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/notion-api-usage</guid>
            <pubDate>Mon, 06 Mar 2023 09:13:09 GMT</pubDate>
            <content:encoded><![CDATA[Notion で Integration を作成して Notion API を使用してデータベースを操作するまでの手順メモ。 準備 1. Integration を作成するMy integrations ページに遷移します。Create new integration をクリックします。Name には任意の Integration 名を入力します。今回は Example Integration としておきます。Associated workspace には Integration をインストールするワークスペースを選択します。自身がワークスペースの Admin レベ...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[振り返り (2020 - 2022)]]></title>
            <link>https://zenn.dev/toversus/articles/8557a7fb2bc15c</link>
            <guid>https://zenn.dev/toversus/articles/8557a7fb2bc15c</guid>
            <pubDate>Sun, 05 Mar 2023 14:17:49 GMT</pubDate>
            <content:encoded><![CDATA[コロプラに 2020/3/1 に入社して、2023/2/28 付けで退職したので、丸々 3 年間勤務したことになります。本当の意味での大規模 Kubernetes 環境で貴重な経験をさせて貰い感謝しかないです。記憶が新しい内に、この 3 年間でやってきたことを公開できる範囲で整理しました。 GitOps 風なマニフェスト管理への移行インフラチームで管理している監視ツールやアドオンなコンポーネントを Helm でインストールしていました。マルチクラスタな環境で手動インストールはスケールしないので、Helmfile で生成した各クラスタのマニフェストを Argo CD で同期する方式に...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Devbox を使った開発環境]]></title>
            <link>https://blog.1q77.com/2023/03/devbox/</link>
            <guid>https://blog.1q77.com/2023/03/devbox/</guid>
            <pubDate>Sat, 04 Mar 2023 15:05:12 GMT</pubDate>
            <content:encoded><![CDATA[ローカル環境を汚さずDockerコンテナのオーバーヘッドもなく、開発環境を自在に構築できる「Devbox 0.2.0」登場 － Publickey この記事を最初に見たときは「えーそん]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[『2023年もSRE再考と叫びなさい!!』というタイトルで登壇しました]]></title>
            <link>https://syu-m-5151.hatenablog.com/entry/2023/03/03/105049</link>
            <guid>https://syu-m-5151.hatenablog.com/entry/2023/03/03/105049</guid>
            <pubDate>Fri, 03 Mar 2023 01:50:49 GMT</pubDate>
            <content:encoded><![CDATA[概要エンジニア文化祭 2023というイベントに『2023年もSRE再考と叫びなさい‼️ - SREの跡を求めず SREの求めたるところを求めよ』というタイトルで登壇しました。2023年にSREについて再び考えたりしたいなーって思いながらこのタイトルにしました。途中でこのイベントにはSREの方だけではなく開発者やその他の方もたくさん聞いてるイベントじゃーんって思い直してガッツリ資料を作り直しましたので見守ってください。サイトリライアビリティワークブック ―SREの実践方法オライリー・ジャパンAmazon資料登壇資料になります。 speakerdeck.comあとがき30分発表なのに資料が50ページ程度で、技術発表にしても高速早口オタクすぎたとおもいます。DevOpsの背景を歴史から紐解いていたりしてたらこうなりましたが後悔はしてないです。本発表に関しては2023年 SRE再考と称しておきながら最後の3つ『信頼性が確保できるとプラットフォームにしたくなる』、『信頼性が確保できると変更速度を両立したくなる』、『信頼性が確保できると未知のものを見つけたくなる』への掘り下げが少なかったと思います。それが主にガッツリ資料を作り直した部分になります。この資料はもう少し喋りたいと思うので加筆、修正して60分ぐらいで喋らせてくれるイベントがあればTwitter でDM下さい。じゃあ、あとがきに書けばよくね？参考文献SRE サイトリライアビリティエンジニアリングが”ザックリ”「すっきり」分かる本: Googleが実践している新DevOps方法論SRE サイトリライアビリティエンジニアリングサイトリライアビリティワークブックWhat's the Difference Between DevOps and SRE?Solving Reliability Fears with Site Reliability EngineeringThe History of DevOps ReportsEffective DevOps非ITの事業会社にSREと言わずにSREを持ち込んだReliability When Everything Is a Platform: Why You Need to SRE Your Customersネットワーク・エフェクト 事業とプロダクトに欠かせない強力で重要なフレームワークLeanとDevOpsの科学[Accelerate] テクノロジーの戦略的活用が組織変革を加速する継続的デリバリーのソフトウェア工学:もっと早く、もっと良いソフトウェアを作るための秘訣オブザーバビリティ・エンジニアリングWebエンジニアのための監視システム実装ガイド反脆弱性[上]――不確実な世界を生き延びる唯一の考え方反脆弱性[下]――不確実な世界を生き延びる唯一の考え方2022年版 OpenTelemetryを知れば世界が平和に]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitHub Actions Importer を使って CI/CD を GitHub Actions に移行する]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/gh-actions-importer</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/gh-actions-importer</guid>
            <pubDate>Thu, 02 Mar 2023 08:10:59 GMT</pubDate>
            <content:encoded><![CDATA[GitHub Actions Importer が GA になりました 🎉🎉🎉https://github.blog/2023-03-01-github-actions-importer-is-now-generally-available/GitHub Actions Importer は様々な CI サービスから GitHub Actions への移行をサポートするツールです。他の CI サービスで使用している設定ファイルを元に GitHub Actions ワークフロー定義の YAML ファイルを自動で作成することができます。2023 年 03 月 02 日現在、次の CI...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Snowflakeでのコスト管理]]></title>
            <link>https://zenn.dev/nedoko_dok0dko/articles/ffe6450c4cd851</link>
            <guid>https://zenn.dev/nedoko_dok0dko/articles/ffe6450c4cd851</guid>
            <pubDate>Tue, 28 Feb 2023 10:45:26 GMT</pubDate>
            <content:encoded><![CDATA[Snowflakeを最近触ってみることがあったので、コスト周りについて個人的に調べたログ参考ドキュメント↓Snowflakeでのコスト管理 | Snowflake Documentation お品書きSnowflakeのコストについてSnowflakeのコスト調査Snowflakeのコスト制御 SnowflakeのコストについてSnowflakeでのコストは次の3つの領域に分類される。コンピューティング: ユーザー管理(仮想ウェアハウス)、Snowflake管理(Snowpipeなどのサーバーレス機能)、およびクラウドサービスストレージ: データステージング...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[APIのエンドポイント設計で気をつけていること~ポエム編~]]></title>
            <link>https://qiita.com/bayobayo0324/items/4b21a71c5fb0e0202fbc</link>
            <guid>https://qiita.com/bayobayo0324/items/4b21a71c5fb0e0202fbc</guid>
            <pubDate>Tue, 28 Feb 2023 01:07:37 GMT</pubDate>
            <content:encoded><![CDATA[この記事は？日々の業務のなかで、フロントエンドチームの立場でAPIを利用したりバックエンドAPIチームの立場でAPIを設計実装改修したりする私のポエムみたいなものです。みなさまが日々の業務に疲れ…]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Charm 製の Go ロギングライブラリ「Log」を試してみる]]></title>
            <link>https://zenn.dev/kou_pg_0131/articles/charm-log-introduction</link>
            <guid>https://zenn.dev/kou_pg_0131/articles/charm-log-introduction</guid>
            <pubDate>Mon, 27 Feb 2023 09:29:55 GMT</pubDate>
            <content:encoded><![CDATA[Charm 製の Go ロギングライブラリが出たので早速試してみたメモです。https://github.com/charmbracelet/log 検証環境Go v1.20charmbracelet/log v0.1.1 使い方 基本的な使い方以下のメソッドを使うと特定のレベルのログを出力します。log.Debug()log.Info()log.Warn()log.Error()log.Fatal()log.Print() は設定されているログレベルに関係なく出力されます。package mainimport "github.com/cha...]]></content:encoded>
        </item>
    </channel>
</rss>